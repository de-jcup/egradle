<?xml version="1.0" encoding="UTF-8" standalone="yes"?><type interface="false" language="gradle" name="org.gradle.plugins.signing.SignOperation" version="3.0"><description> 
 A sign operation creates digital signatures for one or more files or &lt;a href='type://PublishArtifact publish artifacts'&gt;PublishArtifact publish artifacts&lt;/a&gt;. 
 
 &lt;p&gt;The external representation of the signature is specified by the &lt;a href='type://SignOperation#getSignatureType() signature type property'&gt;#getSignatureType() signature type property&lt;/a&gt;, while the &lt;a href='type://SignOperation#signatory'&gt;#signatory&lt;/a&gt; property specifies who is to sign. &lt;p&gt; A sign 
 operation manages one or more &lt;a href='type://Signature'&gt;Signature&lt;/a&gt; objects. The &lt;a href='type://sign'&gt;sign&lt;/a&gt; methods are used to register things to generate signatures for. The &lt;a href='type://SignOperation#execute()'&gt;#execute()&lt;/a&gt; method generates the signatures for 
 all of the registered items at that time. 
</description><method name="apply" returnType="java.io.File"><parameter type="org.gradle.plugins.signing.Signature" name="input"/></method><method name="collectSignatureFiles" returnType="java.util.ArrayList"><parameter type="com.google.common.base.Function" name="getFile"/></method><method name="configure" returnType="org.gradle.plugins.signing.SignOperation"><description> 
 Executes the given closure against this object. 
</description><parameter type="groovy.lang.Closure" name="closure"/></method><method name="execute" returnType="org.gradle.plugins.signing.SignOperation"><description> 
 Generates actual signature files for all of the registered signatures. 
 
 &lt;p&gt;The signatures are generated with the configuration they have at this time, which includes the signature type and signatory of this operation at this time. &lt;p&gt; This method can be called 
 multiple times, with the signatures being generated with their current configuration each time. 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;this 
 @see Signature#generate() 
</description></method><method name="getDisplayName" returnType="java.lang.String"/><method name="getFilesToSign" returnType="org.gradle.api.file.FileCollection"><description> 
 All of the files that will be signed by this operation. 
</description></method><method name="getSignatory" returnType="org.gradle.plugins.signing.signatory.Signatory"/><method name="getSignatureFiles" returnType="org.gradle.api.file.FileCollection"><description> 
 All of the signature files that will be generated by this operation. 
</description></method><method name="getSignatureType" returnType="org.gradle.plugins.signing.type.SignatureType"/><method name="getSignatures" returnType="java.util.List"><description> 
 The registered signatures. 
</description></method><method name="getSingleSignature" returnType="org.gradle.plugins.signing.Signature"><description> 
 Returns the single registered signature. 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The signature. 
 @throws IllegalStateException if there is not exactly one registered signature. 
</description></method><method name="isRequired" returnType="boolean"/><method name="newSignatureFileCollection" returnType="org.gradle.api.file.FileCollection"><parameter type="com.google.common.base.Function" name="getFile"/></method><method name="setRequired" returnType="void"><parameter type="boolean" name="required"/></method><method name="setSignatory" returnType="void"><parameter type="org.gradle.plugins.signing.signatory.Signatory" name="signatory"/></method><method name="setSignatureType" returnType="void"><parameter type="org.gradle.plugins.signing.type.SignatureType" name="signatureType"/></method><method name="sign" returnType="org.gradle.plugins.signing.SignOperation"><description> 
 Registers signatures for the given files. 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;this 
 @see Signature#Signature(File, SignatureSpec, Object...) 
</description><parameter type="java.io.File" name="files"/></method><method name="sign" returnType="org.gradle.plugins.signing.SignOperation"><description> 
 Registers signatures for the given artifacts. 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;this 
 @see Signature#Signature(File, SignatureSpec, Object...) 
</description><parameter type="org.gradle.api.artifacts.PublishArtifact" name="artifacts"/></method><method name="sign" returnType="org.gradle.plugins.signing.SignOperation"><description> 
 Registers signatures (with the given classifier) for the given files 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;this 
 @see Signature#Signature(PublishArtifact, SignatureSpec, Object...) 
</description><parameter type="java.lang.String" name="classifier"/><parameter type="java.io.File" name="files"/></method><method name="signatory" returnType="org.gradle.plugins.signing.SignOperation"><description> 
 Change the signatory for signature generation. 
</description><parameter type="org.gradle.plugins.signing.signatory.Signatory" name="signatory"/></method><method name="signatureType" returnType="org.gradle.plugins.signing.SignOperation"><description> 
 Change the signature type for signature generation. 
</description><parameter type="org.gradle.plugins.signing.type.SignatureType" name="type"/></method><method name="toString" returnType="java.lang.String"/><property name="displayName" type="java.lang.String"/><property name="filesToSign" type="org.gradle.api.file.FileCollection"><description> 
 All of the files that will be signed by this operation. 
</description></property><property name="required" type="boolean"/><property name="signatory" type="org.gradle.plugins.signing.signatory.Signatory"/><property name="signatureFiles" type="org.gradle.api.file.FileCollection"><description> 
 All of the signature files that will be generated by this operation. 
</description></property><property name="signatureType" type="org.gradle.plugins.signing.type.SignatureType"/><property name="signatures" type="java.util.List"><description> 
 The registered signatures. 
</description></property><property name="singleSignature" type="org.gradle.plugins.signing.Signature"><description> 
 Returns the single registered signature. 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The signature. 
 @throws IllegalStateException if there is not exactly one registered signature. 
</description></property></type>