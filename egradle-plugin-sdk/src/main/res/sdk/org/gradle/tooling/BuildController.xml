<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.tooling.BuildController" version="3.0">
    <description>
 * Provides a {@link BuildAction} various ways to control a Gradle build and access information about the build.
 *
 * @since 1.8
 </description>
    <method name="findModel" returnType="T">
        <description>
     * Fetches a snapshot of the model of the given type, if available.
     *
     * &lt;p&gt;See {@link #getModel(Class)} for more details.&lt;/p&gt;
     *
     * @param modelType The model type.
     * @param &lt;T&gt; The model type.
     * @return The model, or null if not present.
     </description>
        <parameter type="java.lang.Class" name="modelType"/>
    </method>
    <method name="findModel" returnType="T">
        <description>
     * Fetches a snapshot of the model of the given type, if available.
     *
     * &lt;p&gt;See {@link #getModel(Model, Class)} for more details.&lt;/p&gt;
     *
     * @param modelType The model type.
     * @param &lt;T&gt; The model type.
     * @return The model, or null if not present.
     </description>
        <parameter type="org.gradle.tooling.model.Model" name="target"/>
        <parameter type="java.lang.Class" name="modelType"/>
    </method>
    <method name="getBuildModel" returnType="org.gradle.tooling.model.gradle.GradleBuild">
        <description>
     * Returns an overview of the Gradle build, including some basic details of the projects that make up the build.
     * This is equivalent to calling {@code #getModel(GradleBuild.class)}.
     *
     * @return The model.
     </description>
    </method>
    <method name="getModel" returnType="T">
        <description>
     * Fetches a snapshot of the model of the given type for the default project. The default project is generally the
     * project referenced when a {@link ProjectConnection} is created.
     *
     * &lt;p&gt;Any of following models types may be available, depending on the version of Gradle being used by the target
     * build:
     *
     * &lt;ul&gt;
     *     &lt;li&gt;{@link GradleBuild}&lt;/li&gt;
     *     &lt;li&gt;{@link org.gradle.tooling.model.build.BuildEnvironment}&lt;/li&gt;
     *     &lt;li&gt;{@link org.gradle.tooling.model.GradleProject}&lt;/li&gt;
     *     &lt;li&gt;{@link org.gradle.tooling.model.gradle.BuildInvocations}&lt;/li&gt;
     *     &lt;li&gt;{@link org.gradle.tooling.model.gradle.ProjectPublications}&lt;/li&gt;
     *     &lt;li&gt;{@link org.gradle.tooling.model.idea.IdeaProject}&lt;/li&gt;
     *     &lt;li&gt;{@link org.gradle.tooling.model.idea.BasicIdeaProject}&lt;/li&gt;
     *     &lt;li&gt;{@link org.gradle.tooling.model.eclipse.EclipseProject}&lt;/li&gt;
     *     &lt;li&gt;{@link org.gradle.tooling.model.eclipse.HierarchicalEclipseProject}&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * &lt;p&gt;A build may also expose additional custom tooling models. You can use this method to query these models.
     *
     * @param modelType The model type.
     * @param &lt;T&gt; The model type.
     * @return The model.
     * @throws UnknownModelException When the default project does not support the requested model.
     *
     * @since 1.8
     </description>
        <parameter type="java.lang.Class" name="modelType"/>
    </method>
    <method name="getModel" returnType="T">
        <description>
     * Fetches a snapshot of the model of the given type for the given element, usually a Gradle project.
     *
     * &lt;p&gt;The following elements are supported:
     *
     * &lt;ul&gt;
     *     &lt;li&gt;Any {@link org.gradle.tooling.model.gradle.BasicGradleProject}&lt;/li&gt;
     *     &lt;li&gt;Any {@link org.gradle.tooling.model.GradleProject}&lt;/li&gt;
     *     &lt;li&gt;Any {@link org.gradle.tooling.model.eclipse.EclipseProject}&lt;/li&gt;
     *     &lt;li&gt;Any {@link org.gradle.tooling.model.idea.IdeaModule}&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * &lt;p&gt;See {@link #getModel(Class)} for more details.
     *
     * @param target The target element, usually a project.
     * @param modelType The model type.
     * @param &lt;T&gt; The model type.
     * @return The model.
     * @throws UnknownModelException When the target project does not support the requested model.
     </description>
        <parameter type="org.gradle.tooling.model.Model" name="target"/>
        <parameter type="java.lang.Class" name="modelType"/>
    </method>
    <property name="buildModel" type="org.gradle.tooling.model.gradle.GradleBuild">
        <description>
     * Returns an overview of the Gradle build, including some basic details of the projects that make up the build.
     * This is equivalent to calling {@code #getModel(GradleBuild.class)}.
     *
     * @return The model.
     </description>
    </property>
    <property name="model" type="T">
        <description>
     * Fetches a snapshot of the model of the given type for the given element, usually a Gradle project.
     *
     * &lt;p&gt;The following elements are supported:
     *
     * &lt;ul&gt;
     *     &lt;li&gt;Any {@link org.gradle.tooling.model.gradle.BasicGradleProject}&lt;/li&gt;
     *     &lt;li&gt;Any {@link org.gradle.tooling.model.GradleProject}&lt;/li&gt;
     *     &lt;li&gt;Any {@link org.gradle.tooling.model.eclipse.EclipseProject}&lt;/li&gt;
     *     &lt;li&gt;Any {@link org.gradle.tooling.model.idea.IdeaModule}&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * &lt;p&gt;See {@link #getModel(Class)} for more details.
     *
     * @param target The target element, usually a project.
     * @param modelType The model type.
     * @param &lt;T&gt; The model type.
     * @return The model.
     * @throws UnknownModelException When the target project does not support the requested model.
     </description>
    </property>
</type>
