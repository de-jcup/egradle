<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.tooling.model.eclipse.EclipseProject" version="3.0">
    <description>
 * The complete model of an Eclipse project.
 *
 * &lt;p&gt;Note that the names of Eclipse projects are unique, and can be used as an identifier for the project.
 *
 * @since 1.0-milestone-3
 </description>
    <method name="getBuildCommands" returnType="org.gradle.tooling.model.DomainObjectSet">
        <description>
     * Returns the Eclipse build commands configured on the project.
     * &lt;p&gt;
     * Some build commands are automatically added to the result based on the Gradle plugins applied on the project.
     * For example, if the project applies the 'java' plugin the result will contain the
     * {@code "org.eclipse.jdt.core.javabuilder"} build command. Note, that the exact list of automatically
     * added build commands is not part of the API and can vary between Gradle releases.
     * &lt;p&gt;
     * The result can be customized via the 'eclipse' plugin configuration.
     *
     * @return The list of Eclipse build commands.
     * @since 2.9
     * @throws UnsupportedMethodException For Gradle versions older than 2.9, where this method is not supported.
     </description>
    </method>
    <method name="getChildren" returnType="org.gradle.tooling.model.DomainObjectSet">
        <description>
     * {@inheritDoc}
     </description>
    </method>
    <method name="getClasspath" returnType="org.gradle.tooling.model.DomainObjectSet">
        <description>
     * Returns the external dependencies which make up the classpath of this project.
     *
     * @return The dependencies. Returns an empty set if the project has no external dependencies.
     * @since 1.0-milestone-3
     </description>
    </method>
    <method name="getClasspathContainers" returnType="org.gradle.tooling.model.DomainObjectSet">
        <description>
     * Returns the Eclipse classpath containers defined on the project.
     *
     * @return The list of classpath containers.
     * @since 3.0
     * @throws UnsupportedMethodException For Gradle versions older than 3.0, where this method is not supported.
     </description>
    </method>
    <method name="getGradleProject" returnType="org.gradle.tooling.model.GradleProject">
        <description>
     * The gradle project that is associated with this project.
     * Typically, a single Eclipse project corresponds to a single gradle project.
     * &lt;p&gt;
     * See {@link HasGradleProject}
     *
     * @return associated gradle project
     * @since 1.0-milestone-5
     </description>
    </method>
    <method name="getJavaSourceSettings" returnType="org.gradle.tooling.model.eclipse.EclipseJavaSourceSettings">
        <description>
     * Returns the Java source settings for this project.
     *
     * @return the settings for Java sources or {@code null} if not a Java element.
     * @throws UnsupportedMethodException For Gradle versions older than 2.10, where this method is not supported.
     * @since 2.10
     </description>
    </method>
    <method name="getOutputLocation" returnType="org.gradle.tooling.model.eclipse.EclipseOutputLocation">
        <description>
     * Returns the output location of this project.
     *
     * @return The project's output location.
     * @since 3.0
     * @throws UnsupportedMethodException For Gradle versions older than 3.0, where this method is not supported.
     </description>
    </method>
    <method name="getParent" returnType="org.gradle.tooling.model.eclipse.EclipseProject">
        <description>
     * {@inheritDoc}
     </description>
    </method>
    <method name="getProjectNatures" returnType="org.gradle.tooling.model.DomainObjectSet">
        <description>
     * Returns the Eclipse natures configured on the project.
     * &lt;p&gt;
     * Some natures are automatically added to the result based on the Gradle plugins applied on the project.
     * For example, if the project applies the 'java' plugin the result will contain the
     * {@code "org.eclipse.jdt.core.javanature"} entry. Note, that the exact list of automatically added
     * natures is not part of the API and can vary between Gradle releases.
     * &lt;p&gt;
     * The result can be customized via the 'eclipse' plugin configuration.
     *
     * @return The list of Eclipse project natures.
     * @since 2.9
     * @throws UnsupportedMethodException For Gradle versions older than 2.9, where this method is not supported.
     </description>
    </method>
    <interface name="org.gradle.tooling.model.eclipse.HierarchicalEclipseProject"/>
    <property name="buildCommands" type="org.gradle.tooling.model.DomainObjectSet">
        <description>
     * Returns the Eclipse build commands configured on the project.
     * &lt;p&gt;
     * Some build commands are automatically added to the result based on the Gradle plugins applied on the project.
     * For example, if the project applies the 'java' plugin the result will contain the
     * {@code "org.eclipse.jdt.core.javabuilder"} build command. Note, that the exact list of automatically
     * added build commands is not part of the API and can vary between Gradle releases.
     * &lt;p&gt;
     * The result can be customized via the 'eclipse' plugin configuration.
     *
     * @return The list of Eclipse build commands.
     * @since 2.9
     * @throws UnsupportedMethodException For Gradle versions older than 2.9, where this method is not supported.
     </description>
    </property>
    <property name="children" type="org.gradle.tooling.model.DomainObjectSet">
        <description>
     * {@inheritDoc}
     </description>
    </property>
    <property name="classpath" type="org.gradle.tooling.model.DomainObjectSet">
        <description>
     * Returns the external dependencies which make up the classpath of this project.
     *
     * @return The dependencies. Returns an empty set if the project has no external dependencies.
     * @since 1.0-milestone-3
     </description>
    </property>
    <property name="classpathContainers" type="org.gradle.tooling.model.DomainObjectSet">
        <description>
     * Returns the Eclipse classpath containers defined on the project.
     *
     * @return The list of classpath containers.
     * @since 3.0
     * @throws UnsupportedMethodException For Gradle versions older than 3.0, where this method is not supported.
     </description>
    </property>
    <property name="gradleProject" type="org.gradle.tooling.model.GradleProject">
        <description>
     * The gradle project that is associated with this project.
     * Typically, a single Eclipse project corresponds to a single gradle project.
     * &lt;p&gt;
     * See {@link HasGradleProject}
     *
     * @return associated gradle project
     * @since 1.0-milestone-5
     </description>
    </property>
    <property name="javaSourceSettings" type="org.gradle.tooling.model.eclipse.EclipseJavaSourceSettings">
        <description>
     * Returns the Java source settings for this project.
     *
     * @return the settings for Java sources or {@code null} if not a Java element.
     * @throws UnsupportedMethodException For Gradle versions older than 2.10, where this method is not supported.
     * @since 2.10
     </description>
    </property>
    <property name="outputLocation" type="org.gradle.tooling.model.eclipse.EclipseOutputLocation">
        <description>
     * Returns the output location of this project.
     *
     * @return The project's output location.
     * @since 3.0
     * @throws UnsupportedMethodException For Gradle versions older than 3.0, where this method is not supported.
     </description>
    </property>
    <property name="parent" type="org.gradle.tooling.model.eclipse.EclipseProject">
        <description>
     * {@inheritDoc}
     </description>
    </property>
    <property name="projectNatures" type="org.gradle.tooling.model.DomainObjectSet">
        <description>
     * Returns the Eclipse natures configured on the project.
     * &lt;p&gt;
     * Some natures are automatically added to the result based on the Gradle plugins applied on the project.
     * For example, if the project applies the 'java' plugin the result will contain the
     * {@code "org.eclipse.jdt.core.javanature"} entry. Note, that the exact list of automatically added
     * natures is not part of the API and can vary between Gradle releases.
     * &lt;p&gt;
     * The result can be customized via the 'eclipse' plugin configuration.
     *
     * @return The list of Eclipse project natures.
     * @since 2.9
     * @throws UnsupportedMethodException For Gradle versions older than 2.9, where this method is not supported.
     </description>
    </property>
</type>
