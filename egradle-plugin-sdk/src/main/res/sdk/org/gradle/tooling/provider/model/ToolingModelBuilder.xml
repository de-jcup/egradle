<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.tooling.provider.model.ToolingModelBuilder" version="3.0">
    <description>
 * Responsible for building tooling models to return to the tooling API client.
 *
 * &lt;p&gt;The {@link #buildAll(String, Project)} method is called to create a model for a given project. The model is serialized to the client process and passed
 * to the client application.&lt;/p&gt;
 *
 * &lt;p&gt;The model object is adapted to the Java type that is used by the client by generating a view, or wrapper object, over the model object.
 * The model object does not need to implement the client Java type, but it does need to have the same structure as the client type.
 * This means that the model object should have the same properties and methods as those defined on the client type. The tooling API deals with
 * missing properties and methods, to allow evolution of the models. It will also adapt the values returned by the methods of the model object to the
 * types used by the client.
 * &lt;/p&gt;
 *
 * &lt;p&gt;Although it is not enforced, the model object should be immutable, as the tooling API will do some caching and other performance optimizations on the
 * assumption that the model is effectively immutable. The tooling API does not make any guarantees about how the client application will use the model object.&lt;/p&gt;
 </description>
    <method name="buildAll" returnType="java.lang.Object">
        <description>
     * Creates the model of the given type for the given project.
     *
     * @param modelName The model name, usually the same as the name of the Java interface used by the client.
     * @param project The project to create the model for.
     * @return The model.
     </description>
        <parameter type="java.lang.String" name="modelName"/>
        <parameter type="org.gradle.api.Project" name="project"/>
    </method>
    <method name="canBuild" returnType="boolean">
        <description>
     * Indicates whether this builder can construct the given model.
     *
     * @param modelName The model name, usually the same as the name of the Java interface used by the client.
     * @return true if this builder can construct the model, false if not.
     </description>
        <parameter type="java.lang.String" name="modelName"/>
    </method>
</type>
