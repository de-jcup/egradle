<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.tooling.events.ProgressListener" version="3.0">
    <description>
 * A listener which is notified when operations that are executed as part of running a build make progress.
 *
 * @see org.gradle.tooling.LongRunningOperation#addProgressListener(ProgressListener)
 * @see org.gradle.tooling.LongRunningOperation#addProgressListener(ProgressListener, java.util.Set)
 * @since 2.5
 </description>
    <method name="statusChanged" returnType="void">
        <description>
     * Called when the execution of an operation progresses.
     *
     * The following operation-specific events are currently issued:
     * &lt;ul&gt;
     *     &lt;li&gt;{@link org.gradle.tooling.events.test.TestStartEvent}&lt;/li&gt;
     *     &lt;li&gt;{@link org.gradle.tooling.events.test.TestFinishEvent}&lt;/li&gt;
     *     &lt;li&gt;{@link org.gradle.tooling.events.task.TaskStartEvent}&lt;/li&gt;
     *     &lt;li&gt;{@link org.gradle.tooling.events.task.TaskFinishEvent}&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * For all other operations, the following generic events are currently issued :
     * &lt;ul&gt;
     *     &lt;li&gt;{@link StartEvent}&lt;/li&gt;
     *     &lt;li&gt;{@link FinishEvent}&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * You can find out more about the operation for which progress is reported
     * by querying the descriptor using {@link org.gradle.tooling.events.ProgressEvent#getDescriptor()}.
     *
     * @param event An event describing the operation progress.
     * @see org.gradle.tooling.events.test.TestProgressEvent
     * @see org.gradle.tooling.events.task.TaskProgressEvent
     * @see org.gradle.tooling.events.ProgressEvent
     </description>
        <parameter type="org.gradle.tooling.events.ProgressEvent" name="event"/>
    </method>
</type>
