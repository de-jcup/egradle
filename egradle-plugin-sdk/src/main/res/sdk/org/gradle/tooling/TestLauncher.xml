<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.tooling.TestLauncher" version="3.0">
    <description>
 *
 * A {@code TestLauncher} allows you to execute tests in a Gradle build.
 *
 * @since 2.6
 </description>
    <method name="run" returnType="void">
        <description>
     * Executes the tests, blocking until complete.
     *
     * @throws TestExecutionException when one or more tests fail, or no tests for execution declared or no matching tests can be found.
     * @throws UnsupportedVersionException When the target Gradle version does not support test execution.
     * @throws org.gradle.tooling.exceptions.UnsupportedBuildArgumentException When there is a problem with build arguments provided by {@link #withArguments(String...)}.
     * @throws org.gradle.tooling.exceptions.UnsupportedOperationConfigurationException
     *          When the target Gradle version does not support some requested configuration option.
     * @throws BuildException On some failure while executing the tests in the Gradle build.
     * @throws BuildCancelledException When the operation was cancelled before it completed successfully.
     * @throws GradleConnectionException On some other failure using the connection.
     * @throws IllegalStateException When the connection has been closed or is closing.
     * @since 2.6
     </description>
    </method>
    <method name="run" returnType="void">
        <description>
     * Starts executing the tests. This method returns immediately, and the result is later passed to the given handler.
     *
     * &lt;p&gt;If the operation fails, the handler's {@link ResultHandler#onFailure(GradleConnectionException)}
     * method is called with the appropriate exception. See {@link #run()} for a description of the various exceptions that the operation may fail with.
     *
     * @param handler The handler to supply the result to.
     * @throws IllegalStateException When the connection has been closed or is closing.
     * @since 2.6
     </description>
        <parameter type="org.gradle.tooling.ResultHandler" name="handler"/>
    </method>
    <method name="withJvmTestClasses" returnType="org.gradle.tooling.TestLauncher">
        <description>
     * Adds tests to be executed declared by class name.
     *
     * @param testClasses The class names of the tests to be executed.
     * @return this
     * @since 2.6
     </description>
        <parameter type="java.lang.Iterable" name="testClasses"/>
    </method>
    <method name="withJvmTestClasses" returnType="org.gradle.tooling.TestLauncher">
        <description>
     * Adds tests to be executed declared by class name.
     *
     * @param testClasses The class names of the tests to be executed.
     * @return this
     * @since 2.6
     </description>
        <parameter type="java.lang.String" name="testClasses"/>
    </method>
    <method name="withJvmTestMethods" returnType="org.gradle.tooling.TestLauncher">
        <description>
     * Adds tests to be executed declared by class and methods name.
     *
     * @param testClass The name of the class containing the methods to execute.
     * @param methods The names of the test methods to be executed.
     * @return this
     * @since 2.7
     </description>
        <parameter type="java.lang.String" name="testClass"/>
        <parameter type="java.lang.Iterable" name="methods"/>
    </method>
    <method name="withJvmTestMethods" returnType="org.gradle.tooling.TestLauncher">
        <description>
     * Adds tests to be executed declared by class and method name.
     *
     * @param testClass The name of the class containing the methods to execute.
     * @param methods The names of the test methods to be executed.
     * @return this
     * @since 2.7
     </description>
        <parameter type="java.lang.String" name="testClass"/>
        <parameter type="java.lang.String" name="methods"/>
    </method>
    <method name="withTests" returnType="org.gradle.tooling.TestLauncher">
        <description>
     * Adds tests to be executed by passing test descriptors received from a previous Gradle Run.
     *
     * @param descriptors The OperationDescriptor defining one or more tests.
     * @return this
     * @since 2.6
     </description>
        <parameter type="java.lang.Iterable" name="descriptors"/>
    </method>
    <method name="withTests" returnType="org.gradle.tooling.TestLauncher">
        <description>
     * Adds tests to be executed by passing test descriptors received from a previous Gradle Run.
     *
     * @param descriptors The OperationDescriptor defining one or more tests.
     * @return this
     * @since 2.6
     </description>
        <parameter type="org.gradle.tooling.events.test.TestOperationDescriptor" name="descriptors"/>
    </method>
    <interface name="org.gradle.tooling.ConfigurableLauncher"/>
</type>
