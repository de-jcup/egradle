<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type language="gradle" name="org.gradle.plugins.signing.Signature" version="3.0">
    <description>
 * A digital signature file artifact.
 *
 * &lt;p&gt;A signature file is always generated from another file, which may be a {@link PublishArtifact}.&lt;/p&gt;
 </description>
    <method name="call" returnType="java.io.File"/>
    <method name="defaultDate" returnType="java.util.Date"/>
    <method name="defaultFile" returnType="java.io.File"/>
    <method name="defaultName" returnType="java.lang.String"/>
    <method name="defaultType" returnType="java.lang.String"/>
    <method name="fileName" returnType="java.lang.String"/>
    <method name="generate" returnType="void">
        <description>
     * Generates the signature file.
     *
     * &lt;p&gt;In order to generate the signature, the {@link #getToSign() file to sign}, {@link #getSignatory() signatory} and {@link #getSignatureType() signature type} must be known (i.e. non {@code
     * null}).&lt;/p&gt;
     *
     * @throws InvalidUserDataException if the there is insufficient information available to generate the signature.
     </description>
    </method>
    <method name="getClassifier" returnType="java.lang.String">
        <description>
     * The classifier of the signature artifact.
     *
     * &lt;p&gt;Defaults to the classifier of the source artifact (if signing an artifact) or the given classifier at construction (if given).&lt;/p&gt;
     *
     * @return The classifier. May be {@code null} if unknown at this time.
     </description>
    </method>
    <method name="getDate" returnType="java.util.Date">
        <description>
     * The date of the signature artifact.
     *
     * &lt;p&gt;Defaults to the last modified time of the {@link #getFile() signature file} (if exists)&lt;/p&gt;
     *
     * @return The date of the signature. May be {@code null} if unknown at this time.
     </description>
    </method>
    <method name="getExtension" returnType="java.lang.String">
        <description>
     * The extension of the signature artifact.
     *
     * &lt;p&gt;Defaults to the specified file extension of the {@link #getSignatureType() signature type}.&lt;/p&gt;
     *
     * @return The extension. May be {@code null} if unknown at this time.
     </description>
    </method>
    <method name="getFile" returnType="java.io.File">
        <description>
     * The file for the generated signature, which may not yet exist.
     *
     * &lt;p&gt;Defaults to a file alongside the {@link #getToSign() file to sign} with the extension of the {@link #getSignatureType() signature type}.&lt;/p&gt;
     *
     * @return The signature file. May be {@code null} if unknown at this time.
     </description>
    </method>
    <method name="getName" returnType="java.lang.String">
        <description>
     * The name of the signature artifact.
     *
     * &lt;p&gt;Defaults to the name of the signature {@link #getFile() file}.
     *
     * @return The name. May be {@code null} if unknown at this time.
     </description>
    </method>
    <method name="getSignatory" returnType="org.gradle.plugins.signing.signatory.Signatory">
        <description>
     * The signatory of this signature file.
     *
     * @return The signatory. May be {@code null} if unknown at this time.
     </description>
    </method>
    <method name="getSignatureSpec" returnType="org.gradle.plugins.signing.SignatureSpec"/>
    <method name="getSignatureType" returnType="org.gradle.plugins.signing.type.SignatureType">
        <description>
     * The file representation type of the signature.
     *
     * @return The signature type. May be {@code null} if unknown at this time.
     </description>
    </method>
    <method name="getToSign" returnType="java.io.File">
        <description>
     * The file that is to be signed.
     *
     * @return The file. May be {@code null} if unknown at this time.
     </description>
    </method>
    <method name="getToSignArtifact" returnType="org.gradle.api.artifacts.PublishArtifact"/>
    <method name="getType" returnType="java.lang.String">
        <description>
     * The type of the signature artifact.
     *
     * &lt;p&gt;Defaults to the extension of the {@link #getToSign() file to sign} plus the extension of the {@link #getSignatureType() signature type}. For example, when signing the file ‘my.zip’ with a
     * signature type with extension ‘sig’, the default type is ‘zip.sig’.&lt;/p&gt;
     *
     * @return The type. May be {@code null} if the file to sign or signature type are unknown at this time.
     </description>
    </method>
    <method name="init" returnType="void">
        <parameter type="java.util.concurrent.Callable" name="toSign"/>
        <parameter type="java.util.concurrent.Callable" name="classifier"/>
        <parameter type="org.gradle.plugins.signing.SignatureSpec" name="signatureSpec"/>
    </method>
    <method name="setClassifier" returnType="void">
        <parameter type="java.lang.String" name="classifier"/>
    </method>
    <method name="setDate" returnType="void">
        <parameter type="java.util.Date" name="date"/>
    </method>
    <method name="setExtension" returnType="void">
        <parameter type="java.lang.String" name="extension"/>
    </method>
    <method name="setFile" returnType="void">
        <parameter type="java.io.File" name="file"/>
    </method>
    <method name="setName" returnType="void">
        <parameter type="java.lang.String" name="name"/>
    </method>
    <method name="setSignatureSpec" returnType="void">
        <parameter type="org.gradle.plugins.signing.SignatureSpec" name="signatureSpec"/>
    </method>
    <method name="setType" returnType="void">
        <parameter type="java.lang.String" name="type"/>
    </method>
    <method name="signatureTypeExtension" returnType="java.lang.String"/>
    <property name="classifier" type="java.lang.String">
        <description>
     * The classifier of the signature artifact.
     *
     * &lt;p&gt;Defaults to the classifier of the source artifact (if signing an artifact) or the given classifier at construction (if given).&lt;/p&gt;
     *
     * @return The classifier. May be {@code null} if unknown at this time.
     </description>
    </property>
    <property name="date" type="java.util.Date">
        <description>
     * The date of the signature artifact.
     *
     * &lt;p&gt;Defaults to the last modified time of the {@link #getFile() signature file} (if exists)&lt;/p&gt;
     *
     * @return The date of the signature. May be {@code null} if unknown at this time.
     </description>
    </property>
    <property name="extension" type="java.lang.String">
        <description>
     * The extension of the signature artifact.
     *
     * &lt;p&gt;Defaults to the specified file extension of the {@link #getSignatureType() signature type}.&lt;/p&gt;
     *
     * @return The extension. May be {@code null} if unknown at this time.
     </description>
    </property>
    <property name="file" type="java.io.File">
        <description>
     * The file for the generated signature, which may not yet exist.
     *
     * &lt;p&gt;Defaults to a file alongside the {@link #getToSign() file to sign} with the extension of the {@link #getSignatureType() signature type}.&lt;/p&gt;
     *
     * @return The signature file. May be {@code null} if unknown at this time.
     </description>
    </property>
    <property name="name" type="java.lang.String">
        <description>
     * The name of the signature artifact.
     *
     * &lt;p&gt;Defaults to the name of the signature {@link #getFile() file}.
     *
     * @return The name. May be {@code null} if unknown at this time.
     </description>
    </property>
    <property name="signatory" type="org.gradle.plugins.signing.signatory.Signatory">
        <description>
     * The signatory of this signature file.
     *
     * @return The signatory. May be {@code null} if unknown at this time.
     </description>
    </property>
    <property name="signatureSpec" type="org.gradle.plugins.signing.SignatureSpec"/>
    <property name="signatureType" type="org.gradle.plugins.signing.type.SignatureType">
        <description>
     * The file representation type of the signature.
     *
     * @return The signature type. May be {@code null} if unknown at this time.
     </description>
    </property>
    <property name="toSign" type="java.io.File">
        <description>
     * The file that is to be signed.
     *
     * @return The file. May be {@code null} if unknown at this time.
     </description>
    </property>
    <property name="toSignArtifact" type="org.gradle.api.artifacts.PublishArtifact"/>
    <property name="type" type="java.lang.String">
        <description>
     * The type of the signature artifact.
     *
     * &lt;p&gt;Defaults to the extension of the {@link #getToSign() file to sign} plus the extension of the {@link #getSignatureType() signature type}. For example, when signing the file ‘my.zip’ with a
     * signature type with extension ‘sig’, the default type is ‘zip.sig’.&lt;/p&gt;
     *
     * @return The type. May be {@code null} if the file to sign or signature type are unknown at this time.
     </description>
    </property>
</type>
