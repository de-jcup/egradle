<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.plugins.signing.signatory.Signatory" version="3.0">
    <description>
 * A signatory is an object capable of providing a signature for an arbitrary stream of bytes.
 </description>
    <method name="getName" returnType="java.lang.String">
        <description>
     * &lt;p&gt;An identifying name for this signatory.&lt;/p&gt;
     *
     * &lt;p&gt;The name must be constant for the life of the signatory and should uniquely identify it within a project.&lt;/p&gt;
     </description>
    </method>
    <method name="sign" returnType="byte">
        <description>
     * Exhausts {@code toSign}, and returns the raw signature bytes.
     *
     * @param toSign The source of the data to be signed
     * @return The raw bytes of the signature
     </description>
        <parameter type="java.io.InputStream" name="toSign"/>
    </method>
    <method name="sign" returnType="void">
        <description>
     * Exhausts {@code toSign}, and writes the signature to {@code signatureDestination}. The caller is responsible for closing the streams, though the output WILL be flushed.
     *
     * @param toSign The source of the data to be signed
     * @param destination Where the signature will be written to
     </description>
        <parameter type="java.io.InputStream" name="toSign"/>
        <parameter type="java.io.OutputStream" name="destination"/>
    </method>
    <property name="name" type="java.lang.String">
        <description>
     * &lt;p&gt;An identifying name for this signatory.&lt;/p&gt;
     *
     * &lt;p&gt;The name must be constant for the life of the signatory and should uniquely identify it within a project.&lt;/p&gt;
     </description>
    </property>
</type>
