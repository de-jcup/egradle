<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type language="gradle" name="org.gradle.plugins.ide.api.FileContentMerger" version="3.0" documented="true">
    <description>
 * Models the generation/parsing/merging capabilities.
 * &lt;p&gt;
 * For examples see docs for {@link org.gradle.plugins.ide.eclipse.model.EclipseProject}
 * or {@link org.gradle.plugins.ide.idea.model.IdeaProject} and others.
 </description>
    <method name="beforeMerged" returnType="void" delegationTarget="org.gradle.listener.ActionBroadcast" documented="true">
        <description>
     * Adds a closure to be called after content is loaded from existing file but before gradle build information is merged.
     * &lt;p&gt;
     * This is advanced api that gives access to internal implementation.
     * It might be useful if you want to alter the way gradle build information is merged into existing file content.
     * &lt;p&gt;
     * For examples see docs for {@link org.gradle.plugins.ide.eclipse.model.EclipseProject}
     * or {@link org.gradle.plugins.ide.idea.model.IdeaProject} and others.
     *
     * @param closure The closure to execute.
     </description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="beforeMerged" returnType="void" documented="true">
        <description>
     * Adds an action to be called after content is loaded from existing file but before gradle build information is merged.
     * &lt;p&gt;
     * This is advanced api that gives access to internal implementation.
     * It might be useful if you want to alter the way gradle build information is merged into existing file content.
     * &lt;p&gt;
     * For examples see docs for {@link org.gradle.plugins.ide.eclipse.model.EclipseProject}
     * or {@link org.gradle.plugins.ide.idea.model.IdeaProject} and others.
     *
     * @param action The action to execute.
     </description>
        <parameter type="org.gradle.api.Action" name="action"/>
    </method>
    <method name="getBeforeMerged" returnType="org.gradle.listener.ActionBroadcast"/>
    <method name="getWhenMerged" returnType="org.gradle.listener.ActionBroadcast"/>
    <method name="setBeforeMerged" returnType="void">
        <parameter type="org.gradle.listener.ActionBroadcast" name="beforeMerged"/>
    </method>
    <method name="setWhenMerged" returnType="void">
        <parameter type="org.gradle.listener.ActionBroadcast" name="whenMerged"/>
    </method>
    <method name="whenMerged" returnType="void" delegationTarget="org.gradle.listener.ActionBroadcast" documented="true">
        <description>
     * Adds a closure to be called after content is loaded from existing file and after gradle build information is merged.
     * &lt;p&gt;
     * This is advanced api that gives access to internal implementation of idea plugin.
     * Use it only to tackle some tricky edge cases.
     * &lt;p&gt;
     * For examples see docs for {@link org.gradle.plugins.ide.eclipse.model.EclipseProject}
     * or {@link org.gradle.plugins.ide.idea.model.IdeaProject} and others.
     *
     * @param closure The closure to execute.
     </description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="whenMerged" returnType="void" documented="true">
        <description>
     * Adds an action to be called after content is loaded from existing file and after gradle build information is merged.
     * &lt;p&gt;
     * This is advanced api that gives access to internal implementation of idea plugin.
     * Use it only to tackle some tricky edge cases.
     * &lt;p&gt;
     * For examples see docs for {@link org.gradle.plugins.ide.eclipse.model.EclipseProject}
     * or {@link org.gradle.plugins.ide.idea.model.IdeaProject} and others.
     *
     * @param action The action to execute.
     </description>
        <parameter type="org.gradle.api.Action" name="action"/>
    </method>
    <property name="beforeMerged" type="org.gradle.listener.ActionBroadcast"/>
    <property name="whenMerged" type="org.gradle.listener.ActionBroadcast"/>
</type>
