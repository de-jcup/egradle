<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type language="gradle" name="org.gradle.plugins.ide.idea.model.Module" version="3.0">
    <description>
 * Represents the customizable elements of an iml (via XML hooks everything of the iml is customizable).
 </description>
    <method name="addDependenciesToXml" returnType="void"/>
    <method name="addJdkToXml" returnType="void"/>
    <method name="addOutputDirsToXml" returnType="void"/>
    <method name="addSourceAndExcludeFolderToXml" returnType="void"/>
    <method name="configure" returnType="java.lang.Object">
        <parameter type="org.gradle.plugins.ide.idea.model.Path" name="contentPath"/>
        <parameter type="java.util.Set" name="sourceFolders"/>
        <parameter type="java.util.Set" name="testSourceFolders"/>
        <parameter type="java.util.Set" name="generatedSourceFolders"/>
        <parameter type="java.util.Set" name="excludeFolders"/>
        <parameter type="java.lang.Boolean" name="inheritOutputDirs"/>
        <parameter type="org.gradle.plugins.ide.idea.model.Path" name="outputDir"/>
        <parameter type="org.gradle.plugins.ide.idea.model.Path" name="testOutputDir"/>
        <parameter type="java.util.Set" name="dependencies"/>
        <parameter type="java.lang.String" name="jdkName"/>
        <parameter type="java.lang.String" name="languageLevel"/>
    </method>
    <method name="equals" returnType="boolean">
        <parameter type="java.lang.Object" name="o"/>
    </method>
    <method name="findExcludeFolder" returnType="java.util.List"/>
    <method name="findOrCreateContentNode" returnType="groovy.util.Node"/>
    <method name="findOrCreateOutputDir" returnType="groovy.util.Node"/>
    <method name="findOrCreateTestOutputDir" returnType="groovy.util.Node"/>
    <method name="findOrderEntries" returnType="java.util.List"/>
    <method name="findOutputDir" returnType="groovy.util.Node"/>
    <method name="findSourceFolder" returnType="java.util.List"/>
    <method name="findTestOutputDir" returnType="groovy.util.Node"/>
    <method name="getContentPath" returnType="org.gradle.plugins.ide.idea.model.Path">
        <description>
     * The directory for the content root of the module.
     * Defaults to the project directory.
     * If null, the directory containing the output file will be used.
     </description>
    </method>
    <method name="getDefaultResourceName" returnType="java.lang.String"/>
    <method name="getDependencies" returnType="java.util.Set">
        <description>
     * The dependencies of this module.
     * Must not be null.
     </description>
    </method>
    <method name="getExcludeFolders" returnType="java.util.Set">
        <description>
     * The directories to be excluded.
     * Must not be null.
     </description>
    </method>
    <method name="getGeneratedSourceFolders" returnType="java.util.Set">
        <description>
     * The directories containing generated the production sources.
     * Must not be null.
     </description>
    </method>
    <method name="getJdkName" returnType="java.lang.String"/>
    <method name="getNewModuleRootManager" returnType="groovy.util.Node"/>
    <method name="getOutputDir" returnType="org.gradle.plugins.ide.idea.model.Path">
        <description>
     * The output directory for production classes.
     * If {@code null}, no entry will be created.
     </description>
    </method>
    <method name="getSourceFolders" returnType="java.util.Set">
        <description>
     * The directories containing the production sources.
     * Must not be null.
     </description>
    </method>
    <method name="getTestOutputDir" returnType="org.gradle.plugins.ide.idea.model.Path">
        <description>
     * The output directory for test classes.
     * If {@code null}, no entry will be created.
     </description>
    </method>
    <method name="getTestSourceFolders" returnType="java.util.Set">
        <description>
     * The directories containing the test sources.
     * Must not be null.
     </description>
    </method>
    <method name="hashCode" returnType="int"/>
    <method name="isDependencyOrderEntry" returnType="boolean">
        <parameter type="java.lang.Object" name="orderEntry"/>
    </method>
    <method name="isInheritOutputDirs" returnType="boolean">
        <description>
     * If true, output directories for this module will be located below the output directory for the project;
     * otherwise, {@link #outputDir} and {@link #testOutputDir} will take effect.
     </description>
    </method>
    <method name="load" returnType="void">
        <parameter type="groovy.util.Node" name="xml"/>
    </method>
    <method name="readDependenciesFromXml" returnType="void"/>
    <method name="readDependenciesPathsFromXml" returnType="void">
        <parameter type="java.util.Set" name="paths"/>
        <parameter type="groovy.util.Node" name="node"/>
    </method>
    <method name="readInheritOutputDirsFromXml" returnType="boolean"/>
    <method name="readJdkFromXml" returnType="void"/>
    <method name="readOutputDirsFromXml" returnType="org.gradle.plugins.ide.idea.model.Path"/>
    <method name="readSourceAndExcludeFolderFromXml" returnType="void"/>
    <method name="removeDependenciesFromXml" returnType="void"/>
    <method name="removeSourceAndExcludeFolderFromXml" returnType="void"/>
    <method name="setContentPath" returnType="void">
        <parameter type="org.gradle.plugins.ide.idea.model.Path" name="contentPath"/>
    </method>
    <method name="setContentURL" returnType="void"/>
    <method name="setDependencies" returnType="void">
        <parameter type="java.util.Set" name="dependencies"/>
    </method>
    <method name="setExcludeFolders" returnType="void">
        <parameter type="java.util.Set" name="excludeFolders"/>
    </method>
    <method name="setGeneratedSourceFolders" returnType="void">
        <parameter type="java.util.Set" name="generatedSourceFolders"/>
    </method>
    <method name="setInheritOutputDirs" returnType="void">
        <parameter type="boolean" name="inheritOutputDirs"/>
    </method>
    <method name="setJdkName" returnType="void">
        <parameter type="java.lang.String" name="jdkName"/>
    </method>
    <method name="setOutputDir" returnType="void">
        <parameter type="org.gradle.plugins.ide.idea.model.Path" name="outputDir"/>
    </method>
    <method name="setSourceFolders" returnType="void">
        <parameter type="java.util.Set" name="sourceFolders"/>
    </method>
    <method name="setTestOutputDir" returnType="void">
        <parameter type="org.gradle.plugins.ide.idea.model.Path" name="testOutputDir"/>
    </method>
    <method name="setTestSourceFolders" returnType="void">
        <parameter type="java.util.Set" name="testSourceFolders"/>
    </method>
    <method name="store" returnType="void">
        <parameter type="groovy.util.Node" name="xml"/>
    </method>
    <method name="toString" returnType="java.lang.String"/>
    <method name="writeInheritOutputDirsToXml" returnType="void"/>
    <method name="writeSourceLanguageLevel" returnType="void"/>
    <property name="contentPath" type="org.gradle.plugins.ide.idea.model.Path">
        <description>
     * The directory for the content root of the module.
     * Defaults to the project directory.
     * If null, the directory containing the output file will be used.
     </description>
    </property>
    <property name="defaultResourceName" type="java.lang.String"/>
    <property name="dependencies" type="java.util.Set">
        <description>
     * The dependencies of this module.
     * Must not be null.
     </description>
    </property>
    <property name="dependencyOrderEntry" type="boolean"/>
    <property name="excludeFolders" type="java.util.Set">
        <description>
     * The directories to be excluded.
     * Must not be null.
     </description>
    </property>
    <property name="generatedSourceFolders" type="java.util.Set">
        <description>
     * The directories containing generated the production sources.
     * Must not be null.
     </description>
    </property>
    <property name="inheritOutputDirs" type="boolean">
        <description>
     * If true, output directories for this module will be located below the output directory for the project;
     * otherwise, {@link #outputDir} and {@link #testOutputDir} will take effect.
     </description>
    </property>
    <property name="jdkName" type="java.lang.String"/>
    <property name="newModuleRootManager" type="groovy.util.Node"/>
    <property name="outputDir" type="org.gradle.plugins.ide.idea.model.Path">
        <description>
     * The output directory for production classes.
     * If {@code null}, no entry will be created.
     </description>
    </property>
    <property name="sourceFolders" type="java.util.Set">
        <description>
     * The directories containing the production sources.
     * Must not be null.
     </description>
    </property>
    <property name="testOutputDir" type="org.gradle.plugins.ide.idea.model.Path">
        <description>
     * The output directory for test classes.
     * If {@code null}, no entry will be created.
     </description>
    </property>
    <property name="testSourceFolders" type="java.util.Set">
        <description>
     * The directories containing the test sources.
     * Must not be null.
     </description>
    </property>
</type>
