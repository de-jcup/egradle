<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type language="gradle" name="org.gradle.plugins.signing.SigningExtension" version="3.0" documented="true">
    <description>
 * The global signing configuration for a project.
 </description>
    <method name="addSignatureSpecConventions" returnType="void">
        <description>
     * Adds conventions to the given spec, using this settings object's default signatory and signature type as the default signatory and signature type for the spec.
     </description>
        <parameter type="org.gradle.plugins.signing.SignatureSpec" name="spec"/>
    </method>
    <method name="addSignaturesToConfiguration" returnType="java.lang.Object">
        <parameter type="org.gradle.plugins.signing.Sign" name="task"/>
        <parameter type="org.gradle.api.artifacts.Configuration" name="configuration"/>
    </method>
    <method name="call" returnType="org.gradle.plugins.signing.signatory.Signatory"/>
    <method name="createSignTaskFor" returnType="org.gradle.plugins.signing.Sign">
        <parameter type="java.lang.CharSequence" name="name"/>
        <parameter type="org.gradle.api.Action" name="taskConfiguration"/>
    </method>
    <method name="createSignatoryProvider" returnType="org.gradle.plugins.signing.signatory.SignatoryProvider">
        <description>
     * Provides the signatory provider. Called once during construction.
     </description>
    </method>
    <method name="createSignatureTypeProvider" returnType="org.gradle.plugins.signing.type.SignatureTypeProvider">
        <description>
     * Provides the signature type provider. Called once during construction.
     </description>
    </method>
    <method name="doSignOperation" returnType="org.gradle.plugins.signing.SignOperation">
        <parameter type="groovy.lang.Closure" name="setup"/>
    </method>
    <method name="doSignOperation" returnType="org.gradle.plugins.signing.SignOperation">
        <parameter type="org.gradle.api.Action" name="setup"/>
    </method>
    <method name="execute" returnType="void">
        <parameter type="org.gradle.plugins.signing.Sign" name="task"/>
    </method>
    <method name="execute" returnType="void">
        <parameter type="org.gradle.plugins.signing.SignOperation" name="operation"/>
    </method>
    <method name="execute" returnType="void">
        <parameter type="org.gradle.plugins.signing.Signature" name="sig"/>
    </method>
    <method name="force" returnType="java.lang.Object">
        <parameter type="java.lang.Object" name="maybeCallable"/>
    </method>
    <method name="getConfiguration" returnType="org.gradle.api.artifacts.Configuration">
        <description>
     * The configuration that signature artifacts are added to.
     </description>
    </method>
    <method name="getDefaultConfiguration" returnType="org.gradle.api.artifacts.Configuration">
        <description>
     * Provides the configuration that signature artifacts are added to. Called once during construction.
     </description>
    </method>
    <method name="getProject" returnType="org.gradle.api.Project"/>
    <method name="getSignatories" returnType="org.gradle.plugins.signing.signatory.SignatoryProvider"/>
    <method name="getSignatory" returnType="org.gradle.plugins.signing.signatory.Signatory">
        <description>
     * The signatory that will be used for signing when an explicit signatory has not been specified.
     *
     * &lt;p&gt;Delegates to the signatory provider's default signatory.&lt;/p&gt;
     </description>
    </method>
    <method name="getSignatureType" returnType="org.gradle.plugins.signing.type.SignatureType">
        <description>
     * The signature type that will be used for signing files when an explicit signature type has not been specified.
     *
     * &lt;p&gt;Delegates to the signature type provider's default type.&lt;/p&gt;
     </description>
    </method>
    <method name="getSignatureTypes" returnType="org.gradle.plugins.signing.type.SignatureTypeProvider"/>
    <method name="instantiator" returnType="org.gradle.internal.reflect.Instantiator"/>
    <method name="isRequired" returnType="boolean">
        <description>
     * Whether or not this task should fail if no signatory or signature type are configured at generation time.
     *
     * &lt;p&gt;Defaults to {@code true}.&lt;/p&gt;
     *
     * @see #setRequired(Object)
     </description>
    </method>
    <method name="setConfiguration" returnType="void">
        <parameter type="org.gradle.api.artifacts.Configuration" name="configuration"/>
    </method>
    <method name="setRequired" returnType="void">
        <description>
     * Whether or not this task should fail if no signatory or signature type are configured at generation time.
     *
     * If {@code required} is a {@link Callable}, it will be stored and "called" on demand (i.e. when {@link #isRequired()} is called) and the return value will be interpreting according to the Groovy
     * Truth. For example:
     *
     * &lt;pre&gt;
     * signing {
     *   required = { gradle.taskGraph.hasTask("uploadArchives") }
     * }
     * &lt;/pre&gt;
     *
     * Because the task graph is not known until Gradle starts executing, we must use defer the decision. We can do this via using a {@link Closure} (which is a {@link Callable}).
     *
     * For any other type, the value will be stored and evaluated on demand according to the Groovy Truth.
     *
     * &lt;pre&gt;
     * signing {
     *   required = false
     * }
     * &lt;/pre&gt;
     </description>
        <parameter type="java.lang.Object" name="required"/>
    </method>
    <method name="setSignatories" returnType="void">
        <parameter type="org.gradle.plugins.signing.signatory.SignatoryProvider" name="signatories"/>
    </method>
    <method name="setSignatureTypes" returnType="void">
        <parameter type="org.gradle.plugins.signing.type.SignatureTypeProvider" name="signatureTypes"/>
    </method>
    <method name="sign" returnType="org.gradle.plugins.signing.SignOperation" documented="true">
        <description>
     * Creates a new {@link SignOperation sign operation} using the given closure to configure it before executing it.
     *
     * &lt;p&gt;The project's default signatory and default signature type from the {@link SigningExtension signing settings} will be used to generate the signature. The returned {@link SignOperation sign
     * operation} gives access to the created signature files. &lt;p&gt; If there is no configured default signatory available (and one is not explicitly specified in this operation's configuration), the
     * sign operation will fail.
     *
     * @param closure The configuration of the {@link SignOperation sign operation}.
     * @return The executed {@link SignOperation sign operation}.
     </description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="sign" returnType="org.gradle.plugins.signing.SignOperation" documented="true">
        <description>
     * Digitally signs the files, generating signature files alongside them.
     *
     * &lt;p&gt;The project's default signatory and default signature type from the {@link SigningExtension signing settings} will be used to generate the signature. The returned {@link SignOperation sign
     * operation} gives access to the created signature files. &lt;p&gt; If there is no configured default signatory available, the sign operation will fail.
     *
     * @param files The files to sign.
     * @return The executed {@link SignOperation sign operation}.
     </description>
        <parameter type="java.io.File" name="files"/>
    </method>
    <method name="sign" returnType="java.util.List" documented="true">
        <description>
     * Creates signing tasks that depend on and sign the "archive" produced by the given tasks.
     *
     * &lt;p&gt;The created tasks will be named "sign&lt;i&gt;&amp;lt;input task name capitalized&amp;gt;&lt;/i&gt;". That is, given a task with the name "jar" the created task will be named "signJar". &lt;p&gt; If the task is not
     * an {@link org.gradle.api.tasks.bundling.AbstractArchiveTask}, an {@link InvalidUserDataException} will be thrown.&lt;/p&gt; &lt;p&gt; The signature artifact for the created task is added to the {@link
     * #getConfiguration() for this settings object}.
     *
     * @param tasks The tasks whose archives are to be signed
     * @return the created tasks.
     </description>
        <parameter type="org.gradle.api.Task" name="tasks"/>
    </method>
    <method name="sign" returnType="java.util.List" documented="true">
        <description>
     * Creates signing tasks that sign {@link Configuration#getAllArtifacts() all of the artifacts} of the given configurations.
     *
     * &lt;p&gt;The created tasks will be named "sign&lt;i&gt;&amp;lt;configuration name capitalized&amp;gt;&lt;/i&gt;". That is, given a configuration with the name "archives" the created task will be named "signArchives".
     *
     * The signature artifact for the created task is added to the {@link #getConfiguration() for this settings object}.
     *
     * @param configurations The configurations whose archives are to be signed
     * @return the created tasks.
     </description>
        <parameter type="org.gradle.api.artifacts.Configuration" name="configurations"/>
    </method>
    <method name="sign" returnType="org.gradle.plugins.signing.SignOperation" documented="true">
        <description>
     * Digitally signs the publish artifacts, generating signature files alongside them.
     *
     * &lt;p&gt;The project's default signatory and default signature type from the {@link SigningExtension signing settings} will be used to generate the signature. The returned {@link SignOperation sign
     * operation} gives access to the created signature files. &lt;p&gt; If there is no configured default signatory available, the sign operation will fail.
     *
     * @param publishArtifacts The publish artifacts to sign
     * @return The executed {@link SignOperation sign operation}
     </description>
        <parameter type="org.gradle.api.artifacts.PublishArtifact" name="publishArtifacts"/>
    </method>
    <method name="sign" returnType="org.gradle.plugins.signing.SignOperation" documented="true">
        <description>
     * Digitally signs the files, generating signature files alongside them.
     *
     * &lt;p&gt;The project's default signatory and default signature type from the {@link SigningExtension signing settings} will be used to generate the signature. The returned {@link SignOperation sign
     * operation} gives access to the created signature files. &lt;p&gt; If there is no configured default signatory available, the sign operation will fail.
     *
     * @param classifier The classifier to assign to the created signature artifacts.
     * @param files The publish artifacts to sign.
     * @return The executed {@link SignOperation sign operation}.
     </description>
        <parameter type="java.lang.String" name="classifier"/>
        <parameter type="java.io.File" name="files"/>
    </method>
    <method name="signPom" returnType="org.gradle.plugins.signing.Signature" documented="true">
        <description>
     * Signs the POM artifact for the given Maven deployment.
     *
     * &lt;p&gt;You can use this method to sign the generated POM when publishing to a Maven repository with the Maven plugin. &lt;/p&gt; &lt;pre autoTested=''&gt; uploadArchives { repositories { mavenDeployer {
     * beforeDeployment { MavenDeployment deployment -&gt; signing.signPom(deployment) } } } } &lt;/pre&gt; &lt;p&gt;You can optionally provide a configuration closure to fine tune the {@link SignOperation sign
     * operation} for the POM.&lt;/p&gt; &lt;p&gt; If {@link #isRequired()} is false and the signature cannot be generated (e.g. no configured signatory), this method will silently do nothing. That is, a
     * signature for the POM file will not be uploaded.
     *
     * @param mavenDeployment The deployment to sign the POM of
     * @return the generated signature artifact
     </description>
        <parameter type="org.gradle.api.artifacts.maven.MavenDeployment" name="mavenDeployment"/>
    </method>
    <method name="signPom" returnType="org.gradle.plugins.signing.Signature" documented="true">
        <description>
     * Signs the POM artifact for the given Maven deployment.
     *
     * &lt;p&gt;You can use this method to sign the generated POM when publishing to a Maven repository with the Maven plugin. &lt;/p&gt; &lt;pre autoTested=''&gt; uploadArchives { repositories { mavenDeployer {
     * beforeDeployment { MavenDeployment deployment -&gt; signing.signPom(deployment) } } } } &lt;/pre&gt; &lt;p&gt;You can optionally provide a configuration closure to fine tune the {@link SignOperation sign
     * operation} for the POM.&lt;/p&gt; &lt;p&gt; If {@link #isRequired()} is false and the signature cannot be generated (e.g. no configured signatory), this method will silently do nothing. That is, a
     * signature for the POM file will not be uploaded.
     *
     * @param mavenDeployment The deployment to sign the POM of
     * @param closure the configuration of the underlying {@link SignOperation sign operation} for the POM (optional)
     * @return the generated signature artifact
     </description>
        <parameter type="org.gradle.api.artifacts.maven.MavenDeployment" name="mavenDeployment"/>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="signatories" returnType="org.gradle.plugins.signing.signatory.SignatoryProvider" delegationTarget="org.gradle.plugins.signing.signatory.SignatoryProvider">
        <description>
     * Configures the signatory provider (delegating to its {@link SignatoryProvider#configure(SigningExtension, Closure) configure method}).
     *
     * @param closure the signatory provider configuration DSL
     * @return the configured signatory provider
     </description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <property name="configuration" type="org.gradle.api.artifacts.Configuration">
        <description>
     * The configuration that signature artifacts are added to.
     </description>
    </property>
    <property name="defaultConfiguration" type="org.gradle.api.artifacts.Configuration">
        <description>
     * Provides the configuration that signature artifacts are added to. Called once during construction.
     </description>
    </property>
    <property name="project" type="org.gradle.api.Project"/>
    <property name="required" type="boolean" documented="true">
        <description>
     * Whether or not this task should fail if no signatory or signature type are configured at generation time.
     *
     * &lt;p&gt;Defaults to {@code true}.&lt;/p&gt;
     *
     * @see #setRequired(Object)
     </description>
    </property>
    <property name="signatories" type="org.gradle.plugins.signing.signatory.SignatoryProvider"/>
    <property name="signatory" type="org.gradle.plugins.signing.signatory.Signatory" documented="true">
        <description>
     * The signatory that will be used for signing when an explicit signatory has not been specified.
     *
     * &lt;p&gt;Delegates to the signatory provider's default signatory.&lt;/p&gt;
     </description>
    </property>
    <property name="signatureType" type="org.gradle.plugins.signing.type.SignatureType" documented="true">
        <description>
     * The signature type that will be used for signing files when an explicit signature type has not been specified.
     *
     * &lt;p&gt;Delegates to the signature type provider's default type.&lt;/p&gt;
     </description>
    </property>
    <property name="signatureTypes" type="org.gradle.plugins.signing.type.SignatureTypeProvider"/>
</type>
