<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="false" language="gradle" name="org.gradle.plugins.signing.Sign" version="3.0" superType="org.gradle.api.DefaultTask">
    <description> 
 A task for creating digital signature files for one or more; tasks, files, publishable artifacts or configurations. 
 
 &lt;p&gt;The task produces &lt;a href='type://Signature'&gt;Signature&lt;/a&gt;&lt;/p&gt; objects that are publishable artifacts and can be assigned to another configuration. &lt;p&gt; The signature objects are created with defaults and using this 
 tasks signatory and signature type. 
</description>
    <method name="addSignature" returnType="boolean">
        <parameter type="org.gradle.plugins.signing.Signature" name="signature"/>
    </method>
    <method name="addSignatures" returnType="void">
        <parameter type="java.lang.String" name="classifier"/>
        <parameter type="java.io.File" name="files"/>
    </method>
    <method name="apply" returnType="boolean">
        <parameter type="org.gradle.plugins.signing.Signature" name="input"/>
    </method>
    <method name="call" returnType="java.lang.String"/>
    <method name="execute" returnType="void">
        <parameter type="org.gradle.api.artifacts.PublishArtifact" name="artifact"/>
    </method>
    <method name="generate" returnType="void">
        <description> 
 Generates the signature files. 
</description>
    </method>
    <method name="getFileCollectionFactory" returnType="org.gradle.api.internal.file.FileCollectionFactory"/>
    <method name="getFilesToSign" returnType="org.gradle.api.file.FileCollection">
        <description> 
 All of the files that will be signed by this task. 
</description>
    </method>
    <method name="getInputFiles" returnType="java.lang.Iterable"/>
    <method name="getOutputFiles" returnType="java.util.Map"/>
    <method name="getSignatory" returnType="org.gradle.plugins.signing.signatory.Signatory">
        <description> 
 Returns the signatory for this signing task. 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;the signatory 
</description>
    </method>
    <method name="getSignatureFiles" returnType="org.gradle.api.file.FileCollection">
        <description> 
 All of the signature files that will be generated by this operation. 
</description>
    </method>
    <method name="getSignatureType" returnType="org.gradle.plugins.signing.type.SignatureType"/>
    <method name="getSignatures" returnType="org.gradle.api.DomainObjectSet">
        <description> 
 The signatures generated by this task. 
</description>
    </method>
    <method name="getSingleSignature" returnType="org.gradle.plugins.signing.Signature">
        <description> 
 Returns the single signature generated by this task. 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The signature. 
 @throws IllegalStateException if there is not exactly one signature. 
</description>
    </method>
    <method name="isRequired" returnType="boolean" delegationTarget="true">
        <description> 
 Whether or not this task should fail if no signatory or signature type are configured at generation time. 
 
 &lt;p&gt;Defaults to &lt;a href='type://true'&gt;true&lt;/a&gt;.&lt;/p&gt; 
</description>
    </method>
    <method name="isSatisfiedBy" returnType="boolean">
        <parameter type="org.gradle.api.Task" name="element"/>
    </method>
    <method name="required" returnType="void">
        <description> 
 Change whether or not this task should fail if no signatory or signature type are configured at the time of generation. 
</description>
        <parameter type="boolean" name="required"/>
    </method>
    <method name="setRequired" returnType="void">
        <parameter type="boolean" name="required"/>
    </method>
    <method name="setSignatory" returnType="void">
        <parameter type="org.gradle.plugins.signing.signatory.Signatory" name="signatory"/>
    </method>
    <method name="setSignatureType" returnType="void">
        <parameter type="org.gradle.plugins.signing.type.SignatureType" name="signatureType"/>
    </method>
    <method name="sign" returnType="void">
        <description> 
 Configures the task to sign each of the given files 
</description>
        <parameter type="java.io.File" name="files"/>
    </method>
    <method name="sign" returnType="void">
        <description> 
 Configures the task to sign the archive produced for each of the given tasks (which must be archive tasks). 
</description>
        <parameter type="org.gradle.api.Task" name="tasks"/>
    </method>
    <method name="sign" returnType="void">
        <description> 
 Configures the task to sign every artifact of the given configurations 
</description>
        <parameter type="org.gradle.api.artifacts.Configuration" name="configurations"/>
    </method>
    <method name="sign" returnType="void">
        <description> 
 Configures the task to sign each of the given artifacts 
</description>
        <parameter type="org.gradle.api.artifacts.PublishArtifact" name="publishArtifacts"/>
    </method>
    <method name="sign" returnType="void">
        <description> 
 Configures the task to sign each of the given artifacts, using the given classifier as the classifier for the resultant signature publish artifact. 
</description>
        <parameter type="java.lang.String" name="classifier"/>
        <parameter type="java.io.File" name="files"/>
    </method>
    <method name="signArtifact" returnType="void">
        <parameter type="org.gradle.api.artifacts.PublishArtifact" name="publishArtifact"/>
    </method>
    <method name="signTask" returnType="void">
        <parameter type="org.gradle.api.tasks.bundling.AbstractArchiveTask" name="archiveTask"/>
    </method>
    <method name="signatory" returnType="void">
        <description> 
 Changes the signatory of the signatures. 
</description>
        <parameter type="org.gradle.plugins.signing.signatory.Signatory" name="signatory"/>
    </method>
    <method name="signatureType" returnType="void">
        <description> 
 Changes the signature file representation for the signatures. 
</description>
        <parameter type="org.gradle.plugins.signing.type.SignatureType" name="type"/>
    </method>
    <interface name="org.gradle.plugins.signing.SignatureSpec"/>
    <property name="fileCollectionFactory" type="org.gradle.api.internal.file.FileCollectionFactory"/>
    <property name="filesToSign" type="org.gradle.api.file.FileCollection">
        <description> 
 All of the files that will be signed by this task. 
</description>
    </property>
    <property name="inputFiles" type="java.lang.Iterable"/>
    <property name="outputFiles" type="java.util.Map"/>
    <property name="required" type="boolean">
        <description> 
 Whether or not this task should fail if no signatory or signature type are configured at generation time. 
 
 &lt;p&gt;Defaults to &lt;a href='type://true'&gt;true&lt;/a&gt;.&lt;/p&gt; 
</description>
    </property>
    <property name="satisfiedBy" type="boolean"/>
    <property name="signatory" type="org.gradle.plugins.signing.signatory.Signatory">
        <description> 
 Returns the signatory for this signing task. 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;the signatory 
</description>
    </property>
    <property name="signatureFiles" type="org.gradle.api.file.FileCollection">
        <description> 
 All of the signature files that will be generated by this operation. 
</description>
    </property>
    <property name="signatureType" type="org.gradle.plugins.signing.type.SignatureType"/>
    <property name="signatures" type="org.gradle.api.DomainObjectSet">
        <description> 
 The signatures generated by this task. 
</description>
    </property>
    <property name="singleSignature" type="org.gradle.plugins.signing.Signature">
        <description> 
 Returns the single signature generated by this task. 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The signature. 
 @throws IllegalStateException if there is not exactly one signature. 
</description>
    </property>
    <documentation>
        <property name="signatory"/>
        <method name="signatory"/>
        <method name="sign"/>
    </documentation>
</type>
