<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type language="gradle" name="org.gradle.plugins.ide.eclipse.model.EclipseWtpFacet" version="3.0" documented="true">
    <description>
 * Enables fine-tuning wtp facet details of the Eclipse plugin
 * &lt;p&gt;
 * Advanced configuration closures beforeMerged and whenMerged receive {@link WtpFacet} object as parameter.
 *
 * &lt;pre autoTested=''&gt;
 * apply plugin: 'war' //or 'ear' or 'java'
 * apply plugin: 'eclipse-wtp'
 *
 * eclipse {
 *   wtp {
 *     facet {
 *       //you can add some extra wtp facets; mandatory keys: 'name', 'version':
 *       facet name: 'someCoolFacet', version: '1.3'
 *
 *       file {
 *         //if you want to mess with the resulting XML in whatever way you fancy
 *         withXml {
 *           def node = it.asNode()
 *           node.appendNode('xml', 'is what I love')
 *         }
 *
 *         //beforeMerged and whenMerged closures are the highest voodoo for the tricky edge cases.
 *         //the type passed to the closures is {@link WtpFacet}
 *
 *         //closure executed after wtp facet file content is loaded from existing file
 *         //but before gradle build information is merged
 *         beforeMerged { wtpFacet -&gt;
 *           //tinker with {@link WtpFacet} here
 *         }
 *
 *         //closure executed after wtp facet file content is loaded from existing file
 *         //and after gradle build information is merged
 *         whenMerged { wtpFacet -&gt;
 *           //you can tinker with the {@link WtpFacet} here
 *         }
 *       }
 *     }
 *   }
 * }
 *
 * &lt;/pre&gt;
 </description>
    <method name="facet" returnType="void" documented="true">
        <description>
     * Adds a facet.
     * &lt;p&gt;
     * For examples see docs for {@link EclipseWtpFacet}
     *
     * @param args A map that must contain a 'name' and 'version' key with corresponding values.
     </description>
        <parameter type="java.util.Map" name="args"/>
    </method>
    <method name="file" returnType="void" delegationTarget="org.gradle.plugins.ide.api.XmlFileContentMerger" documented="true">
        <description>
     * Enables advanced configuration like tinkering with the output XML
     * or affecting the way existing wtp facet file content is merged with gradle build information
     * &lt;p&gt;
     * The object passed to whenMerged{} and beforeMerged{} closures is of type {@link WtpFacet}
     * &lt;p&gt;
     *
     * For example see docs for {@link EclipseWtpFacet}
     </description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="getFacets" returnType="java.util.List">
        <description>
     * The facets to be added as elements.
     * &lt;p&gt;
     * For examples see docs for {@link EclipseWtpFacet}
     </description>
    </method>
    <method name="getFile" returnType="org.gradle.plugins.ide.api.XmlFileContentMerger">
        <description>
     * See {@link #file(Closure) }
     </description>
    </method>
    <method name="mergeXmlFacet" returnType="void">
        <parameter type="org.gradle.plugins.ide.eclipse.model.WtpFacet" name="xmlFacet"/>
    </method>
    <method name="setFacets" returnType="void">
        <parameter type="java.util.List" name="facets"/>
    </method>
    <property name="facets" type="java.util.List" documented="true">
        <description>
     * The facets to be added as elements.
     * &lt;p&gt;
     * For examples see docs for {@link EclipseWtpFacet}
     </description>
    </property>
    <property name="file" type="org.gradle.plugins.ide.api.XmlFileContentMerger" documented="true">
        <description>
     * See {@link #file(Closure) }
     </description>
    </property>
</type>
