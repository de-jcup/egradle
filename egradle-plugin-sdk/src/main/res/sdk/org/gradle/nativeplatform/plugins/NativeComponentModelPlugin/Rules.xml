<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="false" language="gradle" name="org.gradle.nativeplatform.plugins.NativeComponentModelPlugin.Rules" version="3.0" superType="org.gradle.model.RuleSource">
    <method name="applyHeaderSourceSetConventions" returnType="void">
        <parameter type="org.gradle.language.nativeplatform.HeaderExportingSourceSet" name="headerSourceSet"/>
    </method>
    <method name="buildTypes" returnType="org.gradle.nativeplatform.BuildTypeContainer">
        <parameter type="org.gradle.api.plugins.ExtensionContainer" name="extensionContainer"/>
    </method>
    <method name="configureGeneratedSourceSets" returnType="void">
        <parameter type="org.gradle.language.base.internal.LanguageSourceSetInternal" name="languageSourceSet"/>
    </method>
    <method name="configurePreCompiledHeaderCompileTasks" returnType="void">
        <parameter type="org.gradle.api.tasks.TaskContainer" name="tasks"/>
        <parameter type="org.gradle.platform.base.BinaryContainer" name="binaries"/>
        <parameter type="org.gradle.language.base.internal.registry.LanguageTransformContainer" name="languageTransforms"/>
        <parameter type="org.gradle.internal.service.ServiceRegistry" name="serviceRegistry"/>
    </method>
    <method name="configurePrefixHeaderFiles" returnType="void">
        <parameter type="org.gradle.platform.base.SourceComponentSpec" name="componentSpec"/>
        <parameter type="java.io.File" name="buildDir"/>
    </method>
    <method name="configurePrefixHeaderGenerationTasks" returnType="void">
        <parameter type="org.gradle.api.tasks.TaskContainer" name="tasks"/>
        <parameter type="org.gradle.platform.base.ComponentSpecContainer" name="components"/>
    </method>
    <method name="create" returnType="org.gradle.nativeplatform.platform.NativePlatform">
        <parameter type="java.lang.String" name="name"/>
    </method>
    <method name="createBinaries" returnType="void">
        <parameter type="TargetedNativeComponentInternal" name="nativeComponent"/>
        <parameter type="org.gradle.platform.base.internal.PlatformResolvers" name="platforms"/>
        <parameter type="org.gradle.nativeplatform.BuildTypeContainer" name="buildTypes"/>
        <parameter type="org.gradle.nativeplatform.FlavorContainer" name="flavors"/>
        <parameter type="org.gradle.internal.service.ServiceRegistry" name="serviceRegistry"/>
    </method>
    <method name="createDefaultBuildTypes" returnType="void">
        <parameter type="org.gradle.nativeplatform.BuildTypeContainer" name="buildTypes"/>
    </method>
    <method name="createDefaultFlavor" returnType="void">
        <parameter type="org.gradle.nativeplatform.FlavorContainer" name="flavors"/>
    </method>
    <method name="createDefaultToolChain" returnType="void">
        <parameter type="org.gradle.nativeplatform.toolchain.internal.NativeToolChainRegistryInternal" name="toolChains"/>
    </method>
    <method name="createInstallTasks" returnType="void">
        <description> 
 Can't use @BinaryTasks because the binary is not _built-by_ the install task, but it is associated with it. Rule is called multiple times, so need to check for task existence before 
 creating. 
</description>
        <parameter type="org.gradle.model.ModelMap" name="tasks"/>
        <parameter type="org.gradle.platform.base.BinaryContainer" name="binaries"/>
    </method>
    <method name="executableTasks" returnType="void">
        <parameter type="org.gradle.model.ModelMap" name="tasks"/>
        <parameter type="NativeExecutableBinarySpecInternal" name="executableBinary"/>
    </method>
    <method name="execute" returnType="void">
        <parameter type="org.gradle.api.DefaultTask" name="task"/>
    </method>
    <method name="execute" returnType="void">
        <parameter type="org.gradle.language.base.LanguageSourceSet" name="languageSourceSet"/>
    </method>
    <method name="execute" returnType="void">
        <parameter type="org.gradle.language.nativeplatform.internal.DependentSourceSetInternal" name="dependentSourceSet"/>
    </method>
    <method name="execute" returnType="void">
        <parameter type="org.gradle.nativeplatform.tasks.CreateStaticLibrary" name="task"/>
    </method>
    <method name="execute" returnType="void">
        <parameter type="org.gradle.nativeplatform.tasks.LinkSharedLibrary" name="linkTask"/>
    </method>
    <method name="execute" returnType="void">
        <parameter type="org.gradle.nativeplatform.tasks.PrefixHeaderFileGenerateTask" name="prefixHeaderFileGenerateTask"/>
    </method>
    <method name="flavors" returnType="org.gradle.nativeplatform.FlavorContainer">
        <parameter type="org.gradle.api.plugins.ExtensionContainer" name="extensionContainer"/>
    </method>
    <method name="getFiles" returnType="org.gradle.api.file.FileCollection">
        <parameter type="org.gradle.nativeplatform.NativeDependencySet" name="nativeDependencySet"/>
    </method>
    <method name="maybeSetSourceDir" returnType="void">
        <parameter type="org.gradle.api.file.SourceDirectorySet" name="sourceSet"/>
        <parameter type="org.gradle.api.Task" name="task"/>
        <parameter type="java.lang.String" name="propertyName"/>
    </method>
    <method name="nativeExecutable" returnType="void">
        <parameter type="org.gradle.platform.base.TypeBuilder" name="builder"/>
    </method>
    <method name="nativeLibrary" returnType="void">
        <parameter type="org.gradle.platform.base.TypeBuilder" name="builder"/>
    </method>
    <method name="registerFactoryForCustomNativePlatforms" returnType="void">
        <parameter type="org.gradle.platform.base.PlatformContainer" name="platforms"/>
        <parameter type="org.gradle.internal.reflect.Instantiator" name="instantiator"/>
    </method>
    <method name="registerNativeComponent" returnType="void">
        <parameter type="org.gradle.platform.base.TypeBuilder" name="builder"/>
    </method>
    <method name="registerNativeExecutableBinaryType" returnType="void">
        <parameter type="org.gradle.platform.base.TypeBuilder" name="builder"/>
    </method>
    <method name="registerNativePlatformResolver" returnType="void">
        <parameter type="org.gradle.platform.base.internal.PlatformResolvers" name="resolvers"/>
        <parameter type="org.gradle.internal.service.ServiceRegistry" name="serviceRegistry"/>
    </method>
    <method name="registerSharedLibraryBinaryType" returnType="void">
        <parameter type="org.gradle.platform.base.TypeBuilder" name="builder"/>
    </method>
    <method name="registerStaticLibraryBinaryType" returnType="void">
        <parameter type="org.gradle.platform.base.TypeBuilder" name="builder"/>
    </method>
    <method name="registerTargetedNativeComponent" returnType="void">
        <parameter type="org.gradle.platform.base.TypeBuilder" name="builder"/>
    </method>
    <method name="repositories" returnType="org.gradle.nativeplatform.Repositories">
        <parameter type="org.gradle.internal.service.ServiceRegistry" name="serviceRegistry"/>
        <parameter type="org.gradle.nativeplatform.FlavorContainer" name="flavors"/>
        <parameter type="org.gradle.platform.base.PlatformContainer" name="platforms"/>
        <parameter type="org.gradle.nativeplatform.BuildTypeContainer" name="buildTypes"/>
    </method>
    <method name="sharedLibraryTasks" returnType="void">
        <parameter type="org.gradle.model.ModelMap" name="tasks"/>
        <parameter type="SharedLibraryBinarySpecInternal" name="binary"/>
    </method>
    <method name="staticLibraryTasks" returnType="void">
        <parameter type="org.gradle.model.ModelMap" name="tasks"/>
        <parameter type="StaticLibraryBinarySpecInternal" name="binary"/>
    </method>
    <method name="toolChains" returnType="org.gradle.nativeplatform.toolchain.internal.NativeToolChainRegistryInternal">
        <parameter type="org.gradle.api.plugins.ExtensionContainer" name="extensionContainer"/>
    </method>
    <property name="files" type="org.gradle.api.file.FileCollection"/>
</type>
