<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type language="gradle" name="org.gradle.testkit.runner.GradleRunner" version="3.0">
    <description>
 * Executes a Gradle build, allowing inspection of the outcome.
 * &lt;p&gt;
 * A Gradle runner can be used to functionally test build logic, by executing a contrived build.
 * Assertions can then be made on the outcome of the build, such as the state of files created by the build,
 * or what tasks were actually executed during the build.
 * &lt;p&gt;
 * A runner can be created via the {@link #create()} method.
 * &lt;p&gt;
 * Typically, the test code using the runner will programmatically create a build (e.g. by writing Gradle build files to a temporary space) to execute.
 * The build to execute is effectively specified by the {@link #withProjectDir(File)}} method.
 * It is a requirement that a project directory be set.
 * &lt;p&gt;
 * The {@link #withArguments(String...)} method allows the build arguments to be specified,
 * just as they would be on the command line.
 * &lt;p&gt;
 * The {@link #build()} method can be used to invoke the build when it is expected to succeed,
 * while the {@link #buildAndFail()} method can be used when the build is expected to fail.
 * &lt;p&gt;
 * GradleRunner instances are not thread safe and cannot be used concurrently.
 * However, multiple instances are able to be used concurrently.
 * &lt;p&gt;
 * Please see &lt;a href="https://docs.gradle.org/current/userguide/test_kit.html"&gt;the Gradle TestKit User Guide chapter&lt;/a&gt; for more information.
 *
 * @since 2.6
 </description>
    <method name="build" returnType="org.gradle.testkit.runner.BuildResult">
        <description>
     * Executes a build, expecting it to complete without failure.
     *
     * @throws InvalidRunnerConfigurationException if the configuration of this runner is invalid (e.g. project directory not set)
     * @throws UnexpectedBuildFailure if the build does not succeed
     * @return the build result
     </description>
    </method>
    <method name="buildAndFail" returnType="org.gradle.testkit.runner.BuildResult">
        <description>
     * Executes a build, expecting it to complete with failure.
     *
     * @throws InvalidRunnerConfigurationException if the configuration of this runner is invalid (e.g. project directory not set)
     * @throws UnexpectedBuildSuccess if the build succeeds
     * @return the build result
     </description>
    </method>
    <method name="create" returnType="org.gradle.testkit.runner.GradleRunner">
        <description>
     * Creates a new Gradle runner.
     * &lt;p&gt;
     * The runner requires a Gradle distribution (and therefore a specific version of Gradle) in order to execute builds.
     * This method will find a Gradle distribution, based on the filesystem location of this class.
     * That is, it is expected that this class is loaded from a Gradle distribution.
     * &lt;p&gt;
     * When using the runner as part of tests &lt;i&gt;being executed by Gradle&lt;/i&gt; (i.e. a build using the {@code gradleTestKit()} dependency),
     * this means that the same distribution of Gradle that is executing the tests will be used by runner returned by this method.
     * &lt;p&gt;
     * When using the runner as part of tests &lt;i&gt;being executed by an IDE&lt;/i&gt;,
     * this means that the same distribution of Gradle that was used when importing the project will be used.
     *
     * @return a new Gradle runner
     </description>
    </method>
    <method name="forwardOutput" returnType="org.gradle.testkit.runner.GradleRunner">
        <description>
     * Forwards the output of executed builds to the {@link System#out System.out} stream.
     * &lt;p&gt;
     * The output of the build is always available via {@link BuildResult#getOutput()}.
     * This method can be used to additionally forward the output to {@code System.out} of the process using the runner.
     * &lt;p&gt;
     * This method does not separate the standard output and error output.
     * The two streams will be merged as they typically are when using Gradle from a command line interface.
     * If you require separation of the streams, you can use {@link #forwardStdOutput(Writer)} and {@link #forwardStdError(Writer)} directly.
     * &lt;p&gt;
     * Calling this method will negate the effect of previously calling {@link #forwardStdOutput(Writer)} and/or {@link #forwardStdError(Writer)}.
     *
     * @return this
     * @since 2.9
     * @see #forwardStdOutput(Writer)
     * @see #forwardStdError(Writer)
     </description>
    </method>
    <method name="forwardStdError" returnType="org.gradle.testkit.runner.GradleRunner">
        <description>
     * Configures the runner to forward standard error output from builds to the given writer.
     * &lt;p&gt;
     * The output of the build is always available via {@link BuildResult#getOutput()}.
     * This method can be used to additionally capture the error output.
     * &lt;p&gt;
     * Calling this method will negate the effect of previously calling {@link #forwardOutput()}.
     * &lt;p&gt;
     * The given writer will not be closed by the runner.
     *
     * @param writer the writer that build standard error output should be forwarded to
     * @return this
     * @since 2.9
     * @see #forwardOutput()
     * @see #forwardStdOutput(Writer)
     </description>
        <parameter type="java.io.Writer" name="writer"/>
    </method>
    <method name="forwardStdOutput" returnType="org.gradle.testkit.runner.GradleRunner">
        <description>
     * Configures the runner to forward standard output from builds to the given writer.
     * &lt;p&gt;
     * The output of the build is always available via {@link BuildResult#getOutput()}.
     * This method can be used to additionally capture the output.
     * &lt;p&gt;
     * Calling this method will negate the effect of previously calling {@link #forwardOutput()}.
     * &lt;p&gt;
     * The given writer will not be closed by the runner.
     * &lt;p&gt;
     * When executing builds with Gradle versions earlier than 2.9 &lt;b&gt;in debug mode&lt;/b&gt;, any output produced by the build that
     * was written directly to {@code System.out} or {@code System.err} will not be represented in {@link BuildResult#getOutput()}.
     * This is due to a defect that was fixed in Gradle 2.9.
     *
     * @param writer the writer that build standard output should be forwarded to
     * @return this
     * @since 2.9
     * @see #forwardOutput()
     * @see #forwardStdError(Writer)
     </description>
        <parameter type="java.io.Writer" name="writer"/>
    </method>
    <method name="getArguments" returnType="java.util.List">
        <description>
     * The build arguments.
     * &lt;p&gt;
     * Effectively, the command line arguments to Gradle.
     * This includes all tasks, flags, properties etc.
     * &lt;p&gt;
     * The returned list is immutable.
     *
     * @return the build arguments
     </description>
    </method>
    <method name="getPluginClasspath" returnType="java.util.List">
        <description>
     * The injected plugin classpath for the build.
     * &lt;p&gt;
     * The returned list is immutable.
     * Returns an empty list if no classpath was provided with {@link #withPluginClasspath(Iterable)}.
     *
     * @return the classpath of plugins to make available to the build under test
     * @since 2.8
     </description>
    </method>
    <method name="getProjectDir" returnType="java.io.File">
        <description>
     * The directory that the build will be executed in.
     * &lt;p&gt;
     * This is analogous to the current directory when executing Gradle from the command line.
     *
     * @return the directory to execute the build in
     </description>
    </method>
    <method name="isDebug" returnType="boolean">
        <description>
     * Indicates whether the build should be executed “in process” so that it is debuggable.
     * &lt;p&gt;
     * If debug support is not enabled, the build will be executed in an entirely separate process.
     * This means that any debugger that is attached to the test execution process will not be attached to the build process.
     * When debug support is enabled, the build is executed in the same process that is using the Gradle Runner, allowing the build to be debugged.
     * &lt;p&gt;
     * Debug support is off (i.e. {@code false}) by default.
     * It can be enabled by setting the system property {@code org.gradle.testkit.debug} to {@code true} for the test process,
     * or by using the {@link #withDebug(boolean)} method.
     *
     * @return whether the build should be executed in the same process
     * @since 2.9
     </description>
    </method>
    <method name="withArguments" returnType="org.gradle.testkit.runner.GradleRunner">
        <description>
     * Sets the build arguments.
     *
     * @param arguments the build arguments
     * @return this
     * @see #getArguments()
     </description>
        <parameter type="java.lang.String" name="arguments"/>
    </method>
    <method name="withArguments" returnType="org.gradle.testkit.runner.GradleRunner">
        <description>
     * Sets the build arguments.
     *
     * @param arguments the build arguments
     * @return this
     * @see #getArguments()
     </description>
        <parameter type="java.util.List" name="arguments"/>
    </method>
    <method name="withDebug" returnType="org.gradle.testkit.runner.GradleRunner">
        <description>
     * Sets whether debugging support is enabled.
     *
     * @see #isDebug()
     * @param flag the debug flag
     * @return this
     * @since 2.9
     </description>
        <parameter type="boolean" name="flag"/>
    </method>
    <method name="withGradleDistribution" returnType="org.gradle.testkit.runner.GradleRunner">
        <description>
     * Configures the runner to execute the build using the distribution of Gradle specified.
     * &lt;p&gt;
     * The given URI must point to a valid Gradle distribution ZIP file.
     * This method is typically used as an alternative to {@link #withGradleVersion(String)},
     * where it is preferable to obtain the Gradle runtime from “local” servers.
     * &lt;p&gt;
     * Unless previously downloaded, this method will cause the Gradle runtime at the given URI to be downloaded.
     * The download will be cached beneath the Gradle User Home directory, the location of which is determined by the following in order of precedence:
     * &lt;ol&gt;
     * &lt;li&gt;The system property {@code "gradle.user.home"}&lt;/li&gt;
     * &lt;li&gt;The environment variable {@code "GRADLE_USER_HOME"}&lt;/li&gt;
     * &lt;/ol&gt;
     * &lt;p&gt;
     * If neither are present, {@code "~/.gradle"} will be used, where {@code "~"} is the value advertised by the JVM's {@code "user.dir"} system property.
     * The system property and environment variable are read in the process using the runner, not the build process.
     *
     * @param distribution a URI pointing at a valid Gradle distribution zip file
     * @return this
     * @since 2.9
     * @see #withGradleVersion(String)
     * @see #withGradleInstallation(File)
     </description>
        <parameter type="java.net.URI" name="distribution"/>
    </method>
    <method name="withGradleInstallation" returnType="org.gradle.testkit.runner.GradleRunner">
        <description>
     * Configures the runner to execute the build using the installation of Gradle specified.
     * &lt;p&gt;
     * The given file must be a directory containing a valid Gradle installation.
     * &lt;p&gt;
     * Alternatively, you may use {@link #withGradleVersion(String)} to use an automatically installed Gradle version.
     *
     * @param installation a valid Gradle installation
     * @return this
     * @since 2.9
     * @see #withGradleVersion(String)
     * @see #withGradleDistribution(URI)
     </description>
        <parameter type="java.io.File" name="installation"/>
    </method>
    <method name="withGradleVersion" returnType="org.gradle.testkit.runner.GradleRunner">
        <description>
     * Configures the runner to execute the build with the version of Gradle specified.
     * &lt;p&gt;
     * Unless previously downloaded, this method will cause the Gradle runtime for the version specified
     * to be downloaded over the Internet from Gradle's distribution servers.
     * The download will be cached beneath the Gradle User Home directory, the location of which is determined by the following in order of precedence:
     * &lt;ol&gt;
     * &lt;li&gt;The system property {@code "gradle.user.home"}&lt;/li&gt;
     * &lt;li&gt;The environment variable {@code "GRADLE_USER_HOME"}&lt;/li&gt;
     * &lt;/ol&gt;
     * &lt;p&gt;
     * If neither are present, {@code "~/.gradle"} will be used, where {@code "~"} is the value advertised by the JVM's {@code "user.dir"} system property.
     * The system property and environment variable are read in the process using the runner, not the build process.
     * &lt;p&gt;
     * Alternatively, you may use {@link #withGradleInstallation(File)} to use an installation already on the filesystem.
     * &lt;p&gt;
     * To use a non standard Gradle runtime, or to obtain the runtime from an alternative location, use {@link #withGradleDistribution(URI)}.
     *
     * @param versionNumber the version number (e.g. "2.9")
     * @return this
     * @since 2.9
     * @see #withGradleInstallation(File)
     * @see #withGradleDistribution(URI)
     </description>
        <parameter type="java.lang.String" name="versionNumber"/>
    </method>
    <method name="withPluginClasspath" returnType="org.gradle.testkit.runner.GradleRunner">
        <description>
     * Sets the plugin classpath based on the Gradle plugin development plugin conventions.
     * &lt;p&gt;
     * The 'java-gradle-plugin' generates a file describing the plugin under test and makes it available to the test runtime.
     * This method configures the runner to use this file.
     * Please consult the Gradle documentation of this plugin for more information.
     * &lt;p&gt;
     * This method looks for a file named {@code plugin-under-test-metadata.properties} on the runtime classpath,
     * and uses the {@code implementation-classpath} as the classpath, which is expected to a {@link File#pathSeparatorChar} joined string.
     * If the plugin metadata file cannot be resolved an {@link InvalidPluginMetadataException} is thrown.
     * &lt;p&gt;
     * Plugins from classpath are able to be resolved using the &lt;code&gt;plugins { }&lt;/code&gt; syntax in the build under test.
     * Please consult the TestKit Gradle User Guide chapter for more information and usage examples.
     * &lt;p&gt;
     * Calling this method will replace any previous classpath specified via {@link #withPluginClasspath(Iterable)} and vice versa.
     * &lt;p&gt;
     * &lt;b&gt;Note:&lt;/b&gt; this method will cause an {@link InvalidRunnerConfigurationException} to be emitted when the build is executed,
     * if the version of Gradle executing the build (i.e. not the version of the runner) is earlier than Gradle 2.8 as those versions do not support this feature.
     * Please consult the TestKit Gradle User Guide chapter alternative strategies that can be used for older Gradle versions.
     *
     * @return this
     * @see #withPluginClasspath(Iterable)
     * @see #getPluginClasspath()
     * @since 2.13
     </description>
    </method>
    <method name="withPluginClasspath" returnType="org.gradle.testkit.runner.GradleRunner">
        <description>
     * Sets the injected plugin classpath for the build.
     * &lt;p&gt;
     * Plugins from the given classpath are able to be resolved using the &lt;code&gt;plugins { }&lt;/code&gt; syntax in the build under test.
     * Please consult the TestKit Gradle User Guide chapter for more information and usage examples.
     * &lt;p&gt;
     * &lt;b&gt;Note:&lt;/b&gt; this method will cause an {@link InvalidRunnerConfigurationException} to be emitted when the build is executed,
     * if the version of Gradle executing the build (i.e. not the version of the runner) is earlier than Gradle 2.8 as those versions do not support this feature.
     * Please consult the TestKit Gradle User Guide chapter alternative strategies that can be used for older Gradle versions.
     *
     * @param classpath the classpath of plugins to make available to the build under test
     * @return this
     * @see #getPluginClasspath()
     * @since 2.8
     </description>
        <parameter type="java.lang.Iterable" name="classpath"/>
    </method>
    <method name="withProjectDir" returnType="org.gradle.testkit.runner.GradleRunner">
        <description>
     * Sets the directory that the Gradle will be executed in.
     * &lt;p&gt;
     * This is typically set to the root project of the build under test.
     * &lt;p&gt;
     * A project directory must be set.
     * This method must be called before {@link #build()} or {@link #buildAndFail()}.
     * &lt;p&gt;
     * All builds executed with the runner effectively implicitly add the {@code --no-search-upwards} argument.
     * This suppresses Gradle's default behaviour of searching upwards through the file system in order to find the root of the current project tree.
     * This default behaviour is often utilised when focusing on a particular build within a multi-project build.
     * This behaviour is suppressed due to test builds being executed potentially being created within a “real build”
     * (e.g. under the {@code /build} directory of the plugin's project directory).
     *
     * @param projectDir the project directory
     * @return {@code this}
     * @see #getProjectDir()
     </description>
        <parameter type="java.io.File" name="projectDir"/>
    </method>
    <method name="withTestKitDir" returnType="org.gradle.testkit.runner.GradleRunner">
        <description>
     * Sets the directory to use for TestKit's working storage needs.
     * &lt;p&gt;
     * This directory is used internally to store various files required by the runner.
     * If no explicit Gradle user home is specified via the build arguments (i.e. the {@code -g «dir»} option}),
     * this directory will also be used for the Gradle user home for the test build.
     * &lt;p&gt;
     * If no value has been specified when the build is initiated, a directory unique to the current operating system
     * user will be created and used within the JVM's temporary directory as advertised by the {@code java.io.tmpdir} system property.
     * This directory is not deleted by the runner after the test build.
     * &lt;p&gt;
     * You may wish to specify a location that is within your project and regularly cleaned, such as the project's build directory.
     * &lt;p&gt;
     * The actual contents of this directory are an internal implementation detail and may change at any time.
     *
     * @param testKitDir the TestKit directory
     * @return {@code this}
     * @since 2.7
     </description>
        <parameter type="java.io.File" name="testKitDir"/>
    </method>
    <property name="arguments" type="java.util.List">
        <description>
     * The build arguments.
     * &lt;p&gt;
     * Effectively, the command line arguments to Gradle.
     * This includes all tasks, flags, properties etc.
     * &lt;p&gt;
     * The returned list is immutable.
     *
     * @return the build arguments
     </description>
    </property>
    <property name="debug" type="boolean">
        <description>
     * Indicates whether the build should be executed “in process” so that it is debuggable.
     * &lt;p&gt;
     * If debug support is not enabled, the build will be executed in an entirely separate process.
     * This means that any debugger that is attached to the test execution process will not be attached to the build process.
     * When debug support is enabled, the build is executed in the same process that is using the Gradle Runner, allowing the build to be debugged.
     * &lt;p&gt;
     * Debug support is off (i.e. {@code false}) by default.
     * It can be enabled by setting the system property {@code org.gradle.testkit.debug} to {@code true} for the test process,
     * or by using the {@link #withDebug(boolean)} method.
     *
     * @return whether the build should be executed in the same process
     * @since 2.9
     </description>
    </property>
    <property name="pluginClasspath" type="java.util.List">
        <description>
     * The injected plugin classpath for the build.
     * &lt;p&gt;
     * The returned list is immutable.
     * Returns an empty list if no classpath was provided with {@link #withPluginClasspath(Iterable)}.
     *
     * @return the classpath of plugins to make available to the build under test
     * @since 2.8
     </description>
    </property>
    <property name="projectDir" type="java.io.File">
        <description>
     * The directory that the build will be executed in.
     * &lt;p&gt;
     * This is analogous to the current directory when executing Gradle from the command line.
     *
     * @return the directory to execute the build in
     </description>
    </property>
</type>
