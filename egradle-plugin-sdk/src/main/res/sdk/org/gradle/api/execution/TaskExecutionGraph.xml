<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.execution.TaskExecutionGraph" version="3.0">
    <description> &lt;p&gt;A &lt;code&gt;TaskExecutionGraph&lt;/code&gt; is responsible for managing the execution of the &lt;a href='type://Task'&gt;Task&lt;/a&gt; instances which
 are part of the build. The &lt;code&gt;TaskExecutionGraph&lt;/code&gt; maintains an execution plan of tasks to be executed (or
 which have been executed), and you can query this plan from your build file.&lt;/p&gt;

 &lt;p&gt;You can access the &lt;a href='type://TaskExecutionGraph'&gt;TaskExecutionGraph&lt;/a&gt; by calling &lt;a href='type://org.gradle.api.invocation.Gradle#getTaskGraph()'&gt;org.gradle.api.invocation.Gradle#getTaskGraph()&lt;/a&gt;.
 In your build file you can use &lt;a href='type://gradle.taskGraph'&gt;gradle.taskGraph&lt;/a&gt; to access it.&lt;/p&gt;

 &lt;p&gt;The &lt;code&gt;TaskExecutionGraph&lt;/code&gt; is populated only after all the projects in the build have been evaulated. It
 is empty before then. You can receive a notification when the graph is populated, using &lt;a href='type://org.gradle.api.execution.TaskExecutionGraph#whenReady(groovy.lang.Closure)'&gt;#whenReady(groovy.lang.Closure)&lt;/a&gt; or &lt;a href='type://org.gradle.api.execution.TaskExecutionGraph#addTaskExecutionGraphListener(TaskExecutionGraphListener)'&gt;#addTaskExecutionGraphListener(TaskExecutionGraphListener)&lt;/a&gt;.&lt;/p&gt;

</description>
    <method name="addTaskExecutionGraphListener" returnType="void">
        <description> &lt;p&gt;Adds a listener to this graph, to be notified when this graph is ready.&lt;/p&gt;

 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;listener The listener to add. Does nothing if this listener has already been added.

</description>
        <parameter type="org.gradle.api.execution.TaskExecutionGraphListener" name="listener"/>
    </method>
    <method name="addTaskExecutionListener" returnType="void">
        <description> &lt;p&gt;Adds a listener to this graph, to be notified as tasks are executed.&lt;/p&gt;

 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;listener The listener to add. Does nothing if this listener has already been added.

</description>
        <parameter type="org.gradle.api.execution.TaskExecutionListener" name="listener"/>
    </method>
    <method name="afterTask" returnType="void" delegationTarget="org.gradle.api.tasks.TaskState">
        <description> &lt;p&gt;Adds a closure to be called immediately after a task has executed. The task is passed to the closure as the
 first parameter. A &lt;a href='type://org.gradle.api.tasks.TaskState'&gt;org.gradle.api.tasks.TaskState&lt;/a&gt; is passed as the second parameter. Both parameters are
 optional.&lt;/p&gt;

 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;closure The closure to execute when a task has been executed

</description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="beforeTask" returnType="void">
        <description> &lt;p&gt;Adds a closure to be called immediately before a task is executed. The task is passed to the closure as a
 parameter.&lt;/p&gt;

 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;closure The closure to execute when a task is about to be executed.

</description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="getAllTasks" returnType="java.util.List">
        <description> &lt;p&gt;Returns the tasks which are included in the execution plan. The tasks are returned in the order that they will
 be executed.&lt;/p&gt;

 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The tasks. Returns an empty set if no tasks are to be executed.
 @throws IllegalStateException When this graph has not been populated.

</description>
    </method>
    <method name="hasTask" returnType="boolean">
        <description> &lt;p&gt;Determines whether the given task is included in the execution plan.&lt;/p&gt;

 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;path the &lt;em&gt;absolute&lt;/em&gt; path of the task.
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;true if a task with the given path is included in the execution plan.
 @throws IllegalStateException When this graph has not been populated.

</description>
        <parameter type="java.lang.String" name="path"/>
    </method>
    <method name="hasTask" returnType="boolean">
        <description> &lt;p&gt;Determines whether the given task is included in the execution plan.&lt;/p&gt;

 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;task the task
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;true if the given task is included in the execution plan.
 @throws IllegalStateException When this graph has not been populated.

</description>
        <parameter type="org.gradle.api.Task" name="task"/>
    </method>
    <method name="removeTaskExecutionGraphListener" returnType="void">
        <description> &lt;p&gt;Remove a listener from this graph.&lt;/p&gt;

 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;listener The listener to remove. Does nothing if this listener was never added to this graph.

</description>
        <parameter type="org.gradle.api.execution.TaskExecutionGraphListener" name="listener"/>
    </method>
    <method name="removeTaskExecutionListener" returnType="void">
        <description> &lt;p&gt;Remove a listener from this graph.&lt;/p&gt;

 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;listener The listener to remove. Does nothing if this listener was never added to this graph.

</description>
        <parameter type="org.gradle.api.execution.TaskExecutionListener" name="listener"/>
    </method>
    <method name="whenReady" returnType="void">
        <description> &lt;p&gt;Adds a closure to be called when this graph has been populated. This graph is passed to the closure as a
 parameter.&lt;/p&gt;

 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;closure The closure to execute when this graph has been populated.

</description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <property name="allTasks" type="java.util.List">
        <description> &lt;p&gt;Returns the tasks which are included in the execution plan. The tasks are returned in the order that they will
 be executed.&lt;/p&gt;

 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The tasks. Returns an empty set if no tasks are to be executed.
 @throws IllegalStateException When this graph has not been populated.

</description>
    </property>
</type>
