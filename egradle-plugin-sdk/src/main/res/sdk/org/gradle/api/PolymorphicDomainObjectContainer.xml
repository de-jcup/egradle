<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.PolymorphicDomainObjectContainer" version="3.0" documented="true">
    <description>
 * A {@link NamedDomainObjectContainer} that allows to create domain objects with different types.
 *
 * @param &lt;T&gt; the (base) type of domain objects in the container
 </description>
    <method name="containerWithType" returnType="org.gradle.api.NamedDomainObjectContainer" documented="true">
        <description>
     * Creates a regular container that wraps the polymorphic container presenting all elements of a specified type.
     *
     * @param type the type of the container elements
     * @param &lt;U&gt; the type of the container elements
     * @return a {@link NamedDomainObjectContainer} providing access to elements of type U.
     </description>
        <parameter type="java.lang.Class" name="type"/>
    </method>
    <method name="create" returnType="U" documented="true">
        <description>
     * Creates a domain object with the specified name and type, and adds it to the container.
     *
     * @param name the name of the domain object to be created
     *
     * @param type the type of the domain object to be created
     *
     * @param &lt;U&gt; the type of the domain object to be created
     *
     * @return the created domain object
     *
     * @throws InvalidUserDataException if a domain object with the specified name already exists
     * or the container does not support creating a domain object with the specified type
     </description>
        <parameter type="java.lang.String" name="name"/>
        <parameter type="java.lang.Class" name="type"/>
    </method>
    <method name="create" returnType="U" documented="true">
        <description>
     * Creates a domain object with the specified name and type, adds it to the container, and configures
     * it with the specified action.
     *
     * @param name the name of the domain object to be created
     *
     * @param type the type of the domain object to be created
     *
     * @param configuration an action for configuring the domain object
     *
     * @param &lt;U&gt; the type of the domain object to be created
     *
     * @return the created domain object
     *
     * @throws InvalidUserDataException if a domain object with the specified name already exists
     * or the container does not support creating a domain object with the specified type
     </description>
        <parameter type="java.lang.String" name="name"/>
        <parameter type="java.lang.Class" name="type"/>
        <parameter type="org.gradle.api.Action" name="configuration"/>
    </method>
    <method name="maybeCreate" returnType="U" documented="true">
        <description>
     * Looks for an item with the given name and type, creating and adding it to this container if it does not exist.
     *
     * @param name the name of the domain object to be created
     * @param type the type of the domain object to be created
     * @param &lt;U&gt; the type of the domain object to be created
     *
     * @return the found or created domain object, never &lt;code&gt;null&lt;/code&gt;.
     *
     * @throws InvalidUserDataException if the container does not support creating a domain object with the specified type
     * @throws ClassCastException if a domain object with the specified name exists with a different type
     </description>
        <parameter type="java.lang.String" name="name"/>
        <parameter type="java.lang.Class" name="type"/>
    </method>
    <interface name="org.gradle.api.NamedDomainObjectContainer"/>
</type>
