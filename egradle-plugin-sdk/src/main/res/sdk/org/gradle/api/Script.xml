<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.Script" version="3.0" documented="true">
    <description>
 * &lt;p&gt;This interface is implemented by all Gradle scripts to add in some Gradle-specific methods. As your compiled
 * script class will implement this interface, you can use the methods and properties declared by this interface
 * directly in your script.&lt;/p&gt;
 *
 * &lt;p&gt;Generally, a {@code Script} object will have a delegate object attached to it. For example, a build script will
 * have a {@link Project} instance attached to it, and an initialization script will have a {@link
 * org.gradle.api.invocation.Gradle} instance attached to it. Any property reference or method call which is not found
 * on this {@code Script} object is forwarded to the delegate object.&lt;/p&gt;
 </description>
    <method name="apply" returnType="void" documented="true">
        <description>
     * &lt;p&gt;Configures the delegate object for this script using plugins or scripts.
     *
     * &lt;p&gt;The given closure is used to configure an {@link org.gradle.api.plugins.ObjectConfigurationAction} which is
     * then used to configure the delegate object.&lt;/p&gt;
     *
     * @param closure The closure to configure the {@code ObjectConfigurationAction}.
     </description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="apply" returnType="void" documented="true">
        <description>
     * &lt;p&gt;Configures the delegate object for this script using plugins or scripts.
     *
     * &lt;p&gt;The following options are available:&lt;/p&gt;
     *
     * &lt;ul&gt;&lt;li&gt;{@code from}: A script to apply to the delegate object. Accepts any path supported by {@link
     * #uri(Object)}.&lt;/li&gt;
     *
     * &lt;li&gt;{@code plugin}: The id or implementation class of the plugin to apply to the delegate object.&lt;/li&gt;
     *
     * &lt;li&gt;{@code to}: The target delegate object or objects.&lt;/li&gt;&lt;/ul&gt; &lt;p/&gt; &lt;p&gt;For more detail, see {@link
     * org.gradle.api.plugins.ObjectConfigurationAction}.&lt;/p&gt;
     *
     * @param options The options to use to configure the {@code ObjectConfigurationAction}.
     </description>
        <parameter type="java.util.Map" name="options"/>
    </method>
    <method name="buildscript" returnType="void" delegationTarget="org.gradle.api.initialization.dsl.ScriptHandler" documented="true">
        <description>
     * Configures the classpath for this script.
     *
     * &lt;p&gt;The given closure is executed against this script's {@link ScriptHandler}. The {@link ScriptHandler} is passed
     * to the closure as the closure's delegate.
     *
     * @param configureClosure the closure to use to configure the script classpath.
     </description>
        <parameter type="groovy.lang.Closure" name="configureClosure"/>
    </method>
    <method name="copy" returnType="org.gradle.api.tasks.WorkResult" documented="true">
        <description>
     * Copy the specified files.  The given closure is used to configure a {@link org.gradle.api.file.CopySpec}, which
     * is then used to copy the files. Example:
     * &lt;pre&gt;
     * copy {
     *    from configurations.runtime
     *    into 'build/deploy/lib'
     * }
     * &lt;/pre&gt;
     * Note that CopySpecs can be nested:
     * &lt;pre&gt;
     * copy {
     *    into 'build/webroot'
     *    exclude '**&amp;#47;.svn/**'
     *    from('src/main/webapp') {
     *       include '**&amp;#47;*.jsp'
     *       filter(ReplaceTokens, tokens:[copyright:'2009', version:'2.3.1'])
     *    }
     *    from('src/main/js') {
     *       include '**&amp;#47;*.js'
     *    }
     * }
     * &lt;/pre&gt;
     *
     * @param closure Closure to configure the CopySpec
     * @return {@link org.gradle.api.tasks.WorkResult} that can be used to check if the copy did any work.
     </description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="copySpec" returnType="org.gradle.api.file.CopySpec" documented="true">
        <description>
     * Creates a {@link org.gradle.api.file.CopySpec} which can later be used to copy files or create an archive. The
     * given closure is used to configure the {@link org.gradle.api.file.CopySpec} before it is returned by this
     * method.
     *
     * @param closure Closure to configure the CopySpec
     * @return The CopySpec
     </description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="delete" returnType="boolean" documented="true">
        <description>
     * Deletes files and directories.
     *
     * @param paths Any type of object accepted by {@link org.gradle.api.Project#files(Object...)}
     * @return true if anything got deleted, false otherwise
     </description>
        <parameter type="java.lang.Object" name="paths"/>
    </method>
    <method name="exec" returnType="org.gradle.process.ExecResult" documented="true">
        <description>
     * Executes an external command. The closure configures a {@link org.gradle.process.ExecSpec}.
     *
     * @param closure The closure for configuring the execution.
     * @return the result of the execution
     </description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="exec" returnType="org.gradle.process.ExecResult" documented="true">
        <description>
     * Executes an external command.
     *
     * @param action The action for configuring the execution.
     * @return the result of the execution
     </description>
        <parameter type="org.gradle.api.Action" name="action"/>
    </method>
    <method name="file" returnType="java.io.File" documented="true">
        <description>
     * &lt;p&gt;Resolves a file path relative to the directory containing this script. This works as described for {@link
     * Project#file(Object)}&lt;/p&gt;
     *
     * @param path The object to resolve as a File.
     * @return The resolved file. Never returns null.
     </description>
        <parameter type="java.lang.Object" name="path"/>
    </method>
    <method name="file" returnType="java.io.File" documented="true">
        <description>
     * &lt;p&gt;Resolves a file path relative to the directory containing this script and validates it using the given scheme.
     * See {@link PathValidation} for the list of possible validations.&lt;/p&gt;
     *
     * @param path An object to resolve as a File.
     * @param validation The validation to perform on the file.
     * @return The resolved file. Never returns null.
     * @throws InvalidUserDataException When the file does not meet the given validation constraint.
     </description>
        <parameter type="java.lang.Object" name="path"/>
        <parameter type="org.gradle.api.PathValidation" name="validation"/>
    </method>
    <method name="fileTree" returnType="org.gradle.api.file.ConfigurableFileTree" documented="true">
        <description>
     * &lt;p&gt;Creates a new {@code ConfigurableFileTree} using the given base directory. The given baseDir path is evaluated
     * as per {@link #file(Object)}.&lt;/p&gt;
     * 
     * &lt;p&gt;The returned file tree is lazy, so that it scans for files only when the contents of the file tree are
     * queried. The file tree is also live, so that it scans for files each time the contents of the file tree are
     * queried.&lt;/p&gt;
     *
     * @param baseDir The base directory of the file tree. Evaluated as per {@link #file(Object)}.
     * @return the file tree. Never returns null.
     </description>
        <parameter type="java.lang.Object" name="baseDir"/>
    </method>
    <method name="fileTree" returnType="org.gradle.api.file.ConfigurableFileTree" documented="true">
        <description>
     * &lt;p&gt;Creates a new {@code ConfigurableFileTree} using the provided map of arguments.  The map will be applied as
     * properties on the new file tree.  Example:&lt;/p&gt;
     * &lt;pre&gt;
     * fileTree(dir:'src', excludes:['**&amp;#47;ignore/**','**&amp;#47;.svn/**'])
     * &lt;/pre&gt;
     * &lt;p&gt;The returned file tree is lazy, so that it scans for files only when the contents of the file tree are
     * queried. The file tree is also live, so that it scans for files each time the contents of the file tree are
     * queried.&lt;/p&gt;
     *
     * @param args map of property assignments to {@code ConfigurableFileTree} object
     * @return the configured file tree. Never returns null.
     </description>
        <parameter type="java.util.Map" name="args"/>
    </method>
    <method name="fileTree" returnType="org.gradle.api.file.ConfigurableFileTree" documented="true">
        <description>
     * &lt;p&gt;Creates a new {@code ConfigurableFileTree} using the given base directory. The given baseDir path is evaluated
     * as per {@link #file(Object)}. The closure will be used to configure the new file tree.
     * The file tree is passed to the closure as its delegate.  Example:&lt;/p&gt;
     *
     * &lt;pre&gt;
     * fileTree('src') {
     *    exclude '**&amp;#47;.svn/**'
     * }.copy { into 'dest'}
     * &lt;/pre&gt;
     *
     * &lt;p&gt;The returned file tree is lazy, so that it scans for files only when the contents of the file tree are
     * queried. The file tree is also live, so that it scans for files each time the contents of the file tree are
     * queried.&lt;/p&gt;
     *
     * @param baseDir The base directory of the file tree. Evaluated as per {@link #file(Object)}.
     * @param configureClosure Closure to configure the {@code ConfigurableFileTree} object.
     * @return the configured file tree. Never returns null.
     </description>
        <parameter type="java.lang.Object" name="baseDir"/>
        <parameter type="groovy.lang.Closure" name="configureClosure"/>
    </method>
    <method name="files" returnType="org.gradle.api.file.ConfigurableFileCollection" documented="true">
        <description>
     * &lt;p&gt;Returns a {@link ConfigurableFileCollection} containing the given files. This works as described for {@link
     * Project#files(Object...)}. Relative paths are resolved relative to the directory containing this script.&lt;/p&gt;
     *
     * @param paths The paths to the files. May be empty.
     * @return The file collection. Never returns null.
     </description>
        <parameter type="java.lang.Object" name="paths"/>
    </method>
    <method name="files" returnType="org.gradle.api.file.ConfigurableFileCollection" documented="true">
        <description>
     * &lt;p&gt;Creates a new {@code ConfigurableFileCollection} using the given paths. The file collection is configured
     * using the given closure. This method works as described for {@link Project#files(Object, groovy.lang.Closure)}.
     * Relative paths are resolved relative to the directory containing this script.&lt;/p&gt;
     *
     * @param paths The contents of the file collection. Evaluated as per {@link #files(Object...)}.
     * @param configureClosure The closure to use to configure the file collection.
     * @return the configured file tree. Never returns null.
     </description>
        <parameter type="java.lang.Object" name="paths"/>
        <parameter type="groovy.lang.Closure" name="configureClosure"/>
    </method>
    <method name="getBuildscript" returnType="org.gradle.api.initialization.dsl.ScriptHandler">
        <description>
     * Returns the script handler for this script. You can use this handler to manage the classpath used to compile and
     * execute this script.
     *
     * @return the classpath handler. Never returns null.
     </description>
    </method>
    <method name="getLogger" returnType="org.gradle.api.logging.Logger">
        <description>
     * Returns the logger for this script. You can use this in your script to write log messages.
     *
     * @return The logger. Never returns null.
     </description>
    </method>
    <method name="getLogging" returnType="org.gradle.api.logging.LoggingManager">
        <description>
     * Returns the {@link org.gradle.api.logging.LoggingManager} which can be used to control the logging level and
     * standard output/error capture for this script. By default, System.out is redirected to the Gradle logging system
     * at the QUIET log level, and System.err is redirected at the ERROR log level.
     *
     * @return the LoggingManager. Never returns null.
     </description>
    </method>
    <method name="getResources" returnType="org.gradle.api.resources.ResourceHandler">
        <description>
     * Provides access to resource-specific utility methods, for example factory methods that create various resources.
     *
     * @return Returned instance contains various resource-specific utility methods.
     </description>
    </method>
    <method name="javaexec" returnType="org.gradle.process.ExecResult" documented="true">
        <description>
     * Executes a Java main class. The closure configures a {@link org.gradle.process.JavaExecSpec}.
     *
     * @param closure The closure for configuring the execution.
     * @return the result of the execution
     </description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="javaexec" returnType="org.gradle.process.ExecResult" documented="true">
        <description>
     * Executes a Java main class.
     *
     * @param action The action for configuring the execution.
     * @return the result of the execution
     </description>
        <parameter type="org.gradle.api.Action" name="action"/>
    </method>
    <method name="mkdir" returnType="java.io.File" documented="true">
        <description>
     * Creates a directory and returns a file pointing to it.
     *
     * @param path The path for the directory to be created. Evaluated as per {@link #file(Object)}.
     * @return the created directory
     * @throws org.gradle.api.InvalidUserDataException If the path points to an existing file.
     </description>
        <parameter type="java.lang.Object" name="path"/>
    </method>
    <method name="relativePath" returnType="java.lang.String" documented="true">
        <description>
     * &lt;p&gt;Returns the relative path from the directory containing this script to the given path. The given path object
     * is (logically) resolved as described for {@link #file(Object)}, from which a relative path is calculated.&lt;/p&gt;
     *
     * @param path The path to convert to a relative path.
     * @return The relative path. Never returns null.
     </description>
        <parameter type="java.lang.Object" name="path"/>
    </method>
    <method name="tarTree" returnType="org.gradle.api.file.FileTree" documented="true">
        <description>
     * Creates a new {@code FileTree} which contains the contents of the given TAR file. The given tarPath path can be:
     * &lt;ul&gt;
     *   &lt;li&gt;an instance of {@link org.gradle.api.resources.Resource}&lt;/li&gt;
     *   &lt;li&gt;any other object is evaluated as per {@link #file(Object)}&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * The returned file tree is lazy, so that it scans for files only when the contents of the file tree are
     * queried. The file tree is also live, so that it scans for files each time the contents of the file tree are
     * queried.
     * &lt;p&gt;
     * Unless custom implementation of resources is passed, the tar tree attempts to guess the compression based on the file extension.
     * &lt;p&gt;
     * You can combine this method with the {@link #copy(groovy.lang.Closure)}
     * method to untar a TAR file:
     *
     * &lt;pre autoTested=''&gt;
     * task untar(type: Copy) {
     *   from tarTree('someCompressedTar.gzip')
     *
     *   //tar tree attempts to guess the compression based on the file extension
     *   //however if you must specify the compression explicitly you can:
     *   from tarTree(resources.gzip('someTar.ext'))
     *
     *   //in case you work with unconventionally compressed tars
     *   //you can provide your own implementation of a ReadableResource:
     *   //from tarTree(yourOwnResource as ReadableResource)
     *
     *   into 'dest'
     * }
     * &lt;/pre&gt;
     *
     * @param tarPath The TAR file or an instance of {@link org.gradle.api.resources.Resource}.
     * @return the file tree. Never returns null.
     </description>
        <parameter type="java.lang.Object" name="tarPath"/>
    </method>
    <method name="uri" returnType="java.net.URI" documented="true">
        <description>
     * &lt;p&gt;Resolves a file path to a URI, relative to the directory containing this script. Evaluates the provided path
     * object as described for {@link #file(Object)}, with the exception that any URI scheme is supported, not just
     * 'file:' URIs.&lt;/p&gt;
     *
     * @param path The object to resolve as a URI.
     * @return The resolved URI. Never returns null.
     </description>
        <parameter type="java.lang.Object" name="path"/>
    </method>
    <method name="zipTree" returnType="org.gradle.api.file.FileTree" documented="true">
        <description>
     * &lt;p&gt;Creates a new {@code FileTree} which contains the contents of the given ZIP file. The given zipPath path is
     * evaluated as per {@link #file(Object)}. You can combine this method with the {@link #copy(groovy.lang.Closure)}
     * method to unzip a ZIP file.&lt;/p&gt;
     *
     * &lt;p&gt;The returned file tree is lazy, so that it scans for files only when the contents of the file tree are
     * queried. The file tree is also live, so that it scans for files each time the contents of the file tree are
     * queried.&lt;/p&gt;
     *
     * @param zipPath The ZIP file. Evaluated as per {@link #file(Object)}.
     * @return the file tree. Never returns null.
     </description>
        <parameter type="java.lang.Object" name="zipPath"/>
    </method>
    <property name="buildscript" type="org.gradle.api.initialization.dsl.ScriptHandler" documented="true">
        <description>
     * Returns the script handler for this script. You can use this handler to manage the classpath used to compile and
     * execute this script.
     *
     * @return the classpath handler. Never returns null.
     </description>
    </property>
    <property name="logger" type="org.gradle.api.logging.Logger" documented="true">
        <description>
     * Returns the logger for this script. You can use this in your script to write log messages.
     *
     * @return The logger. Never returns null.
     </description>
    </property>
    <property name="logging" type="org.gradle.api.logging.LoggingManager" documented="true">
        <description>
     * Returns the {@link org.gradle.api.logging.LoggingManager} which can be used to control the logging level and
     * standard output/error capture for this script. By default, System.out is redirected to the Gradle logging system
     * at the QUIET log level, and System.err is redirected at the ERROR log level.
     *
     * @return the LoggingManager. Never returns null.
     </description>
    </property>
    <property name="resources" type="org.gradle.api.resources.ResourceHandler" documented="true">
        <description>
     * Provides access to resource-specific utility methods, for example factory methods that create various resources.
     *
     * @return Returned instance contains various resource-specific utility methods.
     </description>
    </property>
</type>
