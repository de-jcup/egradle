<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.tasks.incremental.IncrementalTaskInputs" version="3.0" documented="true">
    <description>
 * Provides access to any input files that need to be processed by an incremental task.
 * &lt;p&gt;
 * An incremental task action is one that accepts a single {@link IncrementalTaskInputs} parameter.
 * The task can then provide an action to execute for all input files that are out of date with respect to the previous execution of the task,
 * and a separate action for all input files that have been removed since the previous execution.
 *
 * &lt;pre autoTested="true"&gt;
 * class IncrementalReverseTask extends DefaultTask {
 *      {@literal @}InputDirectory
 *      def File inputDir
 *
 *      {@literal @}OutputDirectory
 *      def File outputDir
 *
 *      {@literal @}TaskAction
 *      void execute(IncrementalTaskInputs inputs) {
 *          if (!inputs.incremental)
 *              project.delete(outputDir.listFiles())
 *
 *          inputs.outOfDate { change -&gt;
 *              def targetFile = project.file("$outputDir/${change.file.name}")
 *              targetFile.text = change.file.text.reverse()
 *          }
 *
 *          inputs.removed { change -&gt;
 *              def targetFile = project.file("$outputDir/${change.file.name}")
 *              if (targetFile.exists()) {
 *                  targetFile.delete()
 *              }
 *          }
 *      }
 *  }
 * &lt;/pre&gt;
 *
 * &lt;p&gt;
 * In the case where Gradle is unable to determine which input files need to be reprocessed, then all of the input files will be reported as {@link #outOfDate}.
 * Cases where this occurs include:
 * &lt;ul&gt;
 *     &lt;li&gt;There is no history available from a previous execution.&lt;/li&gt;
 *     &lt;li&gt;An {@link org.gradle.api.tasks.TaskOutputs#upToDateWhen(groovy.lang.Closure)} criteria added to the task returns &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
 *     &lt;li&gt;An {@link org.gradle.api.tasks.Input} property has changed since the previous execution.&lt;/li&gt;
 *     &lt;li&gt;One or more output files have changed since the previous execution.&lt;/li&gt;
 * &lt;/ul&gt;
 *
 * Note that this is a stateful API:
 * &lt;ul&gt;
 *     &lt;li&gt;{@link #outOfDate} and {@link #removed} can each only be executed a single time per {@link IncrementalTaskInputs} instance.&lt;/li&gt;
 *     &lt;li&gt;{@link #outOfDate} must be executed before {@link #removed} is called.&lt;/li&gt;
 * &lt;/ul&gt;
 </description>
    <method name="isIncremental" returnType="boolean">
        <description>
     * Indicates if it was possible for Gradle to determine which exactly input files were out of date compared to a previous execution.
     * This is &lt;em&gt;not&lt;/em&gt; possible in the case of no previous execution, changed input properties, output files, etc.
     * &lt;p&gt;
     * When &lt;code&gt;true&lt;/code&gt;:
     * &lt;ul&gt;
     *     &lt;li&gt;Any input file that has been added or modified since previous execution will be considered 'out-of-date' and reported to {@link #outOfDate}.&lt;/li&gt;
     *     &lt;li&gt;Any input files that has been removed since previous execution will be reported to {@link #removed}.&lt;/li&gt;
     * &lt;/ul&gt;
     * &lt;/p&gt;
     * &lt;p&gt;
     * When &lt;code&gt;false&lt;/code&gt;:
     * &lt;ul&gt;
     *     &lt;li&gt;Every input file will be considered to be 'out-of-date' and will be reported to {@link #outOfDate}.&lt;/li&gt;
     *     &lt;li&gt;No input files will be reported to {@link #removed}.&lt;/li&gt;
     * &lt;/ul&gt;
     * &lt;/p&gt;
     </description>
    </method>
    <method name="outOfDate" returnType="void" documented="true">
        <description>
     * Executes the action for all of the input files that are out-of-date since the previous task execution. The action may also be supplied as a {@link groovy.lang.Closure}.
     * &lt;ul&gt;
     *     &lt;li&gt;When {@link #isIncremental()} == &lt;code&gt;true&lt;/code&gt;, the action will be executed for any added or modified input file.&lt;/li&gt;
     *     &lt;li&gt;When {@link #isIncremental()} == &lt;code&gt;false&lt;/code&gt;, the action will be executed for every input file for the task.&lt;/li&gt;
     * &lt;/ul&gt;
     * &lt;p&gt;
     * This method may only be called a single time for a single {@link IncrementalTaskInputs} instance.
     * &lt;/p&gt;
     * @throws IllegalStateException on second and subsequent invocations.
     </description>
        <parameter type="org.gradle.api.Action" name="outOfDateAction"/>
    </method>
    <method name="removed" returnType="void" documented="true">
        <description>
     * Executes the action for all of the input files that were removed since the previous task execution. The action may also be supplied as a {@link groovy.lang.Closure}.
     * &lt;ul&gt;
     *     &lt;li&gt;When {@link #isIncremental()} == &lt;code&gt;true&lt;/code&gt;, the action will be executed for any removed input file.&lt;/li&gt;
     *     &lt;li&gt;When {@link #isIncremental()} == &lt;code&gt;false&lt;/code&gt;, the action will not be executed.&lt;/li&gt;
     * &lt;/ul&gt;
     * &lt;p&gt;
     * This method may only be called a single time for a single {@link IncrementalTaskInputs} instance.
     * &lt;/p&gt;&lt;p&gt;
     * This method may only be called after {@link #outOfDate} has been called.
     * &lt;/p&gt;
     * @throws IllegalStateException if invoked prior to {@link #outOfDate}, or if invoked more than once.
     </description>
        <parameter type="org.gradle.api.Action" name="removedAction"/>
    </method>
    <property name="incremental" type="boolean" documented="true">
        <description>
     * Indicates if it was possible for Gradle to determine which exactly input files were out of date compared to a previous execution.
     * This is &lt;em&gt;not&lt;/em&gt; possible in the case of no previous execution, changed input properties, output files, etc.
     * &lt;p&gt;
     * When &lt;code&gt;true&lt;/code&gt;:
     * &lt;ul&gt;
     *     &lt;li&gt;Any input file that has been added or modified since previous execution will be considered 'out-of-date' and reported to {@link #outOfDate}.&lt;/li&gt;
     *     &lt;li&gt;Any input files that has been removed since previous execution will be reported to {@link #removed}.&lt;/li&gt;
     * &lt;/ul&gt;
     * &lt;/p&gt;
     * &lt;p&gt;
     * When &lt;code&gt;false&lt;/code&gt;:
     * &lt;ul&gt;
     *     &lt;li&gt;Every input file will be considered to be 'out-of-date' and will be reported to {@link #outOfDate}.&lt;/li&gt;
     *     &lt;li&gt;No input files will be reported to {@link #removed}.&lt;/li&gt;
     * &lt;/ul&gt;
     * &lt;/p&gt;
     </description>
    </property>
</type>
