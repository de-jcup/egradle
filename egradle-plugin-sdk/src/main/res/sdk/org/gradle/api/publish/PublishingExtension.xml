<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.publish.PublishingExtension" version="3.0" documented="true">
    <description>
 * The configuration of how to “publish” the different components of a project.
 * &lt;p&gt;
 * This new publishing mechanism will eventually replace the current mechanism of upload tasks and configurations. At this time, it is an
 * incubating feature and under development.
 *
 * &lt;p&gt;
 * The PublishingExtension is a {@link org.gradle.api.plugins.DeferredConfigurable} model element, meaning that extension will be configured as late as possible in the build.
 * So any 'publishing' configuration blocks are not evaluated until either:
 * &lt;ol&gt;
 *     &lt;li&gt;The project is about to execute, or&lt;/li&gt;
 *     &lt;li&gt;he publishing extension is referenced as an instance, as opposed to via a configuration closure.&lt;/li&gt;
 * &lt;/ol&gt;
 * &lt;p&gt;
 * A 'publishing' configuration block does not need to dereference the publishing extension, and so will be evaluated late. eg:
 * &lt;pre&gt;
 *     publishing {
 *         publications { ... }
 *         repositories.maven { ... }
 *     }
 * &lt;/pre&gt;
 *
 * &lt;p&gt;
 * Any use that accesses the publishing extension as an instance does require the publishing extension to be realised, forcing all configuration blocks to be evaluated. eg:
 * &lt;pre&gt;
 *     publishing.publications { ... }
 *     publishing.repositories.maven { ... }
 * &lt;/pre&gt;
 *
 * @since 1.3
 </description>
    <method name="getPublications" returnType="org.gradle.api.publish.PublicationContainer">
        <description>
     * The publications of the project.
     * &lt;p&gt;
     * See {@link #publications(org.gradle.api.Action)} for more information.
     *
     * @return The publications of this project.
     </description>
    </method>
    <method name="getRepositories" returnType="org.gradle.api.artifacts.dsl.RepositoryHandler">
        <description>
     * The container of possible repositories to publish to.
     * &lt;p&gt;
     * See {@link #repositories(org.gradle.api.Action)} for more information.
     *
     * @return The container of possible repositories to publish to.
     </description>
    </method>
    <method name="publications" returnType="void" documented="true">
        <description>
     * Configures the publications of this project.
     * &lt;p&gt;
     * The publications container defines the outgoing publications of the project. That is, the consumable representations of things produced
     * by building the project. An example of a publication would be an Ivy Module (i.e. {@code ivy.xml} and artifacts), or
     * Maven Project (i.e. {@code pom.xml} and artifacts).
     * &lt;p&gt;
     * Actual publication implementations and the ability to create them are provided by different plugins. The “publishing” plugin itself does not provide any publication types.
     * For example, given that the 'maven-publish' plugin provides a {@link org.gradle.api.publish.maven.MavenPublication} type, you can create a publication like:
     * &lt;pre autoTested="true"&gt;
     * apply plugin: 'maven-publish'
     *
     * publishing {
     *   publications {
     *     myPublicationName(MavenPublication) {
     *       // Configure the publication here
     *     }
     *   }
     * }
     * &lt;/pre&gt;
     * &lt;p&gt;
     * Please see {@link org.gradle.api.publish.ivy.IvyPublication} and {@link org.gradle.api.publish.maven.MavenPublication} for more information on publishing in these specific formats.
     *
     * @param configure The action or closure to configure the publications with.
     </description>
        <parameter type="org.gradle.api.Action" name="configure"/>
    </method>
    <method name="repositories" returnType="void" documented="true">
        <description>
     * Configures the container of possible repositories to publish to.
     *
     * &lt;pre autoTested="true"&gt;
     * apply plugin: 'publishing'
     *
     * publishing {
     *   repositories {
     *     // Create an ivy publication destination named “releases”
     *     ivy {
     *       name "releases"
     *       url "http://my.org/ivy-repos/releases"
     *     }
     *   }
     * }
     * &lt;/pre&gt;
     *
     * The {@code repositories} block is backed by a {@link RepositoryHandler}, which is the same DSL as that that is used for declaring repositories to consume dependencies from. However,
     * certain types of repositories that can be created by the repository handler are not valid for publishing, such as {@link org.gradle.api.artifacts.dsl.RepositoryHandler#mavenCentral()}.
     * &lt;p&gt;
     * At this time, only repositories created by the {@code ivy()} factory method have any effect. Please see {@link org.gradle.api.publish.ivy.IvyPublication}
     * for information on how this can be used for publishing to Ivy repositories.
     *
     * @param configure The action to configure the container of repositories with.
     </description>
        <parameter type="org.gradle.api.Action" name="configure"/>
    </method>
    <property name="publications" type="org.gradle.api.publish.PublicationContainer" documented="true">
        <description>
     * The publications of the project.
     * &lt;p&gt;
     * See {@link #publications(org.gradle.api.Action)} for more information.
     *
     * @return The publications of this project.
     </description>
    </property>
    <property name="repositories" type="org.gradle.api.artifacts.dsl.RepositoryHandler" documented="true">
        <description>
     * The container of possible repositories to publish to.
     * &lt;p&gt;
     * See {@link #repositories(org.gradle.api.Action)} for more information.
     *
     * @return The container of possible repositories to publish to.
     </description>
    </property>
</type>
