<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type language="gradle" name="org.gradle.api.tasks.wrapper.Wrapper" version="3.0" superType="org.gradle.api.DefaultTask" documented="true">
    <description> &lt;p&gt;Generates scripts (for *nix and windows) which allow you to build your project with Gradle, without having to
 install Gradle.

 &lt;p&gt;When a user executes a wrapper script the first time, the script downloads and installs the appropriate Gradle
 distribution and runs the build against this downloaded distribution. Any installed Gradle distribution is ignored
 when using the wrapper scripts.

 &lt;p&gt;The scripts generated by this task are intended to be committed to your version control system. This task also
 generates a small &lt;a href='type://gradle-wrapper.jar'&gt;gradle-wrapper.jar&lt;/a&gt; bootstrap JAR file and properties file which should also be committed to
 your VCS. The scripts delegates to this JAR.

</description>
    <method name="getArchiveBase" returnType="org.gradle.api.tasks.wrapper.Wrapper.PathBase">
        <description> The archive base specifies whether the unpacked wrapper distribution should be stored in the project or in the
 gradle user home dir.

</description>
    </method>
    <method name="getArchivePath" returnType="java.lang.String">
        <description> Returns the path where the gradle distributions archive should be saved (i.e. the parent dir). The path is
 relative to the archive base directory.

</description>
    </method>
    <method name="getBatchScript" returnType="java.io.File">
        <description> Returns the file to write the wrapper batch script to.

</description>
    </method>
    <method name="getDistributionBase" returnType="org.gradle.api.tasks.wrapper.Wrapper.PathBase">
        <description> The distribution base specifies whether the unpacked wrapper distribution should be stored in the project or in
 the gradle user home dir.

</description>
    </method>
    <method name="getDistributionPath" returnType="java.lang.String">
        <description> Returns the path where the gradle distributions needed by the wrapper are unzipped. The path is relative to the
 distribution base directory

 (see &lt;a href='type://org.gradle.api.tasks.wrapper.Wrapper#setDistributionPath(String)'&gt;#setDistributionPath(String)&lt;/a&gt;)

</description>
    </method>
    <method name="getDistributionUrl" returnType="java.lang.String">
        <description> The URL to download the gradle distribution from.

 &lt;p&gt;If not set, the download URL is the default for the specified &lt;a href='type://org.gradle.api.tasks.wrapper.Wrapper#getGradleVersion()'&gt;#getGradleVersion()&lt;/a&gt;.

 &lt;p&gt;If &lt;a href='type://org.gradle.api.tasks.wrapper.Wrapper#getGradleVersion()'&gt;#getGradleVersion()&lt;/a&gt; is not set, will return null.

 &lt;p&gt;The wrapper downloads a certain distribution only once and caches it. If your distribution base is the
 project, you might submit the distribution to your version control system. That way no download is necessary at
 all. This might be in particular interesting, if you provide a custom gradle snapshot to the wrapper, because you
 don't need to provide a download server then.

</description>
    </method>
    <method name="getGradleVersion" returnType="java.lang.String">
        <description> Returns the gradle version for the wrapper.

 (see &lt;a href='type://org.gradle.api.tasks.wrapper.Wrapper#setGradleVersion(String)'&gt;#setGradleVersion(String)&lt;/a&gt;)

</description>
    </method>
    <method name="getJarFile" returnType="java.io.File">
        <description> Returns the file to write the wrapper jar file to.

</description>
    </method>
    <method name="getPropertiesFile" returnType="java.io.File">
        <description> Returns the file to write the wrapper properties to.

</description>
    </method>
    <method name="getScriptFile" returnType="java.io.File">
        <description> Returns the file to write the wrapper script to.

</description>
    </method>
    <method name="setArchiveBase" returnType="void">
        <description> The archive base specifies whether the unpacked wrapper distribution should be stored in the project or in the
 gradle user home dir.

</description>
        <parameter type="org.gradle.api.tasks.wrapper.Wrapper.PathBase" name="archiveBase"/>
    </method>
    <method name="setArchivePath" returnType="void">
        <description> Set's the path where the gradle distributions archive should be saved (i.e. the parent dir). The path is relative
 to the parent dir specified with &lt;a href='type://org.gradle.api.tasks.wrapper.Wrapper#getArchiveBase()'&gt;#getArchiveBase()&lt;/a&gt;.

</description>
        <parameter type="java.lang.String" name="archivePath"/>
    </method>
    <method name="setDistributionBase" returnType="void">
        <description> The distribution base specifies whether the unpacked wrapper distribution should be stored in the project or in
 the gradle user home dir.

</description>
        <parameter type="org.gradle.api.tasks.wrapper.Wrapper.PathBase" name="distributionBase"/>
    </method>
    <method name="setDistributionPath" returnType="void">
        <description> Sets the path where the gradle distributions needed by the wrapper are unzipped. The path is relative to the
 distribution base directory

 (see &lt;a href='type://org.gradle.api.tasks.wrapper.Wrapper#setDistributionPath(String)'&gt;#setDistributionPath(String)&lt;/a&gt;)

</description>
        <parameter type="java.lang.String" name="distributionPath"/>
    </method>
    <method name="setDistributionUrl" returnType="void">
        <description> The URL to download the gradle distribution from.

 &lt;p&gt;If not set, the download URL is the default for the specified &lt;a href='type://org.gradle.api.tasks.wrapper.Wrapper#getGradleVersion()'&gt;#getGradleVersion()&lt;/a&gt;.

 &lt;p&gt;If &lt;a href='type://org.gradle.api.tasks.wrapper.Wrapper#getGradleVersion()'&gt;#getGradleVersion()&lt;/a&gt; is not set, will return null.

 &lt;p&gt;The wrapper downloads a certain distribution only once and caches it. If your distribution base is the
 project, you might submit the distribution to your version control system. That way no download is necessary at
 all. This might be in particular interesting, if you provide a custom gradle snapshot to the wrapper, because you
 don't need to provide a download server then.

</description>
        <parameter type="java.lang.String" name="url"/>
    </method>
    <method name="setGradleVersion" returnType="void">
        <description> The version of the gradle distribution required by the wrapper. This is usually the same version of Gradle you
 use for building your project.

</description>
        <parameter type="java.lang.String" name="gradleVersion"/>
    </method>
    <method name="setJarFile" returnType="void">
        <description> The file to write the wrapper jar file to.

</description>
        <parameter type="java.lang.Object" name="jarFile"/>
    </method>
    <method name="setScriptFile" returnType="void">
        <description> The file to write the wrapper script to.

</description>
        <parameter type="java.lang.Object" name="scriptFile"/>
    </method>
    <property name="archiveBase" type="org.gradle.api.tasks.wrapper.Wrapper.PathBase" documented="true">
        <description> The archive base specifies whether the unpacked wrapper distribution should be stored in the project or in the
 gradle user home dir.

</description>
    </property>
    <property name="archivePath" type="java.lang.String" documented="true">
        <description> Returns the path where the gradle distributions archive should be saved (i.e. the parent dir). The path is
 relative to the archive base directory.

</description>
    </property>
    <property name="batchScript" type="java.io.File">
        <description> Returns the file to write the wrapper batch script to.

</description>
    </property>
    <property name="distributionBase" type="org.gradle.api.tasks.wrapper.Wrapper.PathBase" documented="true">
        <description> The distribution base specifies whether the unpacked wrapper distribution should be stored in the project or in
 the gradle user home dir.

</description>
    </property>
    <property name="distributionPath" type="java.lang.String" documented="true">
        <description> Returns the path where the gradle distributions needed by the wrapper are unzipped. The path is relative to the
 distribution base directory

 (see &lt;a href='type://org.gradle.api.tasks.wrapper.Wrapper#setDistributionPath(String)'&gt;#setDistributionPath(String)&lt;/a&gt;)

</description>
    </property>
    <property name="distributionUrl" type="java.lang.String" documented="true">
        <description> The URL to download the gradle distribution from.

 &lt;p&gt;If not set, the download URL is the default for the specified &lt;a href='type://org.gradle.api.tasks.wrapper.Wrapper#getGradleVersion()'&gt;#getGradleVersion()&lt;/a&gt;.

 &lt;p&gt;If &lt;a href='type://org.gradle.api.tasks.wrapper.Wrapper#getGradleVersion()'&gt;#getGradleVersion()&lt;/a&gt; is not set, will return null.

 &lt;p&gt;The wrapper downloads a certain distribution only once and caches it. If your distribution base is the
 project, you might submit the distribution to your version control system. That way no download is necessary at
 all. This might be in particular interesting, if you provide a custom gradle snapshot to the wrapper, because you
 don't need to provide a download server then.

</description>
    </property>
    <property name="gradleVersion" type="java.lang.String" documented="true">
        <description> Returns the gradle version for the wrapper.

 (see &lt;a href='type://org.gradle.api.tasks.wrapper.Wrapper#setGradleVersion(String)'&gt;#setGradleVersion(String)&lt;/a&gt;)

</description>
    </property>
    <property name="jarFile" type="java.io.File" documented="true">
        <description> Returns the file to write the wrapper jar file to.

</description>
    </property>
    <property name="propertiesFile" type="java.io.File" documented="true">
        <description> Returns the file to write the wrapper properties to.

</description>
    </property>
    <property name="scriptFile" type="java.io.File" documented="true">
        <description> Returns the file to write the wrapper script to.

</description>
    </property>
</type>
