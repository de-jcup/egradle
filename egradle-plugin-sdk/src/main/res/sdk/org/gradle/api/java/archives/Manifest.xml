<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.java.archives.Manifest" version="3.0">
    <description>
 * Represents the manifest file of a JAR file.
 </description>
    <method name="attributes" returnType="org.gradle.api.java.archives.Manifest">
        <description>
     * Adds content to the main attributes of the manifest.
     *
     * @param attributes The values to add to the main attributes. The values can be any object. For evaluating the value objects
     * their {@link Object#toString()} method is used. This is done lazily either before writing or when {@link #getEffectiveManifest()}
     * is called.
     *
     * @return this
     * @throws ManifestException If a key is invalid according to the manifest spec or if a key or value is null.
     </description>
        <parameter type="java.util.Map" name="attributes"/>
    </method>
    <method name="attributes" returnType="org.gradle.api.java.archives.Manifest">
        <description>
     * Adds content to the given section of the manifest.
     *
     * @param attributes The values to add to the section. The values can be any object. For evaluating the value objects
     * their {@link Object#toString()} method is used. This is done lazily either before writing or when {@link #getEffectiveManifest()}
     * is called.
     * @param sectionName The name of the section
     *
     * @return this
     * @throws ManifestException If a key is invalid according to the manifest spec or if a key or value is null.
     </description>
        <parameter type="java.util.Map" name="attributes"/>
        <parameter type="java.lang.String" name="sectionName"/>
    </method>
    <method name="from" returnType="org.gradle.api.java.archives.Manifest">
        <description>
     * Specifies other manifests to be merged into this manifest. A merge path can either be another instance of
     * {@link org.gradle.api.java.archives.Manifest} or a file path as interpreted by {@link org.gradle.api.Project#files(Object...)}.
     *
     * The merge is not happening instantaneously. It happens either before writing or when {@link #getEffectiveManifest()}
     * is called.
     *
     * @param mergePath
     * @return this
     </description>
        <parameter type="java.lang.Object" name="mergePath"/>
    </method>
    <method name="from" returnType="org.gradle.api.java.archives.Manifest">
        <description>
     * Specifies other manifests to be merged into this manifest. A merge path is interpreted as described in
     * {@link #from(Object...)}.
     *
     * The merge is not happening instantaneously. It happens either before writing or when {@link #getEffectiveManifest()}
     * is called.
     *
     * The closure configures the underlying {@link org.gradle.api.java.archives.ManifestMergeSpec}.
     *
     * @param mergePath
     * @param closure
     * @return this
     </description>
        <parameter type="java.lang.Object" name="mergePath"/>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="getAttributes" returnType="org.gradle.api.java.archives.Attributes">
        <description>
     * Returns the main attributes of the manifest.
     </description>
    </method>
    <method name="getEffectiveManifest" returnType="org.gradle.api.java.archives.Manifest">
        <description>
     * Returns a new manifest instance where all the attribute values are expanded (e.g. their toString method is called).
     * The returned manifest also contains all the attributes of the to be merged manifests specified in {@link #from(Object...)}.
     </description>
    </method>
    <method name="getSections" returnType="java.util.Map">
        <description>
     * Returns the sections of the manifest (excluding the main section).
     *
     * @return A map with the sections, where the key represents the section name and value the section attributes.
     </description>
    </method>
    <method name="writeTo" returnType="org.gradle.api.java.archives.Manifest">
        <description>
     * Writes the manifest into a writer.
     *
     * If writing to bytes, prefer using the UTF-8 character set for encoding.
     *
     * Note that using this method will break your Manifest if it contains long
     * attribute names or values that may produce split multi-bytes characters.
     * Prefer {@link #writeTo(Object)} instead.
     *
     * @param writer The writer to write the manifest to
     * @return this
     </description>
        <parameter type="java.io.Writer" name="writer"/>
    </method>
    <method name="writeTo" returnType="org.gradle.api.java.archives.Manifest">
        <description>
     * Writes the manifest into a file. The path's are resolved as defined by {@link org.gradle.api.Project#files(Object...)}
     *
     * The manifest will be encoded using the character set defined by the {@link org.gradle.jvm.tasks.Jar#getManifestContentCharset()} property.
     *
     * @param path The path of the file to write the manifest into.
     * @return this
     </description>
        <parameter type="java.lang.Object" name="path"/>
    </method>
    <property name="attributes" type="org.gradle.api.java.archives.Attributes">
        <description>
     * Returns the main attributes of the manifest.
     </description>
    </property>
    <property name="effectiveManifest" type="org.gradle.api.java.archives.Manifest">
        <description>
     * Returns a new manifest instance where all the attribute values are expanded (e.g. their toString method is called).
     * The returned manifest also contains all the attributes of the to be merged manifests specified in {@link #from(Object...)}.
     </description>
    </property>
    <property name="sections" type="java.util.Map">
        <description>
     * Returns the sections of the manifest (excluding the main section).
     *
     * @return A map with the sections, where the key represents the section name and value the section attributes.
     </description>
    </property>
</type>
