<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.logging.Logger" version="3.0">
    <description>
 * &lt;p&gt;An extension to the SLF4J {@code Logger} interface, which adds the {@code quiet} and {@code lifecycle} log
 * levels.&lt;/p&gt;
 *
 * &lt;p&gt;You can obtain a {@code Logger} instance using {@link Logging#getLogger(Class)} or {@link
 * Logging#getLogger(String)}. A {@code Logger} instance is also available through {@link
 * org.gradle.api.Project#getLogger()}, {@link org.gradle.api.Task#getLogger()} and {@link
 * org.gradle.api.Script#getLogger()}.&lt;/p&gt;
 </description>
    <method name="debug" returnType="void">
        <description>
     * Multiple-parameters friendly debug method
     *
     * @param message the log message
     * @param objects the log message parameters
     </description>
        <parameter type="java.lang.String" name="message"/>
        <parameter type="java.lang.Object" name="objects"/>
    </method>
    <method name="info" returnType="void">
        <description>
     * Logs the given message at info log level.
     *
     * @param message the log message.
     * @param objects the log message parameters.
     </description>
        <parameter type="java.lang.String" name="message"/>
        <parameter type="java.lang.Object" name="objects"/>
    </method>
    <method name="isEnabled" returnType="boolean">
        <description>
     * Returns true if the given log level is enabled for this logger.
     </description>
        <parameter type="org.gradle.api.logging.LogLevel" name="level"/>
    </method>
    <method name="isLifecycleEnabled" returnType="boolean">
        <description>
     * Returns true if lifecycle log level is enabled for this logger.
     </description>
    </method>
    <method name="isQuietEnabled" returnType="boolean">
        <description>
     * Returns true if quiet log level is enabled for this logger.
     </description>
    </method>
    <method name="lifecycle" returnType="void">
        <description>
     * Logs the given message at lifecycle log level.
     *
     * @param message the log message.
     </description>
        <parameter type="java.lang.String" name="message"/>
    </method>
    <method name="lifecycle" returnType="void">
        <description>
     * Logs the given message at lifecycle log level.
     *
     * @param message the log message.
     * @param objects the log message parameters.
     </description>
        <parameter type="java.lang.String" name="message"/>
        <parameter type="java.lang.Object" name="objects"/>
    </method>
    <method name="lifecycle" returnType="void">
        <description>
     * Logs the given message at lifecycle log level.
     *
     * @param message the log message.
     * @param throwable the exception to log.
     </description>
        <parameter type="java.lang.String" name="message"/>
        <parameter type="java.lang.Throwable" name="throwable"/>
    </method>
    <method name="log" returnType="void">
        <description>
     * Logs the given message at the given log level.
     *
     * @param level the log level.
     * @param message the log message.
     </description>
        <parameter type="org.gradle.api.logging.LogLevel" name="level"/>
        <parameter type="java.lang.String" name="message"/>
    </method>
    <method name="log" returnType="void">
        <description>
     * Logs the given message at the given log level.
     *
     * @param level the log level.
     * @param message the log message.
     * @param objects the log message parameters.
     </description>
        <parameter type="org.gradle.api.logging.LogLevel" name="level"/>
        <parameter type="java.lang.String" name="message"/>
        <parameter type="java.lang.Object" name="objects"/>
    </method>
    <method name="log" returnType="void">
        <description>
     * Logs the given message at the given log level.
     *
     * @param level the log level.
     * @param message the log message.
     * @param throwable the exception to log.
     </description>
        <parameter type="org.gradle.api.logging.LogLevel" name="level"/>
        <parameter type="java.lang.String" name="message"/>
        <parameter type="java.lang.Throwable" name="throwable"/>
    </method>
    <method name="quiet" returnType="void">
        <description>
     * Logs the given message at quiet log level.
     *
     * @param message the log message.
     </description>
        <parameter type="java.lang.String" name="message"/>
    </method>
    <method name="quiet" returnType="void">
        <description>
     * Logs the given message at quiet log level.
     *
     * @param message the log message.
     * @param objects the log message parameters.
     </description>
        <parameter type="java.lang.String" name="message"/>
        <parameter type="java.lang.Object" name="objects"/>
    </method>
    <method name="quiet" returnType="void">
        <description>
     * Logs the given message at quiet log level.
     *
     * @param message the log message.
     * @param throwable the exception to log.
     </description>
        <parameter type="java.lang.String" name="message"/>
        <parameter type="java.lang.Throwable" name="throwable"/>
    </method>
    <interface name="org.slf4j.Logger"/>
    <property name="enabled" type="boolean">
        <description>
     * Returns true if the given log level is enabled for this logger.
     </description>
    </property>
    <property name="lifecycleEnabled" type="boolean">
        <description>
     * Returns true if lifecycle log level is enabled for this logger.
     </description>
    </property>
    <property name="quietEnabled" type="boolean">
        <description>
     * Returns true if quiet log level is enabled for this logger.
     </description>
    </property>
</type>
