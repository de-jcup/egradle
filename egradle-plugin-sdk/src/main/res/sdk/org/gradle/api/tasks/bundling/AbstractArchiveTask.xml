<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type language="gradle" name="org.gradle.api.tasks.bundling.AbstractArchiveTask" version="3.0" superType="org.gradle.api.tasks.AbstractCopyTask" documented="true">
    <description>
 * {@code AbstractArchiveTask} is the base class for all archive tasks.
 </description>
    <method name="getAppendix" returnType="java.lang.String">
        <description>
     * Returns the appendix part of the archive name, if any.
     *
     * @return the appendix. May be null
     </description>
    </method>
    <method name="getArchiveName" returnType="java.lang.String">
        <description>
     * Returns the archive name. If the name has not been explicitly set, the pattern for the name is:
     * &lt;code&gt;[baseName]-[appendix]-[version]-[classifier].[extension]&lt;/code&gt;
     *
     * @return the archive name.
     </description>
    </method>
    <method name="getArchivePath" returnType="java.io.File">
        <description>
     * The path where the archive is constructed. The path is simply the {@code destinationDir} plus the {@code archiveName}.
     *
     * @return a File object with the path to the archive
     </description>
    </method>
    <method name="getBaseName" returnType="java.lang.String">
        <description>
     * Returns the base name of the archive.
     *
     * @return the base name.
     </description>
    </method>
    <method name="getClassifier" returnType="java.lang.String">
        <description>
     * Returns the classifier part of the archive name, if any.
     *
     * @return The classifier. May be null.
     </description>
    </method>
    <method name="getDestinationDir" returnType="java.io.File">
        <description>
     * Returns the directory where the archive is generated into.
     *
     * @return the directory
     </description>
    </method>
    <method name="getExtension" returnType="java.lang.String">
        <description>
     * Returns the extension part of the archive name.
     </description>
    </method>
    <method name="getVersion" returnType="java.lang.String">
        <description>
     * Returns the version part of the archive name, if any.
     *
     * @return the version. May be null.
     </description>
    </method>
    <method name="into" returnType="org.gradle.api.tasks.bundling.AbstractArchiveTask" documented="true">
        <description>
     * Specifies the destination directory *inside* the archive for the files.
     * The destination is evaluated as per {@link org.gradle.api.Project#file(Object)}.
     * Don't mix it up with {@link #getDestinationDir()} which specifies the output directory for the archive.
     *
     * @param destPath destination directory *inside* the archive for the files
     * @return this
     </description>
        <parameter type="java.lang.Object" name="destPath"/>
    </method>
    <method name="into" returnType="org.gradle.api.tasks.bundling.AbstractArchiveTask" documented="true">
        <description>
     * Creates and configures a child {@code CopySpec} with a destination directory *inside* the archive for the files.
     * The destination is evaluated as per {@link org.gradle.api.Project#file(Object)}.
     * Don't mix it up with {@link #getDestinationDir()} which specifies the output directory for the archive.
     *
     * @param destPath destination directory *inside* the archive for the files
     * @param configureClosure The closure to use to configure the child {@code CopySpec}.
     * @return this
     </description>
        <parameter type="java.lang.Object" name="destPath"/>
        <parameter type="groovy.lang.Closure" name="configureClosure"/>
    </method>
    <method name="into" returnType="org.gradle.api.file.CopySpec" documented="true">
        <description>
     * Creates and configures a child {@code CopySpec} with a destination directory *inside* the archive for the files.
     * The destination is evaluated as per {@link org.gradle.api.Project#file(Object)}.
     * Don't mix it up with {@link #getDestinationDir()} which specifies the output directory for the archive.
     *
     * @param destPath destination directory *inside* the archive for the files
     * @param copySpec The closure to use to configure the child {@code CopySpec}.
     * @return this
     </description>
        <parameter type="java.lang.Object" name="destPath"/>
        <parameter type="org.gradle.api.Action" name="copySpec"/>
    </method>
    <method name="maybe" returnType="java.lang.String">
        <parameter type="java.lang.String" name="prefix"/>
        <parameter type="java.lang.String" name="value"/>
    </method>
    <method name="setAppendix" returnType="void">
        <parameter type="java.lang.String" name="appendix"/>
    </method>
    <method name="setArchiveName" returnType="void">
        <description>
     * Sets the archive name.
     *
     * @param name the archive name.
     </description>
        <parameter type="java.lang.String" name="name"/>
    </method>
    <method name="setBaseName" returnType="void">
        <parameter type="java.lang.String" name="baseName"/>
    </method>
    <method name="setClassifier" returnType="void">
        <parameter type="java.lang.String" name="classifier"/>
    </method>
    <method name="setDestinationDir" returnType="void">
        <parameter type="java.io.File" name="destinationDir"/>
    </method>
    <method name="setExtension" returnType="void">
        <parameter type="java.lang.String" name="extension"/>
    </method>
    <method name="setVersion" returnType="void">
        <parameter type="java.lang.String" name="version"/>
    </method>
    <property name="appendix" type="java.lang.String" documented="true">
        <description>
     * Returns the appendix part of the archive name, if any.
     *
     * @return the appendix. May be null
     </description>
    </property>
    <property name="archiveName" type="java.lang.String" documented="true">
        <description>
     * Returns the archive name. If the name has not been explicitly set, the pattern for the name is:
     * &lt;code&gt;[baseName]-[appendix]-[version]-[classifier].[extension]&lt;/code&gt;
     *
     * @return the archive name.
     </description>
    </property>
    <property name="archivePath" type="java.io.File" documented="true">
        <description>
     * The path where the archive is constructed. The path is simply the {@code destinationDir} plus the {@code archiveName}.
     *
     * @return a File object with the path to the archive
     </description>
    </property>
    <property name="baseName" type="java.lang.String" documented="true">
        <description>
     * Returns the base name of the archive.
     *
     * @return the base name.
     </description>
    </property>
    <property name="classifier" type="java.lang.String" documented="true">
        <description>
     * Returns the classifier part of the archive name, if any.
     *
     * @return The classifier. May be null.
     </description>
    </property>
    <property name="destinationDir" type="java.io.File" documented="true">
        <description>
     * Returns the directory where the archive is generated into.
     *
     * @return the directory
     </description>
    </property>
    <property name="extension" type="java.lang.String" documented="true">
        <description>
     * Returns the extension part of the archive name.
     </description>
    </property>
    <property name="version" type="java.lang.String" documented="true">
        <description>
     * Returns the version part of the archive name, if any.
     *
     * @return the version. May be null.
     </description>
    </property>
</type>
