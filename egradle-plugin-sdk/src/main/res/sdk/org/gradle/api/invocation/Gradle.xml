<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.invocation.Gradle" version="3.0" documented="true">
    <description>
 * Represents an invocation of Gradle.
 *
 * &lt;p&gt;You can obtain a {@code Gradle} instance by calling {@link Project#getGradle()}.&lt;/p&gt;
 </description>
    <method name="addBuildListener" returnType="void" documented="true">
        <description>
     * Adds a {@link BuildListener} to this Build instance.
     *
     * The listener is notified of events which occur during the execution of the build.
     *
     * @param buildListener The listener to add.
     </description>
        <parameter type="org.gradle.BuildListener" name="buildListener"/>
    </method>
    <method name="addListener" returnType="void" documented="true">
        <description>
     * Adds the given listener to this build. The listener may implement any of the given listener interfaces:
     *
     * &lt;ul&gt;
     * &lt;li&gt;{@link org.gradle.BuildListener}
     * &lt;li&gt;{@link org.gradle.api.execution.TaskExecutionGraphListener}
     * &lt;li&gt;{@link org.gradle.api.ProjectEvaluationListener}
     * &lt;li&gt;{@link org.gradle.api.execution.TaskExecutionListener}
     * &lt;li&gt;{@link org.gradle.api.execution.TaskActionListener}
     * &lt;li&gt;{@link org.gradle.api.logging.StandardOutputListener}
     * &lt;li&gt;{@link org.gradle.api.tasks.testing.TestListener}
     * &lt;li&gt;{@link org.gradle.api.tasks.testing.TestOutputListener}
     * &lt;li&gt;{@link org.gradle.api.artifacts.DependencyResolutionListener}
     * &lt;/ul&gt;
     *
     * @param listener The listener to add. Does nothing if this listener has already been added.
     </description>
        <parameter type="java.lang.Object" name="listener"/>
    </method>
    <method name="addProjectEvaluationListener" returnType="org.gradle.api.ProjectEvaluationListener" documented="true">
        <description>
     * Adds a listener to this build, to receive notifications as projects are evaluated.
     *
     * @param listener The listener to add. Does nothing if this listener has already been added.
     * @return The added listener.
     </description>
        <parameter type="org.gradle.api.ProjectEvaluationListener" name="listener"/>
    </method>
    <method name="afterProject" returnType="void" documented="true">
        <description>
     * Adds a closure to be called immediately after a project is evaluated.
     *
     * The project is passed to the closure as the first parameter. The project evaluation failure, if any,
     * is passed as the second parameter. Both parameters are optional.
     *
     * @param closure The closure to execute.
     </description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="allprojects" returnType="void" documented="true">
        <description>
     * Adds an action to execute against all projects of this build.
     *
     * The action is executed immediately against all projects which are
     * already available. It is also executed as subsequent projects are added to this build.
     *
     * @param action The action to execute.
     </description>
        <parameter type="org.gradle.api.Action" name="action"/>
    </method>
    <method name="beforeProject" returnType="void" documented="true">
        <description>
     * Adds a closure to be called immediately before a project is evaluated. The project is passed to the closure as a
     * parameter.
     *
     * @param closure The closure to execute.
     </description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="buildFinished" returnType="void" documented="true">
        <description>
     * Adds a closure to be called when the build is completed.
     *
     * All selected tasks have been executed.
     * A {@link org.gradle.BuildResult} instance is passed to the closure as a parameter.
     *
     * @param closure The closure to execute.
     </description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="buildStarted" returnType="void">
        <description>
     * Adds a closure to be called when the build is started.
     *
     * This {@code Gradle} instance is passed to the closure as the first parameter.
     *
     * @param closure The closure to execute.
     </description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="getGradle" returnType="org.gradle.api.invocation.Gradle">
        <description>
     * Returns this {@code Gradle} instance.
     *
     * This method is useful in init scripts to explicitly access Gradle
     * properties and methods. For example, using &lt;code&gt;gradle.parent&lt;/code&gt; can express your intent better than using
     * &lt;code&gt;parent&lt;/code&gt;. This property also allows you to access Gradle properties from a scope where the property
     * may be hidden, such as, for example, from a method or closure.
     *
     * @return this. Never returns null.
     </description>
    </method>
    <method name="getGradleHomeDir" returnType="java.io.File">
        <description>
     * Returns the Gradle home directory, if any.
     *
     * This directory is the directory containing the Gradle distribution executing this build.
     * &lt;p&gt;
     * When using the “Gradle Daemon”, this may not be the same Gradle distribution that the build was started with.
     * If an existing daemon process is running that is deemed compatible (e.g. has the desired JVM characteristics)
     * then this daemon may be used instead of starting a new process and it may have been started from a different “gradle home”.
     * However, it is guaranteed to be the same version of Gradle. For more information on the Gradle Daemon, please consult
     * &lt;a href="http://docs.gradle.org/current/userguide/gradle_daemon.html"&gt;the user guide&lt;/a&gt;.
     *
     * @return The home directory. May return null.
     </description>
    </method>
    <method name="getGradleUserHomeDir" returnType="java.io.File">
        <description>
     * Returns the Gradle user home directory.
     *
     * This directory is used to cache downloaded resources, compiled build scripts and so on.
     *
     * @return The user home directory. Never returns null.
     </description>
    </method>
    <method name="getGradleVersion" returnType="java.lang.String">
        <description>
     * Returns the current Gradle version.
     *
     * @return The Gradle version. Never returns null.
     </description>
    </method>
    <method name="getParent" returnType="org.gradle.api.invocation.Gradle">
        <description>
     * Returns the parent build of this build, if any.
     *
     * @return The parent build. May return null.
     </description>
    </method>
    <method name="getRootProject" returnType="org.gradle.api.Project">
        <description>
     * Returns the root project of this build.
     *
     * @return The root project. Never returns null.
     * @throws IllegalStateException When called before the root project is available.
     </description>
    </method>
    <method name="getStartParameter" returnType="org.gradle.StartParameter">
        <description>
     * Returns the {@link StartParameter} used to start this build.
     *
     * @return The start parameter. Never returns null.
     </description>
    </method>
    <method name="getTaskGraph" returnType="org.gradle.api.execution.TaskExecutionGraph">
        <description>
     * Returns the {@link TaskExecutionGraph} for this build.
     *
     * @return The task graph. Never returns null.
     </description>
    </method>
    <method name="projectsEvaluated" returnType="void" documented="true">
        <description>
     * Adds a closure to be called when all projects for the build have been evaluated.
     *
     * The project objects are fully configured and are ready to use to populate the task graph.
     * This {@code Gradle} instance is passed to the closure as a parameter.
     *
     * @param closure The closure to execute.
     </description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="projectsLoaded" returnType="void" documented="true">
        <description>
     * Adds a closure to be called when the projects for the build have been created from the settings.
     *
     * None of the projects have been evaluated. This {@code Gradle} instance is passed to the closure as a parameter.
     * &lt;p&gt;
     * An example of hooking into the projectsLoaded to configure buildscript classpath from the init script.
     * &lt;pre autoTested=''&gt;
     * //init.gradle
     * gradle.projectsLoaded {
     *   rootProject.buildscript {
     *     repositories {
     *       //...
     *     }
     *     dependencies {
     *       //...
     *     }
     *   }
     * }
     * &lt;/pre&gt;
     *
     * @param closure The closure to execute.
     </description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="removeListener" returnType="void" documented="true">
        <description>
     * Removes the given listener from this build.
     *
     * @param listener The listener to remove. Does nothing if this listener has not been added.
     </description>
        <parameter type="java.lang.Object" name="listener"/>
    </method>
    <method name="removeProjectEvaluationListener" returnType="void" documented="true">
        <description>
     * Removes the given listener from this build.
     *
     * @param listener The listener to remove. Does nothing if this listener has not been added.
     </description>
        <parameter type="org.gradle.api.ProjectEvaluationListener" name="listener"/>
    </method>
    <method name="rootProject" returnType="void" documented="true">
        <description>
     * Adds an action to execute against the root project of this build.
     *
     * If the root project is already available, the action
     * is executed immediately. Otherwise, the action is executed when the root project becomes available.
     *
     * @param action The action to execute.
     </description>
        <parameter type="org.gradle.api.Action" name="action"/>
    </method>
    <method name="settingsEvaluated" returnType="void" documented="true">
        <description>
     * Adds a closure to be called when the build settings have been loaded and evaluated.
     *
     * The settings object is fully configured and is ready to use to load the build projects. The
     * {@link org.gradle.api.initialization.Settings} object is passed to the closure as a parameter.
     *
     * @param closure The closure to execute.
     </description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="useLogger" returnType="void" documented="true">
        <description>
     * Uses the given object as a logger.
     *
     * The logger object may implement any of the listener interfaces supported by
     * {@link #addListener(Object)}.
     * &lt;p&gt;
     * Each listener interface has exactly one associated logger. When you call this
     * method with a logger of a given listener type, the new logger will replace whichever logger is currently
     * associated with the listener type. This allows you to selectively replace the standard logging which Gradle
     * provides with your own implementation, for certain types of events.
     *
     * @param logger The logger to use.
     </description>
        <parameter type="java.lang.Object" name="logger"/>
    </method>
    <interface name="org.gradle.api.plugins.PluginAware"/>
    <property name="gradle" type="org.gradle.api.invocation.Gradle" documented="true">
        <description>
     * Returns this {@code Gradle} instance.
     *
     * This method is useful in init scripts to explicitly access Gradle
     * properties and methods. For example, using &lt;code&gt;gradle.parent&lt;/code&gt; can express your intent better than using
     * &lt;code&gt;parent&lt;/code&gt;. This property also allows you to access Gradle properties from a scope where the property
     * may be hidden, such as, for example, from a method or closure.
     *
     * @return this. Never returns null.
     </description>
    </property>
    <property name="gradleHomeDir" type="java.io.File" documented="true">
        <description>
     * Returns the Gradle home directory, if any.
     *
     * This directory is the directory containing the Gradle distribution executing this build.
     * &lt;p&gt;
     * When using the “Gradle Daemon”, this may not be the same Gradle distribution that the build was started with.
     * If an existing daemon process is running that is deemed compatible (e.g. has the desired JVM characteristics)
     * then this daemon may be used instead of starting a new process and it may have been started from a different “gradle home”.
     * However, it is guaranteed to be the same version of Gradle. For more information on the Gradle Daemon, please consult
     * &lt;a href="http://docs.gradle.org/current/userguide/gradle_daemon.html"&gt;the user guide&lt;/a&gt;.
     *
     * @return The home directory. May return null.
     </description>
    </property>
    <property name="gradleUserHomeDir" type="java.io.File" documented="true">
        <description>
     * Returns the Gradle user home directory.
     *
     * This directory is used to cache downloaded resources, compiled build scripts and so on.
     *
     * @return The user home directory. Never returns null.
     </description>
    </property>
    <property name="gradleVersion" type="java.lang.String" documented="true">
        <description>
     * Returns the current Gradle version.
     *
     * @return The Gradle version. Never returns null.
     </description>
    </property>
    <property name="parent" type="org.gradle.api.invocation.Gradle" documented="true">
        <description>
     * Returns the parent build of this build, if any.
     *
     * @return The parent build. May return null.
     </description>
    </property>
    <property name="rootProject" type="org.gradle.api.Project" documented="true">
        <description>
     * Returns the root project of this build.
     *
     * @return The root project. Never returns null.
     * @throws IllegalStateException When called before the root project is available.
     </description>
    </property>
    <property name="startParameter" type="org.gradle.StartParameter" documented="true">
        <description>
     * Returns the {@link StartParameter} used to start this build.
     *
     * @return The start parameter. Never returns null.
     </description>
    </property>
    <property name="taskGraph" type="org.gradle.api.execution.TaskExecutionGraph" documented="true">
        <description>
     * Returns the {@link TaskExecutionGraph} for this build.
     *
     * @return The task graph. Never returns null.
     </description>
    </property>
    <property name="tingsEvaluated" type="groovy.lang.Closure">
        <description>
     * Adds a closure to be called when the build settings have been loaded and evaluated.
     *
     * The settings object is fully configured and is ready to use to load the build projects. The
     * {@link org.gradle.api.initialization.Settings} object is passed to the closure as a parameter.
     *
     * @param closure The closure to execute.
     </description>
    </property>
</type>
