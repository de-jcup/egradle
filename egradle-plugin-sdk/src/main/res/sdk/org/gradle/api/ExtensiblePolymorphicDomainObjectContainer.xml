<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.ExtensiblePolymorphicDomainObjectContainer" version="3.0">
    <description>
 * A {@link org.gradle.api.PolymorphicDomainObjectContainer} that can be extended at runtime to
 * create elements of new types.
 *
 * @param &lt;T&gt; the (base) container element type
 </description>
    <method name="registerBinding" returnType="void">
        <description>
     * Registers a binding from the specified "public" domain object type to the specified implementation type.
     * Whenever the container is asked to create an element with the binding's public type, it will instantiate
     * the binding's implementation type. If the implementation type has a constructor annotated with
     * {@link javax.inject.Inject}, its arguments will be injected.
     *
     * &lt;p&gt;In general, registering a binding is preferable over implementing and registering a factory.
     *
     * @param type a public domain object type
     * @param implementationType the corresponding implementation type
     * @param &lt;U&gt; a public domain object type
     </description>
        <parameter type="java.lang.Class" name="type"/>
        <parameter type="java.lang.Class" name="implementationType"/>
    </method>
    <method name="registerFactory" returnType="void">
        <description>
     * Registers a factory for creating elements of the specified type.
     * Typically, the specified type is an interface type.
     *
     * @param type the type of objects created by the factory
     * @param factory the factory to register
     * @param &lt;U&gt; the type of objects created by the factory
     *
     * @throws IllegalArgumentException if the specified type is not a subtype of the container element type
     </description>
        <parameter type="java.lang.Class" name="type"/>
        <parameter type="groovy.lang.Closure" name="factory"/>
    </method>
    <method name="registerFactory" returnType="void">
        <description>
     * Registers a factory for creating elements of the specified type. Typically, the specified type
     * is an interface type.
     *
     * @param type the type of objects created by the factory
     * @param factory the factory to register
     * @param &lt;U&gt; the type of objects created by the factory
     *
     * @throws IllegalArgumentException if the specified type is not a subtype of the container element type
     </description>
        <parameter type="java.lang.Class" name="type"/>
        <parameter type="org.gradle.api.NamedDomainObjectFactory" name="factory"/>
    </method>
    <interface name="org.gradle.api.PolymorphicDomainObjectContainer"/>
    <interface name="org.gradle.api.internal.rules.NamedDomainObjectFactoryRegistry"/>
</type>
