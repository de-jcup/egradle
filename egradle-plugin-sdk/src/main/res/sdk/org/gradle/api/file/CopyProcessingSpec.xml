<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.file.CopyProcessingSpec" version="3.0">
    <description>
 * Specifies the destination of a copy.
 </description>
    <method name="eachFile" returnType="org.gradle.api.file.CopyProcessingSpec">
        <description>
     * Adds an action to be applied to each file as it about to be copied into its destination. The given closure is
     * called with a {@link org.gradle.api.file.FileCopyDetails} as its parameter. Actions are executed in the order
     * added, and are inherited from the parent spec.
     *
     * @param closure The action to execute.
     * @return this
     </description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="eachFile" returnType="org.gradle.api.file.CopyProcessingSpec">
        <description>
     * Adds an action to be applied to each file as it is about to be copied into its destination. The action can change
     * the destination path of the file, filter the contents of the file, or exclude the file from the result entirely.
     * Actions are executed in the order added, and are inherited from the parent spec.
     *
     * @param action The action to execute.
     * @return this
     </description>
        <parameter type="org.gradle.api.Action" name="action"/>
    </method>
    <method name="getDirMode" returnType="java.lang.Integer">
        <description>
     * Returns the Unix permissions to use for the target directories. {@code null} means that existing
     * permissions are preserved. It is dependent on the copy action implementation whether these permissions
     * will actually be applied.
     *
     * @return The directory permissions, or {@code null} if existing permissions should be preserved.
     </description>
    </method>
    <method name="getFileMode" returnType="java.lang.Integer">
        <description>
     * Returns the Unix permissions to use for the target files. {@code null} means that existing
     * permissions are preserved. It is dependent on the copy action implementation whether these permissions
     * will actually be applied.
     *
     * @return The file permissions, or {@code null} if existing permissions should be preserved.
     </description>
    </method>
    <method name="into" returnType="org.gradle.api.file.CopyProcessingSpec">
        <description>
     * Specifies the destination directory for a copy. The destination is evaluated as per {@link
     * org.gradle.api.Project#file(Object)}.
     *
     * @param destPath Path to the destination directory for a Copy
     * @return this
     </description>
        <parameter type="java.lang.Object" name="destPath"/>
    </method>
    <method name="rename" returnType="org.gradle.api.file.CopyProcessingSpec">
        <description>
     * Renames a source file. The closure will be called with a single parameter, the name of the file.
     * The closure should return a String object with a new target name. The closure may return null,
     * in which case the original name will be used.
     *
     * @param closure rename closure
     * @return this
     </description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="rename" returnType="org.gradle.api.file.CopyProcessingSpec">
        <description>
     * Renames a source file. The function will be called with a single parameter, the name of the file.
     * The function should return a new target name. The function may return null,
     * in which case the original name will be used.
     *
     * @param renamer rename function
     * @return this
     </description>
        <parameter type="org.gradle.api.Transformer" name="renamer"/>
    </method>
    <method name="rename" returnType="org.gradle.api.file.CopyProcessingSpec">
        <description>
     * Renames files based on a regular expression.  Uses java.util.regex type of regular expressions.  Note that the
     * replace string should use the '$1' syntax to refer to capture groups in the source regular expression.  Files
     * that do not match the source regular expression will be copied with the original name.
     *
     * &lt;p&gt; Example:
     * &lt;pre&gt;
     * rename '(.*)_OEM_BLUE_(.*)', '$1$2'
     * &lt;/pre&gt;
     * would map the file 'style_OEM_BLUE_.css' to 'style.css'
     *
     * @param sourceRegEx Source regular expression
     * @param replaceWith Replacement string (use $ syntax for capture groups)
     * @return this
     </description>
        <parameter type="java.lang.String" name="sourceRegEx"/>
        <parameter type="java.lang.String" name="replaceWith"/>
    </method>
    <method name="rename" returnType="org.gradle.api.file.CopyProcessingSpec">
        <description>
     * Renames files based on a regular expression. See {@link #rename(String, String)}.
     *
     * @param sourceRegEx Source regular expression
     * @param replaceWith Replacement string (use $ syntax for capture groups)
     * @return this
     </description>
        <parameter type="java.util.regex.Pattern" name="sourceRegEx"/>
        <parameter type="java.lang.String" name="replaceWith"/>
    </method>
    <method name="setDirMode" returnType="org.gradle.api.file.CopyProcessingSpec">
        <description>
     * Sets the Unix permissions to use for the target directories. {@code null} means that existing
     * permissions are preserved. It is dependent on the copy action implementation whether these permissions
     * will actually be applied.
     *
     * @param mode The directory permissions.
     * @return this
     </description>
        <parameter type="java.lang.Integer" name="mode"/>
    </method>
    <method name="setFileMode" returnType="org.gradle.api.file.CopyProcessingSpec">
        <description>
     * Sets the Unix permissions to use for the target files. {@code null} means that existing
     * permissions are preserved. It is dependent on the copy action implementation whether these permissions
     * will actually be applied.
     *
     * @param mode The file permissions.
     * @return this
     </description>
        <parameter type="java.lang.Integer" name="mode"/>
    </method>
    <interface name="org.gradle.api.file.ContentFilterable"/>
    <property name="dirMode" type="java.lang.Integer">
        <description>
     * Returns the Unix permissions to use for the target directories. {@code null} means that existing
     * permissions are preserved. It is dependent on the copy action implementation whether these permissions
     * will actually be applied.
     *
     * @return The directory permissions, or {@code null} if existing permissions should be preserved.
     </description>
    </property>
    <property name="fileMode" type="java.lang.Integer">
        <description>
     * Returns the Unix permissions to use for the target files. {@code null} means that existing
     * permissions are preserved. It is dependent on the copy action implementation whether these permissions
     * will actually be applied.
     *
     * @return The file permissions, or {@code null} if existing permissions should be preserved.
     </description>
    </property>
</type>
