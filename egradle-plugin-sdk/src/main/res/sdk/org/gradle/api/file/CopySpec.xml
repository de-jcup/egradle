<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.file.CopySpec" version="3.0">
    <description>
 * A set of specifications for copying files.  This includes:
 *
 * &lt;ul&gt;
 *
 * &lt;li&gt;source directories (multiples allowed)
 *
 * &lt;li&gt;destination directory
 *
 * &lt;li&gt;ANT like include patterns
 *
 * &lt;li&gt;ANT like exclude patterns
 *
 * &lt;li&gt;File relocating rules
 *
 * &lt;li&gt;renaming rules
 *
 * &lt;li&gt;content filters
 *
 * &lt;/ul&gt;
 *
 * CopySpecs may be nested by passing a closure to one of the from methods.  The closure creates a child CopySpec and
 * delegates methods in the closure to the child. Child CopySpecs inherit any values specified in the parent. This
 * allows constructs like:
 * &lt;pre autoTested=''&gt;
 * def myCopySpec = project.copySpec {
 *   into('webroot')
 *   exclude('**&amp;#47;.data/**')
 *   from('src/main/webapp') {
 *     include '**&amp;#47;*.jsp'
 *   }
 *   from('src/main/js') {
 *     include '**&amp;#47;*.js'
 *   }
 * }
 * &lt;/pre&gt;
 *
 * In this example, the &lt;code&gt;into&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; specifications at the root level are inherited by the
 * two child CopySpecs.
 *
 * Copy specs can be reused in other copy specs via {@link #with(CopySpec...)} method. This enables reuse of the copy spec instances.
 *
 * &lt;pre autoTested=''&gt;
 * def contentSpec = copySpec {
 *   from("content") {
 *     include "**&amp;#47;*.txt"
 *   }
 * }
 *
 * task copy(type: Copy) {
 *   into "$buildDir/copy"
 *   with contentSpec
 * }
 * &lt;/pre&gt;
 *
 * @see org.gradle.api.tasks.Copy Copy Task
 * @see org.gradle.api.Project#copy(groovy.lang.Closure) Project.copy()
 </description>
    <method name="eachFile" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     </description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="eachFile" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     </description>
        <parameter type="org.gradle.api.Action" name="action"/>
    </method>
    <method name="exclude" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     *
     * @see org.gradle.api.tasks.util.PatternFilterable Pattern Format
     </description>
        <parameter type="groovy.lang.Closure" name="excludeSpec"/>
    </method>
    <method name="exclude" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     *
     * @see org.gradle.api.tasks.util.PatternFilterable Pattern Format
     </description>
        <parameter type="java.lang.Iterable" name="excludes"/>
    </method>
    <method name="exclude" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     *
     * @see org.gradle.api.tasks.util.PatternFilterable Pattern Format
     </description>
        <parameter type="java.lang.String" name="excludes"/>
    </method>
    <method name="exclude" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     *
     * @see org.gradle.api.tasks.util.PatternFilterable Pattern Format
     </description>
        <parameter type="org.gradle.api.specs.Spec" name="excludeSpec"/>
    </method>
    <method name="expand" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     </description>
        <parameter type="java.util.Map" name="properties"/>
    </method>
    <method name="filesMatching" returnType="org.gradle.api.file.CopySpec">
        <description>
     * Configure the {@link org.gradle.api.file.FileCopyDetails} for each file whose path matches the specified Ant-style pattern.
     * This is equivalent to using eachFile() and selectively applying a configuration based on the file's path.
     *
     * @param pattern Ant-style pattern used to match against files' relative paths
     * @param action action called for the FileCopyDetails of each file matching pattern
     * @return this
     </description>
        <parameter type="java.lang.String" name="pattern"/>
        <parameter type="org.gradle.api.Action" name="action"/>
    </method>
    <method name="filesNotMatching" returnType="org.gradle.api.file.CopySpec">
        <description>
     * Configure the {@link org.gradle.api.file.FileCopyDetails} for each file whose path does not match the specified
     * Ant-style pattern. This is equivalent to using eachFile() and selectively applying a configuration based on the
     * file's path.
     *
     * @param pattern Ant-style pattern used to match against files' relative paths
     * @param action action called for the FileCopyDetails of each file that does not match pattern
     * @return this
     </description>
        <parameter type="java.lang.String" name="pattern"/>
        <parameter type="org.gradle.api.Action" name="action"/>
    </method>
    <method name="filter" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     </description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="filter" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     </description>
        <parameter type="java.lang.Class" name="filterType"/>
    </method>
    <method name="filter" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     * @param transformer
     </description>
        <parameter type="org.gradle.api.Transformer" name="transformer"/>
    </method>
    <method name="filter" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     </description>
        <parameter type="java.util.Map" name="properties"/>
        <parameter type="java.lang.Class" name="filterType"/>
    </method>
    <method name="from" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     </description>
        <parameter type="java.lang.Object" name="sourcePaths"/>
    </method>
    <method name="from" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     </description>
        <parameter type="java.lang.Object" name="sourcePath"/>
        <parameter type="groovy.lang.Closure" name="c"/>
    </method>
    <method name="from" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     </description>
        <parameter type="java.lang.Object" name="sourcePath"/>
        <parameter type="org.gradle.api.Action" name="configureAction"/>
    </method>
    <method name="getDuplicatesStrategy" returnType="org.gradle.api.file.DuplicatesStrategy">
        <description>
     * Returns the strategy to use when trying to copy more than one file to the same destination.
     * &lt;p&gt;
     * The value can be set with a case insensitive string of the enum value (e.g. {@code 'exclude'} for {@link DuplicatesStrategy#EXCLUDE}).
     * &lt;p&gt;
     * This strategy can be overridden for individual files by using {@link #eachFile(org.gradle.api.Action)} or {@link #filesMatching(String, org.gradle.api.Action)}.
     *
     * @return the strategy to use for files included by this copy spec.
     * @see DuplicatesStrategy
     </description>
    </method>
    <method name="getFilteringCharset" returnType="java.lang.String">
        <description>
     * Gets the charset used to read and write files when filtering.
     * By default, the JVM default charset is used.
     *
     * @return the charset used to read and write files when filtering
     * @since 2.14
     </description>
    </method>
    <method name="getIncludeEmptyDirs" returnType="boolean">
        <description>
     * Tells if empty target directories will be included in the copy.
     *
     * @return &lt;tt&gt;true&lt;/tt&gt; if empty target directories will be included in the copy, &lt;tt&gt;false&lt;/tt&gt; otherwise
     </description>
    </method>
    <method name="include" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     *
     * @see org.gradle.api.tasks.util.PatternFilterable Pattern Format
     </description>
        <parameter type="groovy.lang.Closure" name="includeSpec"/>
    </method>
    <method name="include" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     *
     * @see org.gradle.api.tasks.util.PatternFilterable Pattern Format
     </description>
        <parameter type="java.lang.Iterable" name="includes"/>
    </method>
    <method name="include" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     *
     * @see org.gradle.api.tasks.util.PatternFilterable Pattern Format
     </description>
        <parameter type="java.lang.String" name="includes"/>
    </method>
    <method name="include" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     *
     * @see org.gradle.api.tasks.util.PatternFilterable Pattern Format
     </description>
        <parameter type="org.gradle.api.specs.Spec" name="includeSpec"/>
    </method>
    <method name="into" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     </description>
        <parameter type="java.lang.Object" name="destPath"/>
    </method>
    <method name="into" returnType="org.gradle.api.file.CopySpec">
        <description>
     * Creates and configures a child {@code CopySpec} with the given destination path.
     * The destination is evaluated as per {@link org.gradle.api.Project#file(Object)}.
     *
     * @param destPath Path to the destination directory for a Copy
     * @param configureClosure The closure to use to configure the child {@code CopySpec}.
     * @return this
     </description>
        <parameter type="java.lang.Object" name="destPath"/>
        <parameter type="groovy.lang.Closure" name="configureClosure"/>
    </method>
    <method name="into" returnType="org.gradle.api.file.CopySpec">
        <description>
     * Creates and configures a child {@code CopySpec} with the given destination path.
     * The destination is evaluated as per {@link org.gradle.api.Project#file(Object)}.
     *
     * @param destPath Path to the destination directory for a Copy
     * @param copySpec The action to use to configure the child {@code CopySpec}.
     * @return this
     </description>
        <parameter type="java.lang.Object" name="destPath"/>
        <parameter type="org.gradle.api.Action" name="copySpec"/>
    </method>
    <method name="isCaseSensitive" returnType="boolean">
        <description>
     * Specifies whether case-sensitive pattern matching should be used.
     *
     * @return true for case-sensitive matching.
     </description>
    </method>
    <method name="rename" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     </description>
        <parameter type="groovy.lang.Closure" name="closure"/>
    </method>
    <method name="rename" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     </description>
        <parameter type="org.gradle.api.Transformer" name="renamer"/>
    </method>
    <method name="rename" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     </description>
        <parameter type="java.lang.String" name="sourceRegEx"/>
        <parameter type="java.lang.String" name="replaceWith"/>
    </method>
    <method name="rename" returnType="org.gradle.api.file.CopyProcessingSpec">
        <description>
     * {@inheritDoc}
     </description>
        <parameter type="java.util.regex.Pattern" name="sourceRegEx"/>
        <parameter type="java.lang.String" name="replaceWith"/>
    </method>
    <method name="setCaseSensitive" returnType="void">
        <description>
     * Specifies whether case-sensitive pattern matching should be used for this CopySpec.
     *
     * @param caseSensitive true for case-sensitive matching.
     </description>
        <parameter type="boolean" name="caseSensitive"/>
    </method>
    <method name="setDuplicatesStrategy" returnType="void">
        <description>
     * The strategy to use when trying to copy more than one file to the same destination. Set to {@code null} to use the default strategy, which is inherited
     * from the parent copy spec, if any, or {@link DuplicatesStrategy#INCLUDE} if this copy spec has no parent.
     </description>
        <parameter type="org.gradle.api.file.DuplicatesStrategy" name="strategy"/>
    </method>
    <method name="setExcludes" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     *
     * @see org.gradle.api.tasks.util.PatternFilterable Pattern Format
     </description>
        <parameter type="java.lang.Iterable" name="excludes"/>
    </method>
    <method name="setFilteringCharset" returnType="void">
        <description>
     * Specifies the charset used to read and write files when filtering.
     *
     * @param charset the name of the charset to use when filtering files
     * @since 2.14
     </description>
        <parameter type="java.lang.String" name="charset"/>
    </method>
    <method name="setIncludeEmptyDirs" returnType="void">
        <description>
     * Controls if empty target directories should be included in the copy.
     *
     * @param includeEmptyDirs &lt;tt&gt;true&lt;/tt&gt; if empty target directories should be included in the copy, &lt;tt&gt;false&lt;/tt&gt; otherwise
     </description>
        <parameter type="boolean" name="includeEmptyDirs"/>
    </method>
    <method name="setIncludes" returnType="org.gradle.api.file.CopySpec">
        <description>
     * {@inheritDoc}
     *
     * @see org.gradle.api.tasks.util.PatternFilterable Pattern Format
     </description>
        <parameter type="java.lang.Iterable" name="includes"/>
    </method>
    <method name="with" returnType="org.gradle.api.file.CopySpec">
        <description>
     * Adds the given specs as a child of this spec.
     *
     * &lt;pre autoTested=''&gt;
     * def contentSpec = copySpec {
     *   from("content") {
     *     include "**&amp;#47;*.txt"
     *   }
     * }
     *
     * task copy(type: Copy) {
     *   into "$buildDir/copy"
     *   with contentSpec
     * }
     * &lt;/pre&gt;
     *
     * @param sourceSpecs The specs to add
     * @return this
     </description>
        <parameter type="org.gradle.api.file.CopySpec" name="sourceSpecs"/>
    </method>
    <interface name="org.gradle.api.file.CopyProcessingSpec"/>
    <interface name="org.gradle.api.file.CopySourceSpec"/>
    <interface name="org.gradle.api.tasks.util.PatternFilterable"/>
    <property name="caseSensitive" type="boolean">
        <description>
     * Specifies whether case-sensitive pattern matching should be used.
     *
     * @return true for case-sensitive matching.
     </description>
    </property>
    <property name="duplicatesStrategy" type="org.gradle.api.file.DuplicatesStrategy">
        <description>
     * Returns the strategy to use when trying to copy more than one file to the same destination.
     * &lt;p&gt;
     * The value can be set with a case insensitive string of the enum value (e.g. {@code 'exclude'} for {@link DuplicatesStrategy#EXCLUDE}).
     * &lt;p&gt;
     * This strategy can be overridden for individual files by using {@link #eachFile(org.gradle.api.Action)} or {@link #filesMatching(String, org.gradle.api.Action)}.
     *
     * @return the strategy to use for files included by this copy spec.
     * @see DuplicatesStrategy
     </description>
    </property>
    <property name="excludes" type="java.lang.Iterable">
        <description>
     * {@inheritDoc}
     *
     * @see org.gradle.api.tasks.util.PatternFilterable Pattern Format
     </description>
    </property>
    <property name="filteringCharset" type="java.lang.String">
        <description>
     * Gets the charset used to read and write files when filtering.
     * By default, the JVM default charset is used.
     *
     * @return the charset used to read and write files when filtering
     * @since 2.14
     </description>
    </property>
    <property name="includeEmptyDirs" type="boolean">
        <description>
     * Tells if empty target directories will be included in the copy.
     *
     * @return &lt;tt&gt;true&lt;/tt&gt; if empty target directories will be included in the copy, &lt;tt&gt;false&lt;/tt&gt; otherwise
     </description>
    </property>
    <property name="includes" type="java.lang.Iterable">
        <description>
     * {@inheritDoc}
     *
     * @see org.gradle.api.tasks.util.PatternFilterable Pattern Format
     </description>
    </property>
</type>
