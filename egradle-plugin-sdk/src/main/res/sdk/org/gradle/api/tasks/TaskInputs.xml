<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.tasks.TaskInputs" version="3.0">
    <description>
 * &lt;p&gt;A {@code TaskInputs} represents the inputs for a task.&lt;/p&gt;
 *
 * &lt;p&gt;You can obtain a {@code TaskInputs} instance using {@link org.gradle.api.Task#getInputs()}.&lt;/p&gt;
 </description>
    <method name="dir" returnType="org.gradle.api.tasks.TaskInputFilePropertyBuilder">
        <description>
     * Registers an input directory hierarchy. All files found under the given directory are treated as input files for
     * this task.
     *
     * @param dirPath The directory. The path is evaluated as per {@link org.gradle.api.Project#file(Object)}.
     * @return a property builder to further configure the property.
     </description>
        <parameter type="java.lang.Object" name="dirPath"/>
    </method>
    <method name="file" returnType="org.gradle.api.tasks.TaskInputFilePropertyBuilder">
        <description>
     * Registers some input file for this task.
     *
     * @param path The input file. The given path is evaluated as per {@link org.gradle.api.Project#files(Object...)}.
     * @return a property builder to further configure the property.
     </description>
        <parameter type="java.lang.Object" name="path"/>
    </method>
    <method name="files" returnType="org.gradle.api.tasks.TaskInputFilePropertyBuilder">
        <description>
     * Registers some input files for this task.
     *
     * @param paths The input files. The given paths are evaluated as per {@link org.gradle.api.Project#files(Object...)}.
     * @return a property builder to further configure the property.
     </description>
        <parameter type="java.lang.Object" name="paths"/>
    </method>
    <method name="getFiles" returnType="org.gradle.api.file.FileCollection">
        <description>
     * Returns the input files of this task.
     *
     * @return The input files. Returns an empty collection if this task has no input files.
     </description>
    </method>
    <method name="getHasInputs" returnType="boolean">
        <description>
     * Returns true if this task has declared the inputs that it consumes.
     *
     * @return true if this task has declared any inputs.
     </description>
    </method>
    <method name="getHasSourceFiles" returnType="boolean">
        <description>
     * Returns true if this task has declared that it accepts source files.
     *
     * @return true if this task has source files, false if not.
     </description>
    </method>
    <method name="getProperties" returnType="java.util.Map">
        <description>
     * Returns the set of input properties for this task.
     *
     * @return The properties.
     </description>
    </method>
    <method name="getSourceFiles" returnType="org.gradle.api.file.FileCollection">
        <description>
     * Returns the set of source files for this task. These are the subset of input files which the task actually does work on.
     * A task is skipped if it has declared it accepts source files, and this collection is empty.
     *
     * @return The set of source files for this task.
     </description>
    </method>
    <method name="properties" returnType="org.gradle.api.tasks.TaskInputs">
        <description>
     * Registers a set of input properties for this task. See {@link #property(String, Object)} for details.
     *
     * @param properties The properties.
     </description>
        <parameter type="java.util.Map" name="properties"/>
    </method>
    <method name="property" returnType="org.gradle.api.tasks.TaskInputs">
        <description>
     * &lt;p&gt;Registers an input property for this task. This value is persisted when the task executes, and is compared
     * against the property value for later invocations of the task, to determine if the task is up-to-date.&lt;/p&gt;
     *
     * &lt;p&gt;The given value for the property must be Serializable, so that it can be persisted. It should also provide a
     * useful {@code equals()} method.&lt;/p&gt;
     *
     * &lt;p&gt;You can specify a closure or {@code Callable} as the value of the property. In which case, the closure or
     * {@code Callable} is executed to determine the actual property value.&lt;/p&gt;
     *
     * @param name The name of the property. Must not be null.
     * @param value The value for the property. Can be null.
     </description>
        <parameter type="java.lang.String" name="name"/>
        <parameter type="java.lang.Object" name="value"/>
    </method>
    <method name="source" returnType="org.gradle.api.tasks.TaskInputs">
        <description>
     * Registers some source files for this task. Note that source files are also considered input files, so calling this method implies
     * a call to {@link #files(Object...)}.
     *
     * @param path The path. This is evaluated as per {@link org.gradle.api.Project#files(Object...)}.
     * @return this
     *
     * @deprecated Use {@link #file(Object)} instead and set {@code skipWhenEmpty} to {@code true}.
     </description>
        <parameter type="java.lang.Object" name="path"/>
    </method>
    <method name="sourceDir" returnType="org.gradle.api.tasks.TaskInputs">
        <description>
     * Registers a source directory for this task. All files under this directory are treated as source files for this task. Note that
     * source files are also considered input files, so calling this method implies a call to {@link #dir(Object)}.
     *
     * @param path The path. This is evaluated as per {@link org.gradle.api.Project#file(Object)}.
     * @return this
     *
     * @deprecated Use {@link #dir(Object)} instead and set {@code skipWhenEmpty} to {@code true}.
     </description>
        <parameter type="java.lang.Object" name="path"/>
    </method>
    <interface name="org.gradle.api.tasks.CompatibilityAdapterForTaskInputs"/>
    <property name="files" type="org.gradle.api.file.FileCollection">
        <description>
     * Returns the input files of this task.
     *
     * @return The input files. Returns an empty collection if this task has no input files.
     </description>
    </property>
    <property name="hasInputs" type="boolean">
        <description>
     * Returns true if this task has declared the inputs that it consumes.
     *
     * @return true if this task has declared any inputs.
     </description>
    </property>
    <property name="hasSourceFiles" type="boolean">
        <description>
     * Returns true if this task has declared that it accepts source files.
     *
     * @return true if this task has source files, false if not.
     </description>
    </property>
    <property name="properties" type="java.util.Map">
        <description>
     * Returns the set of input properties for this task.
     *
     * @return The properties.
     </description>
    </property>
    <property name="sourceFiles" type="org.gradle.api.file.FileCollection">
        <description>
     * Returns the set of source files for this task. These are the subset of input files which the task actually does work on.
     * A task is skipped if it has declared it accepts source files, and this collection is empty.
     *
     * @return The set of source files for this task.
     </description>
    </property>
</type>
