<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type language="gradle" name="org.gradle.api.tasks.compile.GroovyCompileOptions" version="3.0" superType="org.gradle.api.tasks.compile.AbstractOptions" documented="true">
    <description>
 * Compilation options to be passed to the Groovy compiler.
 </description>
    <method name="excludeFromAntProperties" returnType="boolean">
        <parameter type="java.lang.String" name="fieldName"/>
    </method>
    <method name="fork" returnType="org.gradle.api.tasks.compile.GroovyCompileOptions" documented="true">
        <description>
     * Convenience method to set {@link GroovyForkOptions} with named parameter syntax.
     * Calling this method will set {@code fork} to {@code true}.
     </description>
        <parameter type="java.util.Map" name="forkArgs"/>
    </method>
    <method name="getConfigurationScript" returnType="java.io.File">
        <description>
     * A Groovy script file that configures the compiler, allowing extensive control over how the code is compiled.
     * &lt;p&gt;
     * The script is executed as Groovy code, with the following context:
     * &lt;ul&gt;
     * &lt;li&gt;The instance of &lt;a href="http://docs.groovy-lang.org/latest/html/gapi/org/codehaus/groovy/control/CompilerConfiguration.html"&gt;CompilerConfiguration&lt;/a&gt; available as the {@code configuration} variable.&lt;/li&gt;
     * &lt;li&gt;All static members of &lt;a href="http://docs.groovy-lang.org/latest/html/gapi/org/codehaus/groovy/control/customizers/builder/CompilerCustomizationBuilder.html"&gt;CompilerCustomizationBuilder&lt;/a&gt; pre imported.&lt;/li&gt;
     * &lt;/ul&gt;
     * &lt;/p&gt;
     * &lt;p&gt;
     * This facilitates the following pattern:
     * &lt;pre&gt;
     * withConfig(configuration) {
     *   // use compiler configuration DSL here
     * }
     * &lt;/pre&gt;
     * &lt;/p&gt;
     * &lt;p&gt;
     * For example, to activate type checking for all Groovy classesâ€¦
     * &lt;pre&gt;
     * import groovy.transform.TypeChecked
     *
     * withConfig(configuration) {
     *     ast(TypeChecked)
     * }
     * &lt;/pre&gt;
     * &lt;/p&gt;
     * &lt;p&gt;
     * Please see &lt;a href="http://docs.groovy-lang.org/latest/html/documentation/#compilation-customizers"&gt;the Groovy compiler customization builder documentation&lt;/a&gt;
     * for more information about the compiler configuration DSL.
     * &lt;/p&gt;
     * &lt;p&gt;
     * &lt;b&gt;This feature is only available if compiling with Groovy 2.1 or later.&lt;/b&gt;
     * &lt;/p&gt;
     * @see &lt;a href="http://docs.groovy-lang.org/latest/html/gapi/org/codehaus/groovy/control/CompilerConfiguration.html"&gt;CompilerConfiguration&lt;/a&gt;
     * @see &lt;a href="http://docs.groovy-lang.org/latest/html/gapi/org/codehaus/groovy/control/customizers/builder/CompilerCustomizationBuilder.html"&gt;CompilerCustomizationBuilder&lt;/a&gt;
     </description>
    </method>
    <method name="getEncoding" returnType="java.lang.String">
        <description>
     * Tells the source encoding. Defaults to {@code UTF-8}.
     </description>
    </method>
    <method name="getFileExtensions" returnType="java.util.List">
        <description>
     * Returns the list of acceptable source file extensions. Only takes effect when compiling against
     * Groovy 1.7 or higher. Defaults to {@code ImmutableList.of("java", "groovy")}.
     </description>
    </method>
    <method name="getForkOptions" returnType="org.gradle.api.tasks.compile.GroovyForkOptions">
        <description>
     * Returns options for running the Groovy compiler in a separate process. These options only take effect
     * if {@code fork} is set to {@code true}.
     </description>
    </method>
    <method name="getOptimizationOptions" returnType="java.util.Map">
        <description>
     * Returns optimization options for the Groovy compiler. Allowed values for an option are {@code true} and {@code false}.
     * Only takes effect when compiling against Groovy 1.8 or higher.
     *
     * &lt;p&gt;Known options are:
     *
     * &lt;dl&gt;
     *     &lt;dt&gt;indy
     *     &lt;dd&gt;Use the invokedynamic bytecode instruction. Requires JDK7 or higher and Groovy 2.0 or higher. Disabled by default.
     *     &lt;dt&gt;int
     *     &lt;dd&gt;Optimize operations on primitive types (e.g. integers). Enabled by default.
     *     &lt;dt&gt;all
     *     &lt;dd&gt;Enable or disable all optimizations. Note that some optimizations might be mutually exclusive.
     * &lt;/dl&gt;
     </description>
    </method>
    <method name="getStubDir" returnType="java.io.File">
        <description>
     * Returns the directory where Java stubs for Groovy classes will be stored during Java/Groovy joint
     * compilation. Defaults to {@code null}, in which case a temporary directory will be used.
     </description>
    </method>
    <method name="isFailOnError" returnType="boolean">
        <description>
     * Tells whether the compilation task should fail if compile errors occurred. Defaults to {@code true}.
     </description>
    </method>
    <method name="isFork" returnType="boolean">
        <description>
     * Tells whether to run the Groovy compiler in a separate process. Defaults to {@code true}.
     </description>
    </method>
    <method name="isJavaAnnotationProcessing" returnType="boolean">
        <description>
     * Whether the Groovy code should be subject to Java annotation processing.
     * &lt;p&gt;
     * Annotation processing of Groovy code works by having annotation processors visit the Java stubs generated by the
     * Groovy compiler in order to support joint compilation of Groovy and Java source.
     * &lt;p&gt;
     * When set to {@code true}, stubs will be unconditionally generated for all Groovy sources, and Java annotations processors will be executed on those stubs.
     * &lt;p&gt;
     * When this option is set to {@code false} (the default), Groovy code will not be subject to annotation processing, but any joint compiled Java code will be.
     * If the compiler argument {@code "-proc:none"} was specified as part of the Java compile options, the value of this flag will be ignored.
     * No annotation processing will be performed regardless, on Java or Groovy source.
     </description>
    </method>
    <method name="isKeepStubs" returnType="boolean">
        <description>
     * Tells whether Java stubs for Groovy classes generated during Java/Groovy joint compilation
     * should be kept after compilation has completed. Useful for joint compilation debugging purposes.
     * Defaults to {@code false}.
     </description>
    </method>
    <method name="isListFiles" returnType="boolean">
        <description>
     * Tells whether to print which source files are to be compiled. Defaults to {@code false}.
     </description>
    </method>
    <method name="isVerbose" returnType="boolean">
        <description>
     * Tells whether to turn on verbose output. Defaults to {@code false}.
     </description>
    </method>
    <method name="optionMap" returnType="java.util.Map">
        <description>
     * Internal method.
     </description>
    </method>
    <method name="setConfigurationScript" returnType="void">
        <description>
     * Sets the path to the groovy configuration file.
     *
     * @see #getConfigurationScript()
     </description>
        <parameter type="java.io.File" name="configurationFile"/>
    </method>
    <method name="setEncoding" returnType="void">
        <description>
     * Sets the source encoding. Defaults to {@code UTF-8}.
     </description>
        <parameter type="java.lang.String" name="encoding"/>
    </method>
    <method name="setFailOnError" returnType="void">
        <description>
     * Sets whether the compilation task should fail if compile errors occurred. Defaults to {@code true}.
     </description>
        <parameter type="boolean" name="failOnError"/>
    </method>
    <method name="setFileExtensions" returnType="void">
        <description>
     * Sets the list of acceptable source file extensions. Only takes effect when compiling against
     * Groovy 1.7 or higher. Defaults to {@code ImmutableList.of("java", "groovy")}.
     </description>
        <parameter type="java.util.List" name="fileExtensions"/>
    </method>
    <method name="setFork" returnType="void">
        <description>
     * Sets whether to run the Groovy compiler in a separate process. Defaults to {@code true}.
     </description>
        <parameter type="boolean" name="fork"/>
    </method>
    <method name="setForkOptions" returnType="void">
        <description>
     * Sets options for running the Groovy compiler in a separate process. These options only take effect
     * if {@code fork} is set to {@code true}.
     </description>
        <parameter type="org.gradle.api.tasks.compile.GroovyForkOptions" name="forkOptions"/>
    </method>
    <method name="setJavaAnnotationProcessing" returnType="void">
        <description>
     * Sets whether Java annotation processors should process annotations on stubs.
     *
     * Defaults to {@code false}.
     </description>
        <parameter type="boolean" name="javaAnnotationProcessing"/>
    </method>
    <method name="setKeepStubs" returnType="void">
        <description>
     * Sets whether Java stubs for Groovy classes generated during Java/Groovy joint compilation
     * should be kept after compilation has completed. Useful for joint compilation debugging purposes.
     * Defaults to {@code false}.
     </description>
        <parameter type="boolean" name="keepStubs"/>
    </method>
    <method name="setListFiles" returnType="void">
        <description>
     * Sets whether to print which source files are to be compiled. Defaults to {@code false}.
     </description>
        <parameter type="boolean" name="listFiles"/>
    </method>
    <method name="setOptimizationOptions" returnType="void">
        <description>
     * Sets optimization options for the Groovy compiler. Allowed values for an option are {@code true} and {@code false}.
     * Only takes effect when compiling against Groovy 1.8 or higher.
     </description>
        <parameter type="java.util.Map" name="optimizationOptions"/>
    </method>
    <method name="setStubDir" returnType="void">
        <description>
     * Sets the directory where Java stubs for Groovy classes will be stored during Java/Groovy joint
     * compilation. Defaults to {@code null}, in which case a temporary directory will be used.
     </description>
        <parameter type="java.io.File" name="stubDir"/>
    </method>
    <method name="setVerbose" returnType="void">
        <description>
     * Sets whether to turn on verbose output. Defaults to {@code false}.
     </description>
        <parameter type="boolean" name="verbose"/>
    </method>
    <property name="configurationScript" type="java.io.File" documented="true">
        <description>
     * A Groovy script file that configures the compiler, allowing extensive control over how the code is compiled.
     * &lt;p&gt;
     * The script is executed as Groovy code, with the following context:
     * &lt;ul&gt;
     * &lt;li&gt;The instance of &lt;a href="http://docs.groovy-lang.org/latest/html/gapi/org/codehaus/groovy/control/CompilerConfiguration.html"&gt;CompilerConfiguration&lt;/a&gt; available as the {@code configuration} variable.&lt;/li&gt;
     * &lt;li&gt;All static members of &lt;a href="http://docs.groovy-lang.org/latest/html/gapi/org/codehaus/groovy/control/customizers/builder/CompilerCustomizationBuilder.html"&gt;CompilerCustomizationBuilder&lt;/a&gt; pre imported.&lt;/li&gt;
     * &lt;/ul&gt;
     * &lt;/p&gt;
     * &lt;p&gt;
     * This facilitates the following pattern:
     * &lt;pre&gt;
     * withConfig(configuration) {
     *   // use compiler configuration DSL here
     * }
     * &lt;/pre&gt;
     * &lt;/p&gt;
     * &lt;p&gt;
     * For example, to activate type checking for all Groovy classesâ€¦
     * &lt;pre&gt;
     * import groovy.transform.TypeChecked
     *
     * withConfig(configuration) {
     *     ast(TypeChecked)
     * }
     * &lt;/pre&gt;
     * &lt;/p&gt;
     * &lt;p&gt;
     * Please see &lt;a href="http://docs.groovy-lang.org/latest/html/documentation/#compilation-customizers"&gt;the Groovy compiler customization builder documentation&lt;/a&gt;
     * for more information about the compiler configuration DSL.
     * &lt;/p&gt;
     * &lt;p&gt;
     * &lt;b&gt;This feature is only available if compiling with Groovy 2.1 or later.&lt;/b&gt;
     * &lt;/p&gt;
     * @see &lt;a href="http://docs.groovy-lang.org/latest/html/gapi/org/codehaus/groovy/control/CompilerConfiguration.html"&gt;CompilerConfiguration&lt;/a&gt;
     * @see &lt;a href="http://docs.groovy-lang.org/latest/html/gapi/org/codehaus/groovy/control/customizers/builder/CompilerCustomizationBuilder.html"&gt;CompilerCustomizationBuilder&lt;/a&gt;
     </description>
    </property>
    <property name="encoding" type="java.lang.String" documented="true">
        <description>
     * Tells the source encoding. Defaults to {@code UTF-8}.
     </description>
    </property>
    <property name="failOnError" type="boolean" documented="true">
        <description>
     * Tells whether the compilation task should fail if compile errors occurred. Defaults to {@code true}.
     </description>
    </property>
    <property name="fileExtensions" type="java.util.List" documented="true">
        <description>
     * Returns the list of acceptable source file extensions. Only takes effect when compiling against
     * Groovy 1.7 or higher. Defaults to {@code ImmutableList.of("java", "groovy")}.
     </description>
    </property>
    <property name="fork" type="boolean" documented="true">
        <description>
     * Tells whether to run the Groovy compiler in a separate process. Defaults to {@code true}.
     </description>
    </property>
    <property name="forkOptions" type="org.gradle.api.tasks.compile.GroovyForkOptions" documented="true">
        <description>
     * Returns options for running the Groovy compiler in a separate process. These options only take effect
     * if {@code fork} is set to {@code true}.
     </description>
    </property>
    <property name="javaAnnotationProcessing" type="boolean" documented="true">
        <description>
     * Whether the Groovy code should be subject to Java annotation processing.
     * &lt;p&gt;
     * Annotation processing of Groovy code works by having annotation processors visit the Java stubs generated by the
     * Groovy compiler in order to support joint compilation of Groovy and Java source.
     * &lt;p&gt;
     * When set to {@code true}, stubs will be unconditionally generated for all Groovy sources, and Java annotations processors will be executed on those stubs.
     * &lt;p&gt;
     * When this option is set to {@code false} (the default), Groovy code will not be subject to annotation processing, but any joint compiled Java code will be.
     * If the compiler argument {@code "-proc:none"} was specified as part of the Java compile options, the value of this flag will be ignored.
     * No annotation processing will be performed regardless, on Java or Groovy source.
     </description>
    </property>
    <property name="keepStubs" type="boolean" documented="true">
        <description>
     * Tells whether Java stubs for Groovy classes generated during Java/Groovy joint compilation
     * should be kept after compilation has completed. Useful for joint compilation debugging purposes.
     * Defaults to {@code false}.
     </description>
    </property>
    <property name="listFiles" type="boolean" documented="true">
        <description>
     * Tells whether to print which source files are to be compiled. Defaults to {@code false}.
     </description>
    </property>
    <property name="optimizationOptions" type="java.util.Map" documented="true">
        <description>
     * Returns optimization options for the Groovy compiler. Allowed values for an option are {@code true} and {@code false}.
     * Only takes effect when compiling against Groovy 1.8 or higher.
     *
     * &lt;p&gt;Known options are:
     *
     * &lt;dl&gt;
     *     &lt;dt&gt;indy
     *     &lt;dd&gt;Use the invokedynamic bytecode instruction. Requires JDK7 or higher and Groovy 2.0 or higher. Disabled by default.
     *     &lt;dt&gt;int
     *     &lt;dd&gt;Optimize operations on primitive types (e.g. integers). Enabled by default.
     *     &lt;dt&gt;all
     *     &lt;dd&gt;Enable or disable all optimizations. Note that some optimizations might be mutually exclusive.
     * &lt;/dl&gt;
     </description>
    </property>
    <property name="stubDir" type="java.io.File" documented="true">
        <description>
     * Returns the directory where Java stubs for Groovy classes will be stored during Java/Groovy joint
     * compilation. Defaults to {@code null}, in which case a temporary directory will be used.
     </description>
    </property>
    <property name="verbose" type="boolean" documented="true">
        <description>
     * Tells whether to turn on verbose output. Defaults to {@code false}.
     </description>
    </property>
</type>
