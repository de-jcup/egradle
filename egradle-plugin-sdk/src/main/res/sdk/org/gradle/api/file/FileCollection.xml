<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.file.FileCollection" version="3.0">
    <description>
 * &lt;p&gt;A {@code FileCollection} represents a collection of files which you can query in certain ways. A file collection
 * is often used to define a classpath, or to add files to a container.&lt;/p&gt;
 *
 * &lt;p&gt;You can obtain a {@code FileCollection} instance using {@link org.gradle.api.Project#files}.&lt;/p&gt;
 </description>
    <method name="add" returnType="org.gradle.api.file.FileCollection">
        <description>
     * &lt;p&gt;Adds another collection to this collection. This is an optional operation.&lt;/p&gt;
     *
     * @param collection The collection to add.
     * @return This
     * @throws UnsupportedOperationException When this collection does not allow modification.
     </description>
        <parameter type="org.gradle.api.file.FileCollection" name="collection"/>
    </method>
    <method name="addToAntBuilder" returnType="java.lang.Object">
        <description>
     * Adds this collection to an Ant task as a nested node. Equivalent to calling {@code addToAntBuilder(builder,
     *nodeName,AntType.ResourceCollection)}.
     </description>
        <parameter type="java.lang.Object" name="builder"/>
        <parameter type="java.lang.String" name="nodeName"/>
    </method>
    <method name="addToAntBuilder" returnType="void">
        <description>
 * &lt;p&gt;A {@code FileCollection} represents a collection of files which you can query in certain ways. A file collection
 * is often used to define a classpath, or to add files to a container.&lt;/p&gt;
 *
 * &lt;p&gt;You can obtain a {@code FileCollection} instance using {@link org.gradle.api.Project#files}.&lt;/p&gt;
 </description>
        <parameter type="java.lang.Object" name="builder"/>
        <parameter type="java.lang.String" name="nodeName"/>
        <parameter type="org.gradle.api.file.FileCollection.AntType" name="type"/>
    </method>
    <method name="asType" returnType="java.lang.Object">
        <description>
     * &lt;p&gt;Converts this collection into an object of the specified type. Supported types are: {@code Collection}, {@code
     * List}, {@code Set}, {@code Object[]}, {@code File[]}, {@code File}, and {@link FileTree}.&lt;/p&gt;
     *
     * &lt;p&gt;You can call this method in your build script using the {@code as} operator.&lt;/p&gt;
     *
     * @param type The type to convert to.
     * @return The converted value.
     * @throws UnsupportedOperationException When an unsupported type is specified.
     </description>
        <parameter type="java.lang.Class" name="type"/>
    </method>
    <method name="contains" returnType="boolean">
        <description>
     * Determines whether this collection contains the given file. Generally, this method is more efficient than calling
     * {@code getFiles().contains(file)}.
     *
     * @param file The file to check for.
     * @return true if this collection contains the given file, false otherwise.
     </description>
        <parameter type="java.io.File" name="file"/>
    </method>
    <method name="filter" returnType="org.gradle.api.file.FileCollection">
        <description>
     * &lt;p&gt;Restricts the contents of this collection to those files which match the given criteria. The filtered
     * collection is live, so that it reflects any changes to this collection.&lt;/p&gt;
     *
     * &lt;p&gt;The given closure is passed the File as a parameter, and should return a boolean value.&lt;/p&gt;
     *
     * @param filterClosure The closure to use to select the contents of the filtered collection.
     * @return The filtered collection.
     </description>
        <parameter type="groovy.lang.Closure" name="filterClosure"/>
    </method>
    <method name="filter" returnType="org.gradle.api.file.FileCollection">
        <description>
     * &lt;p&gt;Restricts the contents of this collection to those files which match the given criteria. The filtered
     * collection is live, so that it reflects any changes to this collection.&lt;/p&gt;
     *
     * @param filterSpec The criteria to use to select the contents of the filtered collection.
     * @return The filtered collection.
     </description>
        <parameter type="org.gradle.api.specs.Spec" name="filterSpec"/>
    </method>
    <method name="getAsFileTree" returnType="org.gradle.api.file.FileTree">
        <description>
     * Converts this collection to a {@link FileTree}. Generally, for each file in this collection, the resulting file
     * tree will contain the source file at the root of the tree. For each directory in this collection, the resulting
     * file tree will contain all the files under the source directory.
     *
     * @return this collection as a {@link FileTree}. Never returns null.
     </description>
    </method>
    <method name="getAsPath" returnType="java.lang.String">
        <description>
     * Returns the contents of this collection as a platform-specific path. This can be used, for example, in an Ant
     * &lt;path&gt; element.
     *
     * @return The path. Returns an empty string if this collection is empty.
     </description>
    </method>
    <method name="getFiles" returnType="java.util.Set">
        <description>
     * Returns the contents of this collection as a Set.
     *
     * @return The files. Returns an empty set if this collection is empty.
     </description>
    </method>
    <method name="getSingleFile" returnType="java.io.File">
        <description>
     * Returns the content of this collection, asserting it contains exactly one file.
     *
     * @return The file.
     * @throws IllegalStateException when this collection does not contain exactly one file.
     </description>
    </method>
    <method name="isEmpty" returnType="boolean">
        <description>
     * Returns true if this collection is empty. Generally, calling this method is more efficient than calling {@code
     * getFiles().isEmpty()}.
     *
     * @return true if this collection is empty, false otherwise.
     </description>
    </method>
    <method name="minus" returnType="org.gradle.api.file.FileCollection">
        <description>
     * &lt;p&gt;Returns a {@code FileCollection} which contains the difference between this collection and the given
     * collection. The returned collection is live, and tracks changes to both source collections.&lt;/p&gt;
     *
     * &lt;p&gt;You can call this method in your build script using the {@code -} operator.&lt;/p&gt;
     *
     * @param collection The other collection. Should not be null.
     * @return A new collection containing the difference.
     </description>
        <parameter type="org.gradle.api.file.FileCollection" name="collection"/>
    </method>
    <method name="plus" returnType="org.gradle.api.file.FileCollection">
        <description>
     * &lt;p&gt;Returns a {@code FileCollection} which contains the union of this collection and the given collection. The
     * returned collection is live, and tracks changes to both source collections.&lt;/p&gt;
     *
     * &lt;p&gt;You can call this method in your build script using the {@code +} operator.&lt;/p&gt;
     *
     * @param collection The other collection. Should not be null.
     * @return A new collection containing the union.
     </description>
        <parameter type="org.gradle.api.file.FileCollection" name="collection"/>
    </method>
    <method name="stopExecutionIfEmpty" returnType="org.gradle.api.file.FileCollection">
        <description>
     * Throws a {@link StopExecutionException} if this collection is empty.
     *
     * @return this
     * @throws StopExecutionException When this collection is empty.
     </description>
    </method>
    <interface name="java.lang.Iterable"/>
    <interface name="org.gradle.api.Buildable"/>
    <interface name="org.gradle.api.tasks.AntBuilderAware"/>
    <property name="asFileTree" type="org.gradle.api.file.FileTree">
        <description>
     * Converts this collection to a {@link FileTree}. Generally, for each file in this collection, the resulting file
     * tree will contain the source file at the root of the tree. For each directory in this collection, the resulting
     * file tree will contain all the files under the source directory.
     *
     * @return this collection as a {@link FileTree}. Never returns null.
     </description>
    </property>
    <property name="asPath" type="java.lang.String">
        <description>
     * Returns the contents of this collection as a platform-specific path. This can be used, for example, in an Ant
     * &lt;path&gt; element.
     *
     * @return The path. Returns an empty string if this collection is empty.
     </description>
    </property>
    <property name="empty" type="boolean">
        <description>
     * Returns true if this collection is empty. Generally, calling this method is more efficient than calling {@code
     * getFiles().isEmpty()}.
     *
     * @return true if this collection is empty, false otherwise.
     </description>
    </property>
    <property name="files" type="java.util.Set">
        <description>
     * Returns the contents of this collection as a Set.
     *
     * @return The files. Returns an empty set if this collection is empty.
     </description>
    </property>
    <property name="singleFile" type="java.io.File">
        <description>
     * Returns the content of this collection, asserting it contains exactly one file.
     *
     * @return The file.
     * @throws IllegalStateException when this collection does not contain exactly one file.
     </description>
    </property>
</type>
