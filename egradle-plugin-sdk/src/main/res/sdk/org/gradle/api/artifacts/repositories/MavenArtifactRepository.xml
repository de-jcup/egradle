<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.artifacts.repositories.MavenArtifactRepository" version="3.0" documented="true">
    <description>
 * An artifact repository which uses a Maven format to store artifacts and meta-data.
 * &lt;p&gt;
 * Repositories of this type are created by the {@link org.gradle.api.artifacts.dsl.RepositoryHandler#maven(org.gradle.api.Action)} group of methods.
 </description>
    <method name="artifactUrls" returnType="void" documented="true">
        <description>
     * Adds some additional URLs to use to find artifact files. Note that these URLs are not used to find POM files.
     *
     * &lt;p&gt;The provided values are evaluated as per {@link org.gradle.api.Project#uri(Object)}. This means, for example, you can pass in a {@code File} object, or a relative path to be evaluated
     * relative to the project directory.
     *
     * @param urls The URLs to add.
     </description>
        <parameter type="java.lang.Object" name="urls"/>
    </method>
    <method name="getArtifactUrls" returnType="java.util.Set">
        <description>
     * Returns the additional URLs to use to find artifact files. Note that these URLs are not used to find POM files.
     *
     * @return The additional URLs. Returns an empty list if there are no such URLs.
     </description>
    </method>
    <method name="getUrl" returnType="java.net.URI">
        <description>
     * The base URL of this repository. This URL is used to find both POMs and artifact files. You can add additional URLs to use to look for artifact files, such as jars, using {@link
     * #setArtifactUrls(Iterable)}.
     *
     * @return The URL.
     </description>
    </method>
    <method name="setArtifactUrls" returnType="void">
        <description>
     * Sets the additional URLs to use to find artifact files. Note that these URLs are not used to find POM files.
     *
     * &lt;p&gt;The provided values are evaluated as per {@link org.gradle.api.Project#uri(Object)}. This means, for example, you can pass in a {@code File} object, or a relative path to be evaluated
     * relative to the project directory.
     *
     * @param urls The URLs.
     </description>
        <parameter type="java.lang.Iterable" name="urls"/>
    </method>
    <method name="setUrl" returnType="void">
        <description>
     * Sets the base URL of this repository. This URL is used to find both POMs and artifact files. You can add additional URLs to use to look for artifact files, such as jars, using {@link
     * #setArtifactUrls(Iterable)}.
     *
     * &lt;p&gt;The provided value is evaluated as per {@link org.gradle.api.Project#uri(Object)}. This means, for example, you can pass in a {@code File} object, or a relative path to be evaluated relative
     * to the project directory.
     *
     * @param url The base URL.
     </description>
        <parameter type="java.lang.Object" name="url"/>
    </method>
    <interface name="org.gradle.api.artifacts.repositories.ArtifactRepository"/>
    <interface name="org.gradle.api.artifacts.repositories.AuthenticationSupported"/>
    <property name="artifactUrls" type="java.util.Set" documented="true">
        <description>
     * Returns the additional URLs to use to find artifact files. Note that these URLs are not used to find POM files.
     *
     * @return The additional URLs. Returns an empty list if there are no such URLs.
     </description>
    </property>
    <property name="url" type="java.net.URI" documented="true">
        <description>
     * The base URL of this repository. This URL is used to find both POMs and artifact files. You can add additional URLs to use to look for artifact files, such as jars, using {@link
     * #setArtifactUrls(Iterable)}.
     *
     * @return The URL.
     </description>
    </property>
</type>
