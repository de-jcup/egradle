<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.artifacts.ConfigurationContainer" version="3.0">
    <description> 
 &lt;p&gt;A &lt;a href='type://ConfigurationContainer'&gt;ConfigurationContainer&lt;/a&gt; is responsible for declaring and managing configurations. See also &lt;a href='type://Configuration'&gt;Configuration&lt;/a&gt;.&lt;/p&gt; 
 
 &lt;p&gt;You can obtain a &lt;a href='type://ConfigurationContainer'&gt;ConfigurationContainer&lt;/a&gt; instance by calling &lt;a href='type://org.gradle.api.Project#getConfigurations()'&gt;org.gradle.api.Project#getConfigurations()&lt;/a&gt;, 
 or using the &lt;a href='type://configurations'&gt;configurations&lt;/a&gt; property in your build script.&lt;/p&gt; 
 
 &lt;p&gt;The configurations in a container are accessible as read-only properties of the container, using the name of the 
 configuration as the property name. For example:&lt;/p&gt; 
 
 &lt;pre autoTested='true'&gt; 
 configurations.create('myConfiguration') 
 configurations.myConfiguration.transitive = false 
 &lt;/pre&gt; 
 
 &lt;p&gt;A dynamic method is added for each configuration which takes a configuration closure. This is equivalent to 
 calling &lt;a href='type://ConfigurationContainer#getByName(String, groovy.lang.Closure)'&gt;#getByName(String, groovy.lang.Closure)&lt;/a&gt;. For example:&lt;/p&gt; 
 
 &lt;pre autoTested='true'&gt; 
 configurations.create('myConfiguration') 
 configurations.myConfiguration { 
     transitive = false 
 } 
 &lt;/pre&gt; 
 
 &lt;h2&gt;Examples&lt;/h2&gt; 
 
 An example showing how to refer to a given configuration by name 
 in order to get hold of all dependencies (e.g. jars, but only) 
 &lt;pre autoTested='true'&gt; 
   apply plugin: 'java' //so that I can use 'compile' configuration 
 
   //copying all dependencies attached to 'compile' into a specific folder 
   task copyAllDependencies(type: Copy) { 
     //referring to the 'compile' configuration 
     from configurations.compile 
     into 'allLibs' 
   } 
 &lt;/pre&gt; 
 
 An example showing how to declare and configure configurations 
 &lt;pre autoTested=''&gt; 
 apply plugin: 'java' //so that I can use 'compile', 'testCompile' configurations 
 
 configurations { 
   //adding a configuration: 
   myConfiguration 
 
   //adding a configuration that extends existing configuration: 
   //(testCompile was added by the java plugin) 
   myIntegrationTestsCompile.extendsFrom(testCompile) 
 
   //configuring existing configurations not to put transitive dependencies on the compile classpath 
   //this way you can avoid issues with implicit dependencies to transitive libraries 
   compile.transitive = false 
   testCompile.transitive = false 
 } 
 &lt;/pre&gt; 
 
 Examples on configuring the &lt;b&gt;resolution strategy&lt;/b&gt; - see docs for &lt;a href='type://ResolutionStrategy'&gt;ResolutionStrategy&lt;/a&gt; 
</description>
    <method name="detachedConfiguration" returnType="org.gradle.api.artifacts.Configuration">
        <description> 
 Creates a configuration, but does not add it to this container. 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;dependencies The dependencies of the configuration. 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The configuration. 
</description>
        <parameter type="org.gradle.api.artifacts.Dependency" name="dependencies"/>
    </method>
    <method name="getAt" returnType="org.gradle.api.artifacts.Configuration">
        <description> 
 {@inheritDoc} 
</description>
        <parameter type="java.lang.String" name="name"/>
    </method>
    <method name="getByName" returnType="org.gradle.api.artifacts.Configuration">
        <description> 
 {@inheritDoc} 
</description>
        <parameter type="java.lang.String" name="name"/>
    </method>
    <method name="getByName" returnType="org.gradle.api.artifacts.Configuration">
        <description> 
 {@inheritDoc} 
</description>
        <parameter type="java.lang.String" name="name"/>
        <parameter type="groovy.lang.Closure" name="configureClosure"/>
    </method>
    <interface name="org.gradle.api.NamedDomainObjectContainer"/>
    <property name="at" type="org.gradle.api.artifacts.Configuration">
        <description> 
 {@inheritDoc} 
</description>
    </property>
    <property name="byName" type="org.gradle.api.artifacts.Configuration">
        <description> 
 {@inheritDoc} 
</description>
    </property>
    <documentation>
        <method name="getByName"/>
        <method name="getAt"/>
        <method name="detachedConfiguration"/>
    </documentation>
</type>
