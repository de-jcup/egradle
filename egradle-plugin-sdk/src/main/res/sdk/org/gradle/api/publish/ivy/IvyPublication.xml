<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.publish.ivy.IvyPublication" version="3.0">
    <description> 
 A &lt;a href='type://IvyPublication'&gt;IvyPublication&lt;/a&gt; is the representation/configuration of how Gradle should publish something in Ivy format, to an Ivy repository. 
 
 You directly add a named Ivy Publication the project's &lt;a href='type://publishing.publications'&gt;publishing.publications&lt;/a&gt; container by providing &lt;a href='type://IvyPublication'&gt;IvyPublication&lt;/a&gt; as the type. 
 &lt;pre&gt; 
 publishing { 
       // Configure the publication here 
     } 
   } 
 } 
 &lt;/pre&gt; 
 
 &lt;p&gt; 
 The Ivy module identifying attributes of the publication are mapped as follows: 
 &lt;ul&gt; 
 &lt;li&gt;&lt;a href='type://module'&gt;module&lt;/a&gt; - &lt;a href='type://project.name'&gt;project.name&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href='type://organisation'&gt;organisation&lt;/a&gt; - &lt;a href='type://project.group'&gt;project.group&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href='type://revision'&gt;revision&lt;/a&gt; - &lt;a href='type://project.version'&gt;project.version&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href='type://status'&gt;status&lt;/a&gt; - &lt;a href='type://project.status'&gt;project.status&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;/p&gt; 
 
 &lt;p&gt; 
 For certain common use cases, it's often sufficient to specify the component to publish, using (&lt;a href='type://IvyPublication#from(org.gradle.api.component.SoftwareComponent)'&gt;#from(org.gradle.api.component.SoftwareComponent)&lt;/a&gt;. 
 The published component is used to determine which artifacts to publish, and which configurations and dependencies should be listed in the generated ivy descriptor file. 
 &lt;/p&gt;&lt;p&gt; 
 You can add configurations to the generated ivy descriptor file, by supplying a Closure to the &lt;a href='type://IvyPublication#configurations(org.gradle.api.Action)'&gt;#configurations(org.gradle.api.Action)&lt;/a&gt; method. 
 &lt;/p&gt;&lt;p&gt; 
 To add additional artifacts to the set published, use the &lt;a href='type://IvyPublication#artifact(Object)'&gt;#artifact(Object)&lt;/a&gt; and &lt;a href='type://IvyPublication#artifact(Object, org.gradle.api.Action)'&gt;#artifact(Object, org.gradle.api.Action)&lt;/a&gt; methods. 
 You can also completely replace the set of published artifacts using &lt;a href='type://IvyPublication#setArtifacts(Iterable)'&gt;#setArtifacts(Iterable)&lt;/a&gt;. 
 Together, these methods give you full control over the artifacts to be published. 
 &lt;/p&gt;&lt;p&gt; 
 For any other tweaks to the publication, it is possible to modify the generated Ivy descriptor file prior to publication. This is done using 
 the &lt;a href='type://IvyModuleDescriptorSpec#withXml(org.gradle.api.Action)'&gt;IvyModuleDescriptorSpec#withXml(org.gradle.api.Action)&lt;/a&gt; method, normally via a Closure passed to the &lt;a href='type://IvyPublication#descriptor(org.gradle.api.Action)'&gt;#descriptor(org.gradle.api.Action)&lt;/a&gt; method. 
 &lt;/p&gt; 
 &lt;h4&gt;Example of publishing a java component with an added source jar and custom module description&lt;/h4&gt; 
 
 &lt;pre autoTested="true"&gt; 
 apply plugin: "java" 
 apply plugin: "ivy-publish" 
 
 task sourceJar(type: Jar) { 
   from sourceSets.main.allJava 
 } 
 
 publishing { 
         type "source" 
         extension "src.jar" 
         conf "runtime" 
       } 
       descriptor.withXml { 
         asNode().info[0].appendNode("description", "custom-description") 
       } 
     } 
   } 
 } 
 &lt;/pre&gt; 
 
 @since 1.3 
</description>
    <method name="artifact" returnType="org.gradle.api.publish.ivy.IvyArtifact" delegationTarget="IvyArtifact">
        <description> 
 Creates a custom &lt;a href='type://IvyArtifact'&gt;IvyArtifact&lt;/a&gt; to be included in the publication. 
 
 The &lt;code&gt;artifact&lt;/code&gt; method can take a variety of input: 
 &lt;ul&gt; 
     &lt;li&gt;A &lt;a href='type://org.gradle.api.artifacts.PublishArtifact'&gt;org.gradle.api.artifacts.PublishArtifact&lt;/a&gt; instance. Name, type, extension and classifier values are taken from the supplied instance.&lt;/li&gt; 
     &lt;li&gt;An &lt;a href='type://org.gradle.api.tasks.bundling.AbstractArchiveTask'&gt;org.gradle.api.tasks.bundling.AbstractArchiveTask&lt;/a&gt; instance. Name, type, extension and classifier values are taken from the supplied instance.&lt;/li&gt; 
     &lt;li&gt;Anything that can be resolved to a &lt;a href='type://java.io.File'&gt;java.io.File&lt;/a&gt; via the &lt;a href='type://org.gradle.api.Project#file(Object)'&gt;org.gradle.api.Project#file(Object)&lt;/a&gt; method. 
          Name, extension and classifier values are interpolated from the file name.&lt;/li&gt; 
     &lt;li&gt;A &lt;a href='type://java.util.Map'&gt;java.util.Map&lt;/a&gt; that contains a 'source' entry that can be resolved as any of the other input types, including file. 
         This map can contain additional attributes to further configure the constructed artifact.&lt;/li&gt; 
 &lt;/ul&gt; 
 
 The following example demonstrates the addition of various custom artifacts. 
 &lt;pre autoTested="true"&gt; 
 apply plugin: "ivy-publish" 
 
 task sourceJar(type: Jar) { 
   classifier "source" 
 } 
 
 task genDocs &amp;lt;&amp;lt; { 
     // Generate 'my-docs-file.htm' 
 } 
 
 publishing { 
       artifact sourceJar // Publish the output of the sourceJar task 
       artifact 'my-file-name.jar' // Publish a file created outside of the build 
       artifact source: 'my-docs-file.htm', classifier: 'docs', extension: 'html', builtBy: genDocs // Publish a file generated by the 'genDocs' task 
     } 
   } 
 } 
 &lt;/pre&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;source The source of the artifact content. 
</description>
        <parameter type="java.lang.Object" name="source"/>
    </method>
    <method name="artifact" returnType="org.gradle.api.publish.ivy.IvyArtifact" delegationTarget="IvyArtifact">
        <description> 
 Creates an &lt;a href='type://IvyArtifact'&gt;IvyArtifact&lt;/a&gt; to be included in the publication, which is configured by the associated action. 
 
 The first parameter is used to create a custom artifact and add it to the publication, as per &lt;a href='type://IvyPublication#artifact(Object)'&gt;#artifact(Object)&lt;/a&gt;. 
 The created &lt;a href='type://IvyArtifact'&gt;IvyArtifact&lt;/a&gt; is then configured using the supplied action. 
 This method also accepts the configure action as a closure argument, by type coercion. 
 
 &lt;pre autoTested="true"&gt; 
 apply plugin: "ivy-publish" 
 
 task sourceJar(type: Jar) { 
   classifier "source" 
 } 
 
 task genDocs &amp;lt;&amp;lt; { 
     // Generate 'my-docs-file.htm' 
 } 
 
 publishing { 
         // These values will be used instead of the values from the task. The task values will not be updated. 
         classifier "src" 
         extension "zip" 
         conf "runtime-&gt;default" 
       } 
       artifact("my-docs-file.htm") { 
         type "documentation" 
         extension "html" 
         builtBy genDocs 
       } 
     } 
   } 
 } 
 &lt;/pre&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;source The source of the artifact. 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;config An action to configure the values of the constructed &lt;a href='type://IvyArtifact'&gt;IvyArtifact&lt;/a&gt;. 
</description>
        <parameter type="java.lang.Object" name="source"/>
        <parameter type="org.gradle.api.Action" name="config"/>
    </method>
    <method name="configurations" returnType="void" delegationTarget="IvyConfiguration">
        <description> 
 Defines some &lt;a href='type://IvyConfiguration'&gt;IvyConfiguration&lt;/a&gt;s that should be included in the published ivy module descriptor file. 
 
 The following example demonstrates how to add a "testCompile" configuration, and a "testRuntime" configuration that extends it. 
 &lt;pre autoTested="true"&gt; 
 apply plugin: "java" 
 apply plugin: "ivy-publish" 
 
 publishing {} 
           testRuntime { 
               extend "testCompile" 
           } 
       } 
     } 
   } 
 } 
 &lt;/pre&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;config An action or closure to configure the values of the constructed &lt;a href='type://IvyConfiguration'&gt;IvyConfiguration&lt;/a&gt;. 
</description>
        <parameter type="org.gradle.api.Action" name="config"/>
    </method>
    <method name="descriptor" returnType="void">
        <description> 
 Configures the descriptor that will be published. 
 &lt;p&gt; 
 The descriptor XML can be modified by using the &lt;a href='type://IvyModuleDescriptorSpec#withXml(org.gradle.api.Action)'&gt;IvyModuleDescriptorSpec#withXml(org.gradle.api.Action)&lt;/a&gt; method. 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;configure The configuration action. 
</description>
        <parameter type="org.gradle.api.Action" name="configure"/>
    </method>
    <method name="from" returnType="void">
        <description> 
 Provides the software component that should be published. 
 
 &lt;ul&gt; 
     &lt;li&gt;Any artifacts declared by the component will be included in the publication.&lt;/li&gt; 
     &lt;li&gt;The dependencies declared by the component will be included in the published meta-data.&lt;/li&gt; 
 &lt;/ul&gt; 
 
 Currently 2 types of component are supported: 'components.java' (added by the JavaPlugin) and 'components.web' (added by the WarPlugin). 
 For any individual IvyPublication, only a single component can be provided in this way. 
 
 The following example demonstrates how to publish the 'java' component to a ivy repository. 
 &lt;pre autoTested="true"&gt; 
 apply plugin: "java" 
 apply plugin: "ivy-publish" 
 
 publishing { 
       from components.java 
     } 
   } 
 } 
 &lt;/pre&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;component The software component to publish. 
</description>
        <parameter type="org.gradle.api.component.SoftwareComponent" name="component"/>
    </method>
    <method name="getArtifacts" returnType="org.gradle.api.publish.ivy.IvyArtifactSet">
        <description> 
 The complete set of artifacts for this publication. 
 
 &lt;p&gt; 
 Setting this property will clear any previously added artifacts and create artifacts from the specified sources. 
 Each supplied source is interpreted as per &lt;a href='type://IvyPublication#artifact(Object)'&gt;#artifact(Object)&lt;/a&gt;. 
 
 For example, to exclude the dependencies declared by a component and instead use a custom set of artifacts: 
 &lt;pre autoTested="true"&gt; 
 apply plugin: "java" 
 apply plugin: "ivy-publish" 
 
 task sourceJar(type: Jar) { 
   classifier "source" 
 } 
 
 publishing { 
       from components.java 
       artifacts = ["my-custom-jar.jar", sourceJar] 
     } 
   } 
 } 
 &lt;/pre&gt; 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;the artifacts. 
</description>
    </method>
    <method name="getConfigurations" returnType="org.gradle.api.publish.ivy.IvyConfigurationContainer">
        <description> 
 Returns the complete set of configurations for this publication. 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;the configurations 
</description>
    </method>
    <method name="getDescriptor" returnType="org.gradle.api.publish.ivy.IvyModuleDescriptorSpec">
        <description> 
 The module descriptor that will be published. 
 &lt;p&gt; 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The module descriptor that will be published. 
</description>
    </method>
    <method name="getModule" returnType="java.lang.String">
        <description> 
 Returns the module for this publication. 
</description>
    </method>
    <method name="getOrganisation" returnType="java.lang.String">
        <description> 
 Returns the organisation for this publication. 
</description>
    </method>
    <method name="getRevision" returnType="java.lang.String">
        <description> 
 Returns the revision for this publication. 
</description>
    </method>
    <method name="setArtifacts" returnType="void">
        <description> 
 Sets the artifacts for this publication. Each supplied value is interpreted as per &lt;a href='type://IvyPublication#artifact(Object)'&gt;#artifact(Object)&lt;/a&gt;. 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;sources The set of artifacts for this publication. 
</description>
        <parameter type="java.lang.Iterable" name="sources"/>
    </method>
    <method name="setModule" returnType="void">
        <description> 
 Sets the module for this publication. 
</description>
        <parameter type="java.lang.String" name="module"/>
    </method>
    <method name="setOrganisation" returnType="void">
        <description> 
 Sets the organisation for this publication. 
</description>
        <parameter type="java.lang.String" name="organisation"/>
    </method>
    <method name="setRevision" returnType="void">
        <description> 
 Sets the revision for this publication. 
</description>
        <parameter type="java.lang.String" name="revision"/>
    </method>
    <interface name="org.gradle.api.publish.Publication"/>
    <property name="artifacts" type="org.gradle.api.publish.ivy.IvyArtifactSet">
        <description> 
 The complete set of artifacts for this publication. 
 
 &lt;p&gt; 
 Setting this property will clear any previously added artifacts and create artifacts from the specified sources. 
 Each supplied source is interpreted as per &lt;a href='type://IvyPublication#artifact(Object)'&gt;#artifact(Object)&lt;/a&gt;. 
 
 For example, to exclude the dependencies declared by a component and instead use a custom set of artifacts: 
 &lt;pre autoTested="true"&gt; 
 apply plugin: "java" 
 apply plugin: "ivy-publish" 
 
 task sourceJar(type: Jar) { 
   classifier "source" 
 } 
 
 publishing { 
       from components.java 
       artifacts = ["my-custom-jar.jar", sourceJar] 
     } 
   } 
 } 
 &lt;/pre&gt; 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;the artifacts. 
</description>
    </property>
    <property name="configurations" type="org.gradle.api.publish.ivy.IvyConfigurationContainer">
        <description> 
 Returns the complete set of configurations for this publication. 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;the configurations 
</description>
    </property>
    <property name="descriptor" type="org.gradle.api.publish.ivy.IvyModuleDescriptorSpec">
        <description> 
 The module descriptor that will be published. 
 &lt;p&gt; 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The module descriptor that will be published. 
</description>
    </property>
    <property name="module" type="java.lang.String">
        <description> 
 Returns the module for this publication. 
</description>
    </property>
    <property name="organisation" type="java.lang.String">
        <description> 
 Returns the organisation for this publication. 
</description>
    </property>
    <property name="revision" type="java.lang.String">
        <description> 
 Returns the revision for this publication. 
</description>
    </property>
    <documentation>
        <property name="descriptor"/>
        <property name="artifacts"/>
        <property name="configurations"/>
        <property name="organisation"/>
        <property name="module"/>
        <property name="revision"/>
        <method name="from"/>
        <method name="descriptor"/>
        <method name="artifact"/>
        <method name="configurations"/>
    </documentation>
</type>
