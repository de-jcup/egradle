<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.plugins.Convention" version="3.0">
    <description>
 * &lt;p&gt;A {@code Convention} manages a set of &lt;i&gt;convention objects&lt;/i&gt;. When you add a convention object to a {@code
 * Convention}, and the properties and methods of the convention object become available as properties and methods of
 * the object which the convention is associated to. A convention object is simply a POJO or POGO. Usually, a {@code
 * Convention} is used by plugins to extend a {@link org.gradle.api.Project} or a {@link org.gradle.api.Task}.&lt;/p&gt;
 </description>
    <method name="findPlugin" returnType="T">
        <description>
     * Locates the plugin convention object with the given type.
     *
     * @param type The convention object type.
     * @return The object. Returns null if there is no such object.
     * @throws IllegalStateException When there are multiple matching objects.
     </description>
        <parameter type="java.lang.Class" name="type"/>
    </method>
    <method name="getExtensionsAsDynamicObject" returnType="org.gradle.internal.metaobject.DynamicObject">
        <description>
     * Returns a dynamic object which represents the properties and methods contributed by the extensions and convention objects contained in this
     * convention.
     *
     * @return The dynamic object
     </description>
    </method>
    <method name="getPlugin" returnType="T">
        <description>
     * Locates the plugin convention object with the given type.
     *
     * @param type The convention object type.
     * @return The object. Never returns null.
     * @throws IllegalStateException When there is no such object contained in this convention, or when there are
     * multiple such objects.
     </description>
        <parameter type="java.lang.Class" name="type"/>
    </method>
    <method name="getPlugins" returnType="java.util.Map">
        <description>
     * Returns the plugin convention objects contained in this convention.
     *
     * @return The plugins. Returns an empty map when this convention does not contain any convention objects.
     </description>
    </method>
    <interface name="org.gradle.api.plugins.ExtensionContainer"/>
    <property name="extensionsAsDynamicObject" type="org.gradle.internal.metaobject.DynamicObject">
        <description>
     * Returns a dynamic object which represents the properties and methods contributed by the extensions and convention objects contained in this
     * convention.
     *
     * @return The dynamic object
     </description>
    </property>
    <property name="plugin" type="T">
        <description>
     * Locates the plugin convention object with the given type.
     *
     * @param type The convention object type.
     * @return The object. Never returns null.
     * @throws IllegalStateException When there is no such object contained in this convention, or when there are
     * multiple such objects.
     </description>
    </property>
    <property name="plugins" type="java.util.Map">
        <description>
     * Returns the plugin convention objects contained in this convention.
     *
     * @return The plugins. Returns an empty map when this convention does not contain any convention objects.
     </description>
    </property>
</type>
