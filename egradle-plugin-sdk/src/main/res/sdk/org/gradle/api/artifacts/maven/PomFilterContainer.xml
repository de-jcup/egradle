<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.artifacts.maven.PomFilterContainer" version="3.0">
    <description>
 * Manages a set of {@link MavenPom} instances and their associated {@link PublishFilter} instances.
 </description>
    <method name="addFilter" returnType="org.gradle.api.artifacts.maven.MavenPom">
        <description>
     * Adds a publish filter.
     *
     * @param name   The name of the filter
     * @param filter The filter
     * @return The Maven POM associated with the closure
     * @see PublishFilter
     * @see PomFilterContainer#addFilter(String, org.gradle.api.artifacts.maven.PublishFilter)
     </description>
        <parameter type="java.lang.String" name="name"/>
        <parameter type="groovy.lang.Closure" name="filter"/>
    </method>
    <method name="addFilter" returnType="org.gradle.api.artifacts.maven.MavenPom">
        <description>
     * If you want to deploy more than one artifact you need to define filters to select each of those artifacts. The method
     * returns a POM object associated with this filter, that allows you to customize the POM generation for the artifact selected
     * by the filter.
     *
     * @param name The name of the filter
     * @param publishFilter The filter to use
     * @return The POM associated with the filter
     </description>
        <parameter type="java.lang.String" name="name"/>
        <parameter type="org.gradle.api.artifacts.maven.PublishFilter" name="publishFilter"/>
    </method>
    <method name="filter" returnType="void" delegationTarget="org.gradle.api.artifacts.maven.PublishFilter">
        <description>
     * Sets the default publish filter.
     *
     * @param filter The filter to be set
     * @see PublishFilter
     * @see PomFilterContainer#setFilter(org.gradle.api.artifacts.maven.PublishFilter)
     </description>
        <parameter type="groovy.lang.Closure" name="filter"/>
    </method>
    <method name="filter" returnType="org.gradle.api.artifacts.maven.PublishFilter">
        <description>
     * Returns a filter added with {@link #addFilter(String, org.gradle.api.artifacts.maven.PublishFilter)}.
     *
     * @param name The name of the filter
     </description>
        <parameter type="java.lang.String" name="name"/>
    </method>
    <method name="getActivePomFilters" returnType="java.lang.Iterable"/>
    <method name="getFilter" returnType="org.gradle.api.artifacts.maven.PublishFilter">
        <description>
     * Returns the default filter being used. .
     *
     * @see #setFilter(org.gradle.api.artifacts.maven.PublishFilter)
     </description>
    </method>
    <method name="getPom" returnType="org.gradle.api.artifacts.maven.MavenPom">
        <description>
     * Returns the POM property of the custom filter.
     * The POM property can be used to customize the POM generation. By default the properties of such a POM object are all null.
     * Null means that Gradle will use default values for generating the Maven POM. Those default values are derived from the deployable artifact
     * and from the project type (e.g. java, war, ...). If you explicitly set a POM property, Gradle will use those instead.
     *
     * @return The Maven Pom
     </description>
    </method>
    <method name="pom" returnType="org.gradle.api.artifacts.maven.MavenPom" delegationTarget="org.gradle.api.artifacts.maven.MavenPom">
        <description>
     * Configures the default POM by a closure. The closure statements are delegated to the default POM.
     *
     * @param configureClosure
     * @return The default POM.
     * @see PomFilterContainer#getPom()
     </description>
        <parameter type="groovy.lang.Closure" name="configureClosure"/>
    </method>
    <method name="pom" returnType="org.gradle.api.artifacts.maven.MavenPom">
        <description>
     * Returns the POM associated with a filter added with {@link #addFilter(String, org.gradle.api.artifacts.maven.PublishFilter)}.
     *
     * @param name The name of the filter.
     </description>
        <parameter type="java.lang.String" name="name"/>
    </method>
    <method name="pom" returnType="org.gradle.api.artifacts.maven.MavenPom">
        <description>
     * Configures a POM by a closure. The closure statements are delegated to the POM object associated with the given name.
     *
     * @param name
     * @param configureClosure
     * @return The POM object associated with the given name.
     * @see PomFilterContainer#pom(String)
     </description>
        <parameter type="java.lang.String" name="name"/>
        <parameter type="groovy.lang.Closure" name="configureClosure"/>
    </method>
    <method name="setFilter" returnType="void">
        <description>
     * &lt;p&gt;Sets the default filter to be used. This filter is active if no custom filters have been added (see {@link #addFilter(String, org.gradle.api.artifacts.maven.PublishFilter)}).
     * If at least one custom filter has been added the default filter is not used any longer.&lt;/p&gt;
     * &lt;p&gt;The default for this property is {@link PublishFilter#ALWAYS_ACCEPT}.
     * If there is only one artifact you are fine with this filter. If there is more than one artifact, deployment will lead to
     * an exception, if you don't specify a filter that selects the artifact to deploy. If you want to deploy more than one artifact you have
     * to use the (see {@link #addFilter(String, org.gradle.api.artifacts.maven.PublishFilter)} method.&lt;/p&gt;
     *
     * @param defaultFilter
     * @see #getFilter()
     </description>
        <parameter type="org.gradle.api.artifacts.maven.PublishFilter" name="defaultFilter"/>
    </method>
    <method name="setPom" returnType="void">
        <description>
     * &lt;p&gt;Sets the default POM to be used. This POM is active if no custom filters have been added (see {@link #addFilter(String, org.gradle.api.artifacts.maven.PublishFilter)}).
     * If at least one custom filter has been added the default POM is not used any longer.&lt;/p&gt;
     * &lt;p&gt;Usually you don't need to set this property as the default value provides you a POM object you might use for configuration.
     * By default the properties of such a POM object are all null.
     * If they are null, Gradle will use default values for generating the Maven POM. Those default values are derived from the deployable artifact
     * and from the project type (e.g. java, war, ...). If you explicitly set a POM property, Gradle will use this instead.&lt;/p&gt;
     *
     * @param defaultPom
     </description>
        <parameter type="org.gradle.api.artifacts.maven.MavenPom" name="defaultPom"/>
    </method>
    <property name="activePomFilters" type="java.lang.Iterable"/>
    <property name="filter" type="org.gradle.api.artifacts.maven.PublishFilter">
        <description>
     * Returns the default filter being used. .
     *
     * @see #setFilter(org.gradle.api.artifacts.maven.PublishFilter)
     </description>
    </property>
    <property name="pom" type="org.gradle.api.artifacts.maven.MavenPom">
        <description>
     * Returns the POM property of the custom filter.
     * The POM property can be used to customize the POM generation. By default the properties of such a POM object are all null.
     * Null means that Gradle will use default values for generating the Maven POM. Those default values are derived from the deployable artifact
     * and from the project type (e.g. java, war, ...). If you explicitly set a POM property, Gradle will use those instead.
     *
     * @return The Maven Pom
     </description>
    </property>
</type>
