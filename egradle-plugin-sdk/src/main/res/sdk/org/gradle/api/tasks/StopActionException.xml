<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="false" language="gradle" name="org.gradle.api.tasks.StopActionException" version="3.0" superType="org.gradle.api.GradleException">
    <description> 
 &lt;p&gt;A &lt;code&gt;StopActionException&lt;/code&gt; is be thrown by a task &lt;a href='type://org.gradle.api.Action'&gt;org.gradle.api.Action&lt;/a&gt; or task action closure to 
 stop its own execution and to start execution of the task's next action. An action can usually be stopped by just 
 calling return inside the action closure. But if the action works with helper methods that can lead to redundant 
 code. For example:&lt;/p&gt; 
 
 &lt;pre&gt; 
     List existentSourceDirs = HelperUtil.getExistentSourceDirs() 
     if (!existentSourceDirs) {return} 
 &lt;/pre&gt; 
 &lt;p&gt;If the &lt;code&gt;getExistentSourceDirs()&lt;/code&gt; throws a &lt;code&gt;StopActionException&lt;/code&gt; instead, the tasks does not 
 need the if statement.&lt;/p&gt; 
 
 &lt;p&gt;Note that throwing this exception does not fail the execution of the task or the build.&lt;/p&gt; 
</description>
    <documentation/>
</type>
