<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.initialization.ProjectDescriptor" version="3.0">
    <description>
 * &lt;p&gt;A {@code ProjectDescriptor} declares the configuration required to create and evaluate a {@link
 * org.gradle.api.Project}.&lt;/p&gt;
 *
 * &lt;p&gt; A {@code ProjectDescriptor} is created when you add a project to the build from the settings script, using {@link
 * Settings#include(String[])} or {@link Settings#includeFlat(String[])}. You can access the descriptors using one of
 * the lookup methods on the {@link Settings} object.&lt;/p&gt;
 </description>
    <method name="getBuildFile" returnType="java.io.File">
        <description>
     * Returns the build file for this project.
     *
     * @return The build file. Never returns null.
     </description>
    </method>
    <method name="getBuildFileName" returnType="java.lang.String">
        <description>
     * Returns the name of the build file for this project. This name is interpreted relative to the project
     * directory.
     *
     * @return The build file name.
     </description>
    </method>
    <method name="getChildren" returnType="java.util.Set">
        <description>
     * Returns the children of this project, if any.
     *
     * @return The children. Returns an empty set if this project does not have any children.
     </description>
    </method>
    <method name="getName" returnType="java.lang.String">
        <description>
     * Returns the name of this project.
     *
     * @return The name of the project. Never returns null.
     </description>
    </method>
    <method name="getParent" returnType="org.gradle.api.initialization.ProjectDescriptor">
        <description>
     * Returns the parent of this project, if any. Returns null if this project is the root project.
     *
     * @return The parent, or null if this is the root project.
     </description>
    </method>
    <method name="getPath" returnType="java.lang.String">
        <description>
     * Returns the path of this project. The path can be used as a unique identifier for this project.
     *
     * @return The path. Never returns null.
     </description>
    </method>
    <method name="getProjectDir" returnType="java.io.File">
        <description>
     * Returns the project directory of this project.
     *
     * @return The project directory. Never returns null.
     </description>
    </method>
    <method name="setBuildFileName" returnType="void">
        <description>
     * Sets the name of the build file. This name is interpreted relative to the project directory.
     *
     * @param name The build file name. Should not be null.
     </description>
        <parameter type="java.lang.String" name="name"/>
    </method>
    <method name="setName" returnType="void">
        <description>
     * Sets the name of this project.
     *
     * @param name The new name for the project. Should not be null
     </description>
        <parameter type="java.lang.String" name="name"/>
    </method>
    <method name="setProjectDir" returnType="void">
        <description>
     * Sets the project directory of this project.
     *
     * @param dir The new project directory. Should not be null.
     </description>
        <parameter type="java.io.File" name="dir"/>
    </method>
    <property name="buildFile" type="java.io.File">
        <description>
     * Returns the build file for this project.
     *
     * @return The build file. Never returns null.
     </description>
    </property>
    <property name="buildFileName" type="java.lang.String">
        <description>
     * Returns the name of the build file for this project. This name is interpreted relative to the project
     * directory.
     *
     * @return The build file name.
     </description>
    </property>
    <property name="children" type="java.util.Set">
        <description>
     * Returns the children of this project, if any.
     *
     * @return The children. Returns an empty set if this project does not have any children.
     </description>
    </property>
    <property name="name" type="java.lang.String">
        <description>
     * Returns the name of this project.
     *
     * @return The name of the project. Never returns null.
     </description>
    </property>
    <property name="parent" type="org.gradle.api.initialization.ProjectDescriptor">
        <description>
     * Returns the parent of this project, if any. Returns null if this project is the root project.
     *
     * @return The parent, or null if this is the root project.
     </description>
    </property>
    <property name="path" type="java.lang.String">
        <description>
     * Returns the path of this project. The path can be used as a unique identifier for this project.
     *
     * @return The path. Never returns null.
     </description>
    </property>
    <property name="projectDir" type="java.io.File">
        <description>
     * Returns the project directory of this project.
     *
     * @return The project directory. Never returns null.
     </description>
    </property>
</type>
