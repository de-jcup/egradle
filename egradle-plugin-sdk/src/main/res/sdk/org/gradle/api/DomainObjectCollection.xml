<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.DomainObjectCollection" version="3.0">
    <description>
 * &lt;p&gt;A {@code DomainObjectCollection} is a specialised {@link Collection} that adds the ability to modification notifications and live filtered sub collections.&lt;/p&gt;
 *
 * &lt;p&gt;The filtered collections returned by the filtering methods, such as {@link #matching(Closure)}, return collections that are &lt;em&gt;live&lt;/em&gt;. That is, they reflect 
 * changes made to the source collection that they were created from. This is true for filtered collections made from filtered collections etc.&lt;/p&gt;
 * &lt;p&gt;
 * You can also add actions which are executed as elements are added to the collection. Actions added to filtered collections will be fired if an addition/removal
 * occurs for the source collection that matches the filter.&lt;/p&gt;
 *
 * @param &lt;T&gt; The type of domain objects in this collection.
 </description>
    <method name="all" returnType="void">
        <description>
     * Executes the given closure against all objects in this collection, and any objects subsequently added to this collection. The object is passed to the closure as the closure
     * delegate. Alternatively, it is also passed as a parameter.
     *
     * @param action The action to be executed
     </description>
        <parameter type="groovy.lang.Closure" name="action"/>
    </method>
    <method name="all" returnType="void">
        <description>
     * Executes the given action against all objects in this collection, and any objects subsequently added to this
     * collection.
     *
     * @param action The action to be executed
     </description>
        <parameter type="org.gradle.api.Action" name="action"/>
    </method>
    <method name="findAll" returnType="java.util.Collection">
        <description>
     * Returns a collection which contains the objects in this collection which meet the given closure specification.
     *
     * @param spec The specification to use. The closure gets a collection element as an argument.
     * @return The collection of matching objects. Returns an empty collection if there are no such objects in this
     *         collection.
     </description>
        <parameter type="groovy.lang.Closure" name="spec"/>
    </method>
    <method name="matching" returnType="org.gradle.api.DomainObjectCollection">
        <description>
     * Returns a collection which contains the objects in this collection which meet the given closure specification. The
     * returned collection is live, so that when matching objects are added to this collection, they are also visible in
     * the filtered collection.
     *
     * @param spec The specification to use. The closure gets a collection element as an argument.
     * @return The collection of matching objects. Returns an empty collection if there are no such objects in this
     *         collection.
     </description>
        <parameter type="groovy.lang.Closure" name="spec"/>
    </method>
    <method name="matching" returnType="org.gradle.api.DomainObjectCollection">
        <description>
     * Returns a collection which contains the objects in this collection which meet the given specification. The
     * returned collection is live, so that when matching objects are added to this collection, they are also visible in
     * the filtered collection.
     *
     * @param spec The specification to use.
     * @return The collection of matching objects. Returns an empty collection if there are no such objects in this
     *         collection.
     </description>
        <parameter type="org.gradle.api.specs.Spec" name="spec"/>
    </method>
    <method name="whenObjectAdded" returnType="void">
        <description>
     * Adds a closure to be called when an object is added to this collection. The newly added object is passed to the
     * closure as the parameter.
     *
     * @param action The closure to be called
     </description>
        <parameter type="groovy.lang.Closure" name="action"/>
    </method>
    <method name="whenObjectAdded" returnType="org.gradle.api.Action">
        <description>
     * Adds an {@code Action} to be executed when an object is added to this collection.
     *
     * @param action The action to be executed
     * @return the supplied action
     </description>
        <parameter type="org.gradle.api.Action" name="action"/>
    </method>
    <method name="whenObjectRemoved" returnType="void">
        <description>
     * Adds a closure to be called when an object is removed from this collection. The removed object is passed to the
     * closure as the parameter.
     *
     * @param action The closure to be called
     </description>
        <parameter type="groovy.lang.Closure" name="action"/>
    </method>
    <method name="whenObjectRemoved" returnType="org.gradle.api.Action">
        <description>
     * Adds an {@code Action} to be executed when an object is removed from this collection.
     *
     * @param action The action to be executed
     * @return the supplied action
     </description>
        <parameter type="org.gradle.api.Action" name="action"/>
    </method>
    <method name="withType" returnType="org.gradle.api.DomainObjectCollection">
        <description>
     * Returns a collection containing the objects in this collection of the given type.  The returned collection is
     * live, so that when matching objects are later added to this collection, they are also visible in the filtered
     * collection.
     *
     * @param type The type of objects to find.
     * @return The matching objects. Returns an empty collection if there are no such objects in this collection.
     </description>
        <parameter type="java.lang.Class" name="type"/>
    </method>
    <method name="withType" returnType="org.gradle.api.DomainObjectCollection">
        <description>
     * Returns a collection containing the objects in this collection of the given type. Equivalent to calling
     * {@code withType(type).all(configureClosure)}.
     *
     * @param type The type of objects to find.
     * @param configureClosure The closure to execute for each object in the resulting collection.
     * @return The matching objects. Returns an empty collection if there are no such objects in this collection.
     </description>
        <parameter type="java.lang.Class" name="type"/>
        <parameter type="groovy.lang.Closure" name="configureClosure"/>
    </method>
    <method name="withType" returnType="org.gradle.api.DomainObjectCollection">
        <description>
     * Returns a collection containing the objects in this collection of the given type. Equivalent to calling
     * {@code withType(type).all(configureAction)}
     *
     * @param type The type of objects to find.
     * @param configureAction The action to execute for each object in the resulting collection.
     * @return The matching objects. Returns an empty collection if there are no such objects in this collection.
     </description>
        <parameter type="java.lang.Class" name="type"/>
        <parameter type="org.gradle.api.Action" name="configureAction"/>
    </method>
    <interface name="java.util.Collection"/>
</type>
