<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.reporting.Report" version="3.0" documented="true">
    <description>
 * A file based report to be created.
 * &lt;p&gt;
 * Tasks that produce reports expose instances of this type for configuration via the {@link Reporting} interface.
 </description>
    <method name="determineName" returnType="java.lang.String">
        <parameter type="org.gradle.api.reporting.Report" name="report"/>
    </method>
    <method name="getDestination" returnType="java.io.File">
        <description>
     * The location on the filesystem of the report when it is generated.
     * &lt;p&gt;
     * Depending on the {@link #getOutputType() output type} of the report, this may point to
     * a file or a directory.
     * &lt;p&gt;
     * Subtypes may implement setters for the destination.
     *
     * @return The location on the filesystem of the report when it is generated
     </description>
    </method>
    <method name="getDisplayName" returnType="java.lang.String">
        <description>
     * A more descriptive name of this report. Used when the report is referenced for end users.
     *
     * @return A more descriptive name of this report.
     </description>
    </method>
    <method name="getName" returnType="java.lang.String">
        <description>
     * The symbolic name of this report.
     * &lt;p&gt;
     * The name of the report usually indicates the format (e.g. XML, HTML etc.) but can be anything.
     * &lt;p&gt;
     * When part of a {@link ReportContainer}, reports are accessed via their name. That is, given a report container variable
     * named {@code reports} containing a report who's {@code getName()} returns {@code "html"}, the report could be accessed
     * via:
     * &lt;p&gt;
     * &lt;pre&gt;
     * reports.html
     * &lt;/pre&gt;
     *
     * @return The name of this report.
     </description>
    </method>
    <method name="getOutputType" returnType="org.gradle.api.reporting.Report.OutputType">
        <description>
 * A file based report to be created.
 * &lt;p&gt;
 * Tasks that produce reports expose instances of this type for configuration via the {@link Reporting} interface.
 </description>
    </method>
    <method name="isEnabled" returnType="boolean">
        <description>
     * Whether or not this report should be generated by whatever generates it.
     * &lt;p&gt;
     * If {@code true}, the generator of this report will generate it at the appropriate time.
     * If {@code false}, the generator of this report will not generate this report.
     *
     * @return Whether or not this report should be generated by whatever generates it.
     </description>
    </method>
    <method name="setEnabled" returnType="void">
        <description>
     * Whether or not this report should be generated by whatever generates it.
     *
     * @see #isEnabled()
     * @param enabled Whether or not this report should be generated by whatever generates it.
     </description>
        <parameter type="boolean" name="enabled"/>
    </method>
    <interface name="java.io.Serializable"/>
    <interface name="org.gradle.util.Configurable"/>
    <property name="destination" type="java.io.File" documented="true">
        <description>
     * The location on the filesystem of the report when it is generated.
     * &lt;p&gt;
     * Depending on the {@link #getOutputType() output type} of the report, this may point to
     * a file or a directory.
     * &lt;p&gt;
     * Subtypes may implement setters for the destination.
     *
     * @return The location on the filesystem of the report when it is generated
     </description>
    </property>
    <property name="displayName" type="java.lang.String" documented="true">
        <description>
     * A more descriptive name of this report. Used when the report is referenced for end users.
     *
     * @return A more descriptive name of this report.
     </description>
    </property>
    <property name="enabled" type="boolean" documented="true">
        <description>
     * Whether or not this report should be generated by whatever generates it.
     * &lt;p&gt;
     * If {@code true}, the generator of this report will generate it at the appropriate time.
     * If {@code false}, the generator of this report will not generate this report.
     *
     * @return Whether or not this report should be generated by whatever generates it.
     </description>
    </property>
    <property name="name" type="java.lang.String" documented="true">
        <description>
     * The symbolic name of this report.
     * &lt;p&gt;
     * The name of the report usually indicates the format (e.g. XML, HTML etc.) but can be anything.
     * &lt;p&gt;
     * When part of a {@link ReportContainer}, reports are accessed via their name. That is, given a report container variable
     * named {@code reports} containing a report who's {@code getName()} returns {@code "html"}, the report could be accessed
     * via:
     * &lt;p&gt;
     * &lt;pre&gt;
     * reports.html
     * &lt;/pre&gt;
     *
     * @return The name of this report.
     </description>
    </property>
    <property name="outputType" type="org.gradle.api.reporting.Report.OutputType" documented="true">
        <description>
 * A file based report to be created.
 * &lt;p&gt;
 * Tasks that produce reports expose instances of this type for configuration via the {@link Reporting} interface.
 </description>
    </property>
</type>
