<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.publish.maven.MavenPublication" version="3.0" documented="true">
    <description>
 * A {@code MavenPublication} is the representation/configuration of how Gradle should publish something in Maven format.
 *
 * You directly add a named Maven Publication the project's {@code publishing.publications} container by providing {@link MavenPublication} as the type.
 * &lt;pre&gt;
 * publishing {
 *   publications {
 *     myPublicationName(MavenPublication) {
 *       // Configure the publication here
 *     }
 *   }
 * }
 * &lt;/pre&gt;
 *
 * The default Maven POM identifying attributes are mapped as follows:
 * &lt;ul&gt;
 * &lt;li&gt;{@code groupId} - {@code project.group}&lt;/li&gt;
 * &lt;li&gt;{@code artifactId} - {@code project.name}&lt;/li&gt;
 * &lt;li&gt;{@code version} - {@code project.version}&lt;/li&gt;
 * &lt;/ul&gt;
 *
 * &lt;p&gt;
 * For certain common use cases, it's often sufficient to specify the component to publish, and nothing more ({@link #from(org.gradle.api.component.SoftwareComponent)}.
 * The published component is used to determine which artifacts to publish, and which dependencies should be listed in the generated POM file.
 * &lt;/p&gt;&lt;p&gt;
 * To add additional artifacts to the set published, use the {@link #artifact(Object)} and {@link #artifact(Object, org.gradle.api.Action)} methods.
 * You can also completely replace the set of published artifacts using {@link #setArtifacts(Iterable)}.
 * Together, these methods give you full control over what artifacts will be published.
 * &lt;/p&gt;&lt;p&gt;
 * For any other tweaks to the publication, it is possible to modify the generated POM prior to publication. This is done using the {@link MavenPom#withXml(org.gradle.api.Action)} method
 * of the POM returned via the {@link #getPom()} method, or directly by an action (or closure) passed into {@link #pom(org.gradle.api.Action)}.
 * &lt;/p&gt;
 * &lt;h4&gt;Example of publishing a java module with a source artifact and custom POM description&lt;/h4&gt;
 * &lt;pre autoTested="true"&gt;
 * apply plugin: "java"
 * apply plugin: "maven-publish"
 *
 * task sourceJar(type: Jar) {
 *   from sourceSets.main.allJava
 *   classifier "sources"
 * }
 *
 * publishing {
 *   publications {
 *     myPublication(MavenPublication) {
 *       from components.java
 *       artifact sourceJar
 *       pom.withXml {
 *         asNode().appendNode('description', 'A demonstration of Maven POM customization')
 *       }
 *     }
 *   }
 * }
 * &lt;/pre&gt;
 *
 * @since 1.4
 </description>
    <method name="artifact" returnType="org.gradle.api.publish.maven.MavenArtifact" documented="true">
        <description>
     * Creates a custom {@link MavenArtifact} to be included in the publication.
     *
     * The &lt;code&gt;artifact&lt;/code&gt; method can take a variety of input:
     * &lt;ul&gt;
     *     &lt;li&gt;A {@link org.gradle.api.artifacts.PublishArtifact} instance. Extension and classifier values are taken from the wrapped instance.&lt;/li&gt;
     *     &lt;li&gt;An {@link org.gradle.api.tasks.bundling.AbstractArchiveTask} instance. Extension and classifier values are taken from the wrapped instance.&lt;/li&gt;
     *     &lt;li&gt;Anything that can be resolved to a {@link java.io.File} via the {@link org.gradle.api.Project#file(Object)} method.
     *          Extension and classifier values are interpolated from the file name.&lt;/li&gt;
     *     &lt;li&gt;A {@link java.util.Map} that contains a 'source' entry that can be resolved as any of the other input types, including file.
     *         This map can contain a 'classifier' and an 'extension' entry to further configure the constructed artifact.&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * The following example demonstrates the addition of various custom artifacts.
     * &lt;pre autoTested="true"&gt;
     * apply plugin: "maven-publish"
     *
     * task sourceJar(type: Jar) {
     *   classifier "sources"
     * }
     *
     * publishing {
     *   publications {
     *     maven(MavenPublication) {
     *       artifact sourceJar // Publish the output of the sourceJar task
     *       artifact 'my-file-name.jar' // Publish a file created outside of the build
     *       artifact source: sourceJar, classifier: 'src', extension: 'zip'
     *     }
     *   }
     * }
     * &lt;/pre&gt;
     *
     * @param source The source of the artifact content.
     </description>
        <parameter type="java.lang.Object" name="source"/>
    </method>
    <method name="artifact" returnType="org.gradle.api.publish.maven.MavenArtifact" documented="true">
        <description>
     * Creates an {@link MavenArtifact} to be included in the publication, which is configured by the associated action.
     *
     * The first parameter is used to create a custom artifact and add it to the publication, as per {@link #artifact(Object)}.
     * The created {@link MavenArtifact} is then configured using the supplied action, which can override the extension or classifier of the artifact.
     * This method also accepts the configure action as a closure argument, by type coercion.
     *
     * &lt;pre autoTested="true"&gt;
     * apply plugin: "maven-publish"
     *
     * task sourceJar(type: Jar) {
     *   classifier "sources"
     * }
     *
     * publishing {
     *   publications {
     *     maven(MavenPublication) {
     *       artifact(sourceJar) {
     *         // These values will be used instead of the values from the task. The task values will not be updated.
     *         classifier "src"
     *         extension "zip"
     *       }
     *       artifact("my-docs-file.htm") {
     *         classifier "documentation"
     *         extension "html"
     *       }
     *     }
     *   }
     * }
     * &lt;/pre&gt;
     *
     * @param source The source of the artifact.
     * @param config An action to configure the values of the constructed {@link MavenArtifact}.
     </description>
        <parameter type="java.lang.Object" name="source"/>
        <parameter type="org.gradle.api.Action" name="config"/>
    </method>
    <method name="from" returnType="void" documented="true">
        <description>
     * Provides the software component that should be published.
     *
     * &lt;ul&gt;
     *     &lt;li&gt;Any artifacts declared by the component will be included in the publication.&lt;/li&gt;
     *     &lt;li&gt;The dependencies declared by the component will be included in the published meta-data.&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * Currently 2 types of component are supported: 'components.java' (added by the JavaPlugin) and 'components.web' (added by the WarPlugin).
     * For any individual MavenPublication, only a single component can be provided in this way.
     *
     * The following example demonstrates how to publish the 'java' component to a Maven repository.
     * &lt;pre autoTested="true"&gt;
     * apply plugin: "java"
     * apply plugin: "maven-publish"
     *
     * publishing {
     *   publications {
     *     maven(MavenPublication) {
     *       from components.java
     *     }
     *   }
     * }
     * &lt;/pre&gt;
     *
     * @param component The software component to publish.
     </description>
        <parameter type="org.gradle.api.component.SoftwareComponent" name="component"/>
    </method>
    <method name="getArtifactId" returnType="java.lang.String">
        <description>
     * Returns the artifactId for this publication.
     </description>
    </method>
    <method name="getArtifacts" returnType="org.gradle.api.publish.maven.MavenArtifactSet">
        <description>
     * Returns the complete set of artifacts for this publication.
     * @return the artifacts.
     </description>
    </method>
    <method name="getGroupId" returnType="java.lang.String">
        <description>
     * Returns the groupId for this publication.
     </description>
    </method>
    <method name="getPom" returnType="org.gradle.api.publish.maven.MavenPom">
        <description>
     * The POM that will be published.
     *
     * @return The POM that will be published.
     </description>
    </method>
    <method name="getVersion" returnType="java.lang.String">
        <description>
     * Returns the version for this publication.
     </description>
    </method>
    <method name="pom" returnType="void" documented="true">
        <description>
     * Configures the POM that will be published.
     *
     * The supplied action will be executed against the {@link #getPom()} result. This method also accepts a closure argument, by type coercion.
     *
     * @param configure The configuration action.
     </description>
        <parameter type="org.gradle.api.Action" name="configure"/>
    </method>
    <method name="setArtifactId" returnType="void">
        <description>
     * Sets the artifactId for this publication.
     </description>
        <parameter type="java.lang.String" name="artifactId"/>
    </method>
    <method name="setArtifacts" returnType="void" documented="true">
        <description>
     * Clears any previously added artifacts from {@link #getArtifacts} and creates artifacts from the specified sources.
     * Each supplied source is interpreted as per {@link #artifact(Object)}.
     *
     * For example, to exclude the dependencies declared by a component and instead use a custom set of artifacts:
     * &lt;pre autoTested="true"&gt;
     * apply plugin: "java"
     * apply plugin: "maven-publish"
     *
     * task sourceJar(type: Jar) {
     *   classifier "sources"
     * }

     * publishing {
     *   publications {
     *     maven(MavenPublication) {
     *       from components.java
     *       artifacts = ["my-custom-jar.jar", sourceJar]
     *     }
     *   }
     * }
     * &lt;/pre&gt;
     *
     * @param sources The set of artifacts for this publication.
     </description>
        <parameter type="java.lang.Iterable" name="sources"/>
    </method>
    <method name="setGroupId" returnType="void">
        <description>
     * Sets the groupId for this publication.
     </description>
        <parameter type="java.lang.String" name="groupId"/>
    </method>
    <method name="setVersion" returnType="void">
        <description>
     * Sets the version for this publication.
     </description>
        <parameter type="java.lang.String" name="version"/>
    </method>
    <interface name="org.gradle.api.publish.Publication"/>
    <property name="artifactId" type="java.lang.String" documented="true">
        <description>
     * Returns the artifactId for this publication.
     </description>
    </property>
    <property name="artifacts" type="org.gradle.api.publish.maven.MavenArtifactSet" documented="true">
        <description>
     * Returns the complete set of artifacts for this publication.
     * @return the artifacts.
     </description>
    </property>
    <property name="groupId" type="java.lang.String" documented="true">
        <description>
     * Returns the groupId for this publication.
     </description>
    </property>
    <property name="pom" type="org.gradle.api.publish.maven.MavenPom" documented="true">
        <description>
     * The POM that will be published.
     *
     * @return The POM that will be published.
     </description>
    </property>
    <property name="version" type="java.lang.String" documented="true">
        <description>
     * Returns the version for this publication.
     </description>
    </property>
</type>
