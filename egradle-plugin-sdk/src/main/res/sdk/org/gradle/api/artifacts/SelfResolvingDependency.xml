<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<type interface="true" language="gradle" name="org.gradle.api.artifacts.SelfResolvingDependency" version="3.0">
    <description> A &lt;a href='type://SelfResolvingDependency'&gt;SelfResolvingDependency&lt;/a&gt; is a &lt;a href='type://Dependency'&gt;Dependency&lt;/a&gt; which is able to resolve itself, independent of a
 repository.

</description>
    <method name="resolve" returnType="java.util.Set">
        <description> Resolves this dependency. A &lt;a href='type://org.gradle.api.artifacts.ProjectDependency'&gt;org.gradle.api.artifacts.ProjectDependency&lt;/a&gt; is resolved with transitive equals true
 by this method. 

 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The files which make up this dependency.
 @see #resolve(boolean) 

</description>
    </method>
    <method name="resolve" returnType="java.util.Set">
        <description> Resolves this dependency by specifying the transitive mode. This mode has only an effect if the self resolved dependency
 is of type &lt;a href='type://org.gradle.api.artifacts.ProjectDependency'&gt;org.gradle.api.artifacts.ProjectDependency&lt;/a&gt;. In this case, if transitive is &lt;code&gt;false&lt;/code&gt;,
 only the self resolving dependencies of the project configuration which are no project dependencies are resolved. If transitive
 is set to true, other project dependencies belonging to the configuration of the resolved project dependency are
 resolved recursively. 

 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;transitive Whether to resolve transitively. Has only an effect on a &lt;a href='type://org.gradle.api.artifacts.ProjectDependency'&gt;org.gradle.api.artifacts.ProjectDependency&lt;/a&gt; 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The files which make up this dependency.

</description>
        <parameter type="boolean" name="transitive"/>
    </method>
    <interface name="org.gradle.api.Buildable"/>
    <interface name="org.gradle.api.artifacts.Dependency"/>
</type>
