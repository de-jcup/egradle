<?xml version="1.0" encoding="UTF-8" standalone="yes"?><type interface="true" language="gradle" name="org.gradle.api.file.FileCollection" version="3.0"><description> 
 &lt;p&gt;A &lt;a href='type://FileCollection'&gt;FileCollection&lt;/a&gt; represents a collection of files which you can query in certain ways. A file collection 
 is often used to define a classpath, or to add files to a container.&lt;/p&gt; 
 
 &lt;p&gt;You can obtain a &lt;a href='type://FileCollection'&gt;FileCollection&lt;/a&gt; instance using &lt;a href='type://org.gradle.api.Project#files'&gt;org.gradle.api.Project#files&lt;/a&gt;.&lt;/p&gt; 
</description><method name="getFiles" returnType="java.util.Set"><description> 
 Returns the contents of this collection as a Set. 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The files. Returns an empty set if this collection is empty. 
</description></method><method name="add" returnType="org.gradle.api.file.FileCollection"><description> 
 &lt;p&gt;Adds another collection to this collection. This is an optional operation.&lt;/p&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;collection The collection to add. 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;This 
 @throws UnsupportedOperationException When this collection does not allow modification. 
</description><parameter type="org.gradle.api.file.FileCollection" name="collection"/></method><method name="getSingleFile" returnType="java.io.File"><description> 
 Returns the content of this collection, asserting it contains exactly one file. 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The file. 
 @throws IllegalStateException when this collection does not contain exactly one file. 
</description></method><method name="addToAntBuilder" returnType="java.lang.Object" delegationTarget="addToAntBuilder"><description> 
 Adds this collection to an Ant task as a nested node. Equivalent to calling &lt;a href='type://addToAntBuilder(builder, 
nodeName,AntType.ResourceCollection)'&gt;addToAntBuilder(builder, 
nodeName,AntType.ResourceCollection)&lt;/a&gt;. 
</description><parameter type="java.lang.Object" name="builder"/><parameter type="java.lang.String" name="nodeName"/></method><method name="addToAntBuilder" returnType="void" delegationTarget="FileCollection"><description> 
 &lt;p&gt;A &lt;a href='type://FileCollection'&gt;FileCollection&lt;/a&gt; represents a collection of files which you can query in certain ways. A file collection 
 is often used to define a classpath, or to add files to a container.&lt;/p&gt; 
 
 &lt;p&gt;You can obtain a &lt;a href='type://FileCollection'&gt;FileCollection&lt;/a&gt; instance using &lt;a href='type://org.gradle.api.Project#files'&gt;org.gradle.api.Project#files&lt;/a&gt;.&lt;/p&gt; 
</description><parameter type="java.lang.Object" name="builder"/><parameter type="java.lang.String" name="nodeName"/><parameter type="org.gradle.api.file.FileCollection.AntType" name="type"/></method><method name="contains" returnType="boolean" delegationTarget="getFiles"><description> 
 Determines whether this collection contains the given file. Generally, this method is more efficient than calling 
 &lt;a href='type://getFiles().contains(file)'&gt;getFiles().contains(file)&lt;/a&gt;. 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;file The file to check for. 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;true if this collection contains the given file, false otherwise. 
</description><parameter type="java.io.File" name="file"/></method><method name="filter" returnType="org.gradle.api.file.FileCollection"><description> 
 &lt;p&gt;Restricts the contents of this collection to those files which match the given criteria. The filtered 
 collection is live, so that it reflects any changes to this collection.&lt;/p&gt; 
 
 &lt;p&gt;The given closure is passed the File as a parameter, and should return a boolean value.&lt;/p&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;filterClosure The closure to use to select the contents of the filtered collection. 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The filtered collection. 
</description><parameter type="groovy.lang.Closure" name="filterClosure"/></method><method name="stopExecutionIfEmpty" returnType="org.gradle.api.file.FileCollection" delegationTarget="StopExecutionException"><description> 
 Throws a &lt;a href='type://StopExecutionException'&gt;StopExecutionException&lt;/a&gt; if this collection is empty. 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;this 
 @throws StopExecutionException When this collection is empty. 
</description></method><method name="getAsFileTree" returnType="org.gradle.api.file.FileTree" delegationTarget="FileTree"><description> 
 Converts this collection to a &lt;a href='type://FileTree'&gt;FileTree&lt;/a&gt;. Generally, for each file in this collection, the resulting file 
 tree will contain the source file at the root of the tree. For each directory in this collection, the resulting 
 file tree will contain all the files under the source directory. 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;this collection as a &lt;a href='type://FileTree'&gt;FileTree&lt;/a&gt;. Never returns null. 
</description></method><method name="plus" returnType="org.gradle.api.file.FileCollection" delegationTarget="FileCollection"><description> 
 &lt;p&gt;Returns a &lt;a href='type://FileCollection'&gt;FileCollection&lt;/a&gt; which contains the union of this collection and the given collection. The 
 returned collection is live, and tracks changes to both source collections.&lt;/p&gt; 
 
 &lt;p&gt;You can call this method in your build script using the &lt;a href='type://+'&gt;+&lt;/a&gt; operator.&lt;/p&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;collection The other collection. Should not be null. 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;A new collection containing the union. 
</description><parameter type="org.gradle.api.file.FileCollection" name="collection"/></method><method name="asType" returnType="java.lang.Object" delegationTarget="Collection"><description> 
 &lt;p&gt;Converts this collection into an object of the specified type. Supported types are: &lt;a href='type://Collection'&gt;Collection&lt;/a&gt;, &lt;a href='type://List'&gt;List&lt;/a&gt;, &lt;a href='type://Set'&gt;Set&lt;/a&gt;, &lt;a href='type://Object[]'&gt;Object[]&lt;/a&gt;, &lt;a href='type://File[]'&gt;File[]&lt;/a&gt;, &lt;a href='type://File'&gt;File&lt;/a&gt;, and &lt;a href='type://FileTree'&gt;FileTree&lt;/a&gt;.&lt;/p&gt; 
 
 &lt;p&gt;You can call this method in your build script using the &lt;a href='type://as'&gt;as&lt;/a&gt; operator.&lt;/p&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;type The type to convert to. 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The converted value. 
 @throws UnsupportedOperationException When an unsupported type is specified. 
</description><parameter type="java.lang.Class" name="type"/></method><method name="filter" returnType="org.gradle.api.file.FileCollection"><description> 
 &lt;p&gt;Restricts the contents of this collection to those files which match the given criteria. The filtered 
 collection is live, so that it reflects any changes to this collection.&lt;/p&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;filterSpec The criteria to use to select the contents of the filtered collection. 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The filtered collection. 
</description><parameter type="org.gradle.api.specs.Spec" name="filterSpec"/></method><method name="isEmpty" returnType="boolean" delegationTarget="getFiles"><description> 
 Returns true if this collection is empty. Generally, calling this method is more efficient than calling &lt;a href='type://getFiles().isEmpty()'&gt;getFiles().isEmpty()&lt;/a&gt;. 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;true if this collection is empty, false otherwise. 
</description></method><method name="getAsPath" returnType="java.lang.String"><description> 
 Returns the contents of this collection as a platform-specific path. This can be used, for example, in an Ant 
 &lt;path&gt; element. 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The path. Returns an empty string if this collection is empty. 
</description></method><method name="minus" returnType="org.gradle.api.file.FileCollection" delegationTarget="FileCollection"><description> 
 &lt;p&gt;Returns a &lt;a href='type://FileCollection'&gt;FileCollection&lt;/a&gt; which contains the difference between this collection and the given 
 collection. The returned collection is live, and tracks changes to both source collections.&lt;/p&gt; 
 
 &lt;p&gt;You can call this method in your build script using the &lt;a href='type://-'&gt;-&lt;/a&gt; operator.&lt;/p&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;collection The other collection. Should not be null. 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;A new collection containing the difference. 
</description><parameter type="org.gradle.api.file.FileCollection" name="collection"/></method><property name="files" type="java.util.Set"><description> 
 Returns the contents of this collection as a Set. 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The files. Returns an empty set if this collection is empty. 
</description></property><property name="asPath" type="java.lang.String"><description> 
 Returns the contents of this collection as a platform-specific path. This can be used, for example, in an Ant 
 &lt;path&gt; element. 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The path. Returns an empty string if this collection is empty. 
</description></property><property name="empty" type="boolean"><description> 
 Returns true if this collection is empty. Generally, calling this method is more efficient than calling &lt;a href='type://getFiles().isEmpty()'&gt;getFiles().isEmpty()&lt;/a&gt;. 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;true if this collection is empty, false otherwise. 
</description></property><property name="asFileTree" type="org.gradle.api.file.FileTree"><description> 
 Converts this collection to a &lt;a href='type://FileTree'&gt;FileTree&lt;/a&gt;. Generally, for each file in this collection, the resulting file 
 tree will contain the source file at the root of the tree. For each directory in this collection, the resulting 
 file tree will contain all the files under the source directory. 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;this collection as a &lt;a href='type://FileTree'&gt;FileTree&lt;/a&gt;. Never returns null. 
</description></property><property name="singleFile" type="java.io.File"><description> 
 Returns the content of this collection, asserting it contains exactly one file. 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The file. 
 @throws IllegalStateException when this collection does not contain exactly one file. 
</description></property></type>