<?xml version="1.0" encoding="UTF-8" standalone="yes"?><type interface="true" language="gradle" name="org.gradle.api.artifacts.DependencySubstitutions" version="3.0"><description> 
 Allows replacing dependencies with other dependencies. 
 @since 2.5 
</description><method name="substitute" returnType="org.gradle.api.artifacts.DependencySubstitutions.Substitution"><description> 
 DSL-friendly mechanism to construct a dependency substitution for dependencies matching the provided selector. 
 &lt;p/&gt; 
 Examples: 
 &lt;pre autoTested=''&gt; 
 configurations { main } 
 configurations.main.resolutionStrategy.dependencySubstitution { 
   // Substitute project and module dependencies 
   substitute module('org.gradle:api') with project(':api') 
   substitute project(':util') with module('org.gradle:util:3.0') 
 
   // Substitute one module dependency for another 
   substitute module('org.gradle:api:2.0') with module('org.gradle:api:2.1') 
 } 
 &lt;/pre&gt; 
</description><parameter type="org.gradle.api.artifacts.component.ComponentSelector" name="substitutedDependency"/></method><method name="module" returnType="org.gradle.api.artifacts.component.ComponentSelector"><description> 
 Create a ModuleComponentSelector from the provided input string. Strings must be in the format "{group}:{module}:{version}". 
</description><parameter type="java.lang.String" name="notation"/></method><method name="project" returnType="org.gradle.api.artifacts.component.ComponentSelector"><description> 
 Create a ProjectComponentSelector from the provided input string. Strings must be in the format ":path". 
</description><parameter type="java.lang.String" name="path"/></method><method name="all" returnType="org.gradle.api.artifacts.DependencySubstitutions" delegationTarget="DependencySubstitution"><description> 
 Adds a dependency substitution rule that is triggered for every dependency (including transitive) 
 when the configuration is being resolved. The action receives an instance of &lt;a href='type://DependencySubstitution'&gt;DependencySubstitution&lt;/a&gt; 
 that can be used to find out what dependency is being resolved and to influence the resolution process. 
 &lt;p/&gt; 
 Example: 
 &lt;pre autoTested=''&gt; 
 configurations { main } 
 // add dependency substitution rules 
 configurations.main.resolutionStrategy.dependencySubstitution { 
       dependency.useTarget details.requested.group + ':groovy:' + details.requested.version 
     } 
   } 
   // Use a rule to replace all missing projects with module dependencies 
   all {dependency.requested.path}") 
       if (targetProject == null) { 
         dependency.useTarget "org.myorg:" + dependency.requested.path + ":+" 
       } 
     } 
   } 
 } 
 &lt;/pre&gt; 
 
 The rules are evaluated in order they are declared. Rules are evaluated after forced modules are applied (see &lt;a href='type://ResolutionStrategy#force(Object...)'&gt;ResolutionStrategy#force(Object...)&lt;/a&gt; 
 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;this 
</description><parameter type="org.gradle.api.Action" name="rule"/></method></type>