<?xml version="1.0" encoding="UTF-8" standalone="yes"?><type interface="true" language="gradle" name="org.gradle.api.tasks.TaskContainer" version="3.0"><description> 
 &lt;p&gt;A &lt;a href='type://TaskContainer'&gt;TaskContainer&lt;/a&gt; is responsible for managing a set of &lt;a href='type://Task'&gt;Task&lt;/a&gt; instances.&lt;/p&gt; 
 
 &lt;p&gt;You can obtain a &lt;a href='type://TaskContainer'&gt;TaskContainer&lt;/a&gt; instance by calling &lt;a href='type://org.gradle.api.Project#getTasks()'&gt;org.gradle.api.Project#getTasks()&lt;/a&gt;, or using the 
 &lt;a href='type://tasks'&gt;tasks&lt;/a&gt; property in your build script.&lt;/p&gt; 
</description><method name="create" returnType="T" delegationTarget="Task"><description> 
 &lt;p&gt;Creates a &lt;a href='type://Task'&gt;Task&lt;/a&gt; with the given name and type, configures it with the given action, and adds it to this container.&lt;/p&gt; 
 
 &lt;p&gt;After the task is added, it is made available as a property of the project, so that you can reference the task 
 by name in your build file. See &lt;a href="../Project.html#properties"&gt;here&lt;/a&gt; for more details.&lt;/p&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;name The name of the task to be created. 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;type The type of task to create. 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;configuration The action to configure the task with. 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The newly created task object. 
 @throws InvalidUserDataException If a task with the given name already exists in this project. 
</description><parameter type="java.lang.String" name="name"/><parameter type="java.lang.Class" name="type"/><parameter type="org.gradle.api.Action" name="configuration"/></method><method name="getByPath" returnType="org.gradle.api.Task"><description> 
 &lt;p&gt;Locates a task by path. You can supply a task name, a relative path, or an absolute path. Relative paths are 
 interpreted relative to the project for this container. This method throws an exception if no task with the given 
 path exists.&lt;/p&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;path the path of the task to be returned 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The task. Never returns null 
 @throws UnknownTaskException If no task with the given path exists. 
</description><parameter type="java.lang.String" name="path"/></method><method name="create" returnType="org.gradle.api.Task" delegationTarget="Task"><description> 
 &lt;p&gt;Creates a &lt;a href='type://Task'&gt;Task&lt;/a&gt; adds it to this container. A map of creation options can be passed to this method to 
 control how the task is created. See &lt;a href='type://TaskContainer#create(java.util.Map)'&gt;#create(java.util.Map)&lt;/a&gt; for the list of options available. The given 
 closure is used to configure the task before it is returned by this method.&lt;/p&gt; 
 
 &lt;p&gt;After the task is added, it is made available as a property of the project, so that you can reference the task 
 by name in your build file. See &lt;a href="../Project.html#properties"&gt;here&lt;/a&gt; for more details.&lt;/p&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;options The task creation options. 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;configureClosure The closure to use to configure the task. 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The newly created task object 
 @throws InvalidUserDataException If a task with the given name already exists in this project. 
</description><parameter type="java.util.Map" name="options"/><parameter type="groovy.lang.Closure" name="configureClosure"/></method><method name="create" returnType="org.gradle.api.Task" delegationTarget="Task"><description> 
 &lt;p&gt;Creates a &lt;a href='type://Task'&gt;Task&lt;/a&gt; with the given name and adds it to this container.&lt;/p&gt; 
 
 &lt;p&gt;After the task is added, it is made available as a property of the project, so that you can reference the task 
 by name in your build file. See &lt;a href="../Project.html#properties"&gt;here&lt;/a&gt; for more details.&lt;/p&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;name The name of the task to be created 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The newly created task object 
 @throws InvalidUserDataException If a task with the given name already exists in this project. 
</description><parameter type="java.lang.String" name="name"/></method><method name="findByPath" returnType="org.gradle.api.Task"><description> 
 &lt;p&gt;Locates a task by path. You can supply a task name, a relative path, or an absolute path. Relative paths are 
 interpreted relative to the project for this container. This method returns null if no task with the given path 
 exists.&lt;/p&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;path the path of the task to be returned 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The task. Returns null if so such task exists. 
</description><parameter type="java.lang.String" name="path"/></method><method name="create" returnType="T" delegationTarget="Task"><description> 
 &lt;p&gt;Creates a &lt;a href='type://Task'&gt;Task&lt;/a&gt; with the given name and type, and adds it to this container.&lt;/p&gt; 
 
 &lt;p&gt;After the task is added, it is made available as a property of the project, so that you can reference the task 
 by name in your build file. See &lt;a href="../Project.html#properties"&gt;here&lt;/a&gt; for more details.&lt;/p&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;name The name of the task to be created. 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;type The type of task to create. 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The newly created task object 
 @throws InvalidUserDataException If a task with the given name already exists in this project. 
</description><parameter type="java.lang.String" name="name"/><parameter type="java.lang.Class" name="type"/></method><method name="replace" returnType="T" delegationTarget="Task"><description> 
 &lt;p&gt;Creates a &lt;a href='type://Task'&gt;Task&lt;/a&gt; with the given name and type, and adds it to this container, replacing any existing 
 task of the same name.&lt;/p&gt; 
 
 &lt;p&gt;After the task is added, it is made available as a property of the project, so that you can reference the task 
 by name in your build file. See &lt;a href="../Project.html#properties"&gt;here&lt;/a&gt; for more details.&lt;/p&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;name The name of the task to be created. 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;type The type of task to create. 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The newly created task object 
 @throws InvalidUserDataException If a task with the given name already exists in this project. 
</description><parameter type="java.lang.String" name="name"/><parameter type="java.lang.Class" name="type"/></method><method name="create" returnType="org.gradle.api.Task" delegationTarget="Task"><description> 
 &lt;p&gt;Creates a &lt;a href='type://Task'&gt;Task&lt;/a&gt; with the given name adds it to this container. The given closure is used to configure 
 the task before it is returned by this method.&lt;/p&gt; 
 
 &lt;p&gt;After the task is added, it is made available as a property of the project, so that you can reference the task 
 by name in your build file. See &lt;a href="../Project.html#properties"&gt;here&lt;/a&gt; for more details.&lt;/p&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;name The name of the task to be created 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;configureClosure The closure to use to configure the task. 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The newly created task object 
 @throws InvalidUserDataException If a task with the given name already exists in this project. 
</description><parameter type="java.lang.String" name="name"/><parameter type="groovy.lang.Closure" name="configureClosure"/></method><method name="replace" returnType="org.gradle.api.Task" delegationTarget="Task"><description> 
 &lt;p&gt;Creates a &lt;a href='type://Task'&gt;Task&lt;/a&gt; with the given name and adds it to this container, replacing any existing task with the 
 same name.&lt;/p&gt; 
 
 &lt;p&gt;After the task is added, it is made available as a property of the project, so that you can reference the task 
 by name in your build file. See &lt;a href="../Project.html#properties"&gt;here&lt;/a&gt; for more details.&lt;/p&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;name The name of the task to be created 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The newly created task object 
 @throws InvalidUserDataException If a task with the given name already exists in this project. 
</description><parameter type="java.lang.String" name="name"/></method><method name="create" returnType="org.gradle.api.Task" delegationTarget="Task"><description> 
 &lt;p&gt;Creates a &lt;a href='type://Task'&gt;Task&lt;/a&gt; and adds it to this container. A map of creation options can be passed to this method 
 to control how the task is created. The following options are available:&lt;/p&gt; 
 
 &lt;table&gt; 
 
 &lt;tr&gt;&lt;th&gt;Option&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt; 
 
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;{@value org.gradle.api.Task#TASK_NAME}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The name of the task to create.&lt;/td&gt;&lt;td&gt;None. 
 Must be specified.&lt;/td&gt;&lt;/tr&gt; 
 
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;{@value org.gradle.api.Task#TASK_TYPE}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The class of the task to 
 create.&lt;/td&gt;&lt;td&gt;&lt;a href='type://org.gradle.api.DefaultTask'&gt;org.gradle.api.DefaultTask&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt; 
 
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;{@value org.gradle.api.Task#TASK_ACTION}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The closure or &lt;a href='type://Action'&gt;Action&lt;/a&gt; to 
 execute when the task executes. See &lt;a href='type://Task#doFirst(Action)'&gt;Task#doFirst(Action)&lt;/a&gt;.&lt;/td&gt;&lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt; 
 
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;{@value org.gradle.api.Task#TASK_OVERWRITE}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Replace an existing 
 task?&lt;/td&gt;&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt; 
 
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;{@value org.gradle.api.Task#TASK_DEPENDS_ON}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The dependencies of the task. See &lt;a 
 href="../Task.html#dependencies"&gt;here&lt;/a&gt; for more details.&lt;/td&gt;&lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt; 
 
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;{@value org.gradle.api.Task#TASK_GROUP}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The group of the task.&lt;/td&gt;&lt;td&gt;&lt;code&gt;null 
 &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt; 
 
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;{@value org.gradle.api.Task#TASK_DESCRIPTION}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The description of the task.&lt;/td&gt;&lt;td&gt; 
 &lt;code&gt;null&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt; 
 
 &lt;/table&gt; 
 
 &lt;p&gt;After the task is added, it is made available as a property of the project, so that you can reference the task 
 by name in your build file.  See &lt;a href="../Project.html#properties"&gt;here&lt;/a&gt; for more details.&lt;/p&gt; 
 
 &lt;p&gt;If a task with the given name already exists in this container and the &lt;code&gt;{@value org.gradle.api.Task#TASK_OVERWRITE}&lt;/code&gt; 
 option is not set to true, an exception is thrown.&lt;/p&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;options The task creation options. 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The newly created task object 
 @throws InvalidUserDataException If a task with the given name already exists in this project. 
</description><parameter type="java.util.Map" name="options"/></method><property name="byPath" type="org.gradle.api.Task"><description> 
 &lt;p&gt;Locates a task by path. You can supply a task name, a relative path, or an absolute path. Relative paths are 
 interpreted relative to the project for this container. This method throws an exception if no task with the given 
 path exists.&lt;/p&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;path the path of the task to be returned 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;The task. Never returns null 
 @throws UnknownTaskException If no task with the given path exists. 
</description></property></type>