<?xml version="1.0" encoding="UTF-8" standalone="yes"?><type interface="true" language="gradle" name="org.gradle.api.file.ContentFilterable" version="3.0"><description> 
 Represents some binary resource whose content can be filtered. 
</description><method name="filter" returnType="org.gradle.api.file.ContentFilterable" delegationTarget="java.io.FilterReader"><description> 
 &lt;p&gt;Adds a content filter to be used during the copy.  Multiple calls to filter, add additional filters to the 
 filter chain.  Each filter should implement &lt;a href='type://java.io.FilterReader'&gt;java.io.FilterReader&lt;/a&gt;. Include &lt;a href='type://org.apache.tools.ant.filters.*'&gt;org.apache.tools.ant.filters.*&lt;/a&gt; for access to all the standard Ant filters.&lt;/p&gt; 
 
 &lt;p&gt; Examples: 
 &lt;pre&gt; 
    filter(StripJavaComments) 
    filter(com.mycompany.project.CustomFilter) 
 &lt;/pre&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;filterType Class of filter to add 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;this 
</description><parameter type="java.lang.Class" name="filterType"/></method><method name="filter" returnType="org.gradle.api.file.ContentFilterable" delegationTarget="null"><description> 
 Adds a content filter based on the provided transformer.  The Closure will be called with each line (stripped of line 
 endings) and should return a String to replace the line or &lt;a href='type://null'&gt;null&lt;/a&gt; to remove the line.  If every line is 
 removed, the result will be an empty file, not an absent one. 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;transformer to implement line based filtering 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;this 
</description><parameter type="org.gradle.api.Transformer" name="transformer"/></method><method name="filter" returnType="org.gradle.api.file.ContentFilterable" delegationTarget="java.io.FilterReader"><description> 
 &lt;p&gt;Adds a content filter to be used during the copy.  Multiple calls to filter, add additional filters to the 
 filter chain.  Each filter should implement &lt;a href='type://java.io.FilterReader'&gt;java.io.FilterReader&lt;/a&gt;. Include &lt;a href='type://org.apache.tools.ant.filters.*'&gt;org.apache.tools.ant.filters.*&lt;/a&gt; for access to all the standard Ant filters.&lt;/p&gt; 
 
 &lt;p&gt;Filter properties may be specified using groovy map syntax.&lt;/p&gt; 
 
 &lt;p&gt; Examples: 
 &lt;pre&gt; 
    filter(HeadFilter, lines:25, skip:2) 
    filter(ReplaceTokens, tokens:[copyright:'2009', version:'2.3.1']) 
 &lt;/pre&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;properties map of filter properties 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;filterType Class of filter to add 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;this 
</description><parameter type="java.util.Map" name="properties"/><parameter type="java.lang.Class" name="filterType"/></method><method name="expand" returnType="org.gradle.api.file.ContentFilterable" delegationTarget="groovy.text.SimpleTemplateEngine"><description> 
 &lt;p&gt;Expands property references in each file as it is copied. More specifically, each file is transformed using 
 Groovy's &lt;a href='type://groovy.text.SimpleTemplateEngine'&gt;groovy.text.SimpleTemplateEngine&lt;/a&gt;. This means you can use simple property references, such as 
 &lt;code&gt;$property&lt;/code&gt; or &lt;code&gt;${property}&lt;/code&gt; in the file. You can also include arbitrary Groovy code in the 
 file, such as &lt;code&gt;${version ?: 'unknown'}&lt;/code&gt; or &lt;code&gt;${classpath*.name.join(' ')}&lt;/code&gt; 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;properties to implement line based filtering 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;this 
</description><parameter type="java.util.Map" name="properties"/></method><method name="filter" returnType="org.gradle.api.file.ContentFilterable" delegationTarget="null"><description> 
 Adds a content filter based on the provided closure.  The Closure will be called with each line (stripped of line 
 endings) and should return a String to replace the line or &lt;a href='type://null'&gt;null&lt;/a&gt; to remove the line.  If every line is 
 removed, the result will be an empty file, not an absent one. 
 
 &lt;br&gt;&lt;b class='param'&gt;param:&lt;/b&gt;closure to implement line based filtering 
 &lt;br&gt;&lt;br&gt;&lt;b class='return'&gt;returns:&lt;/b&gt;this 
</description><parameter type="groovy.lang.Closure" name="closure"/></method></type>