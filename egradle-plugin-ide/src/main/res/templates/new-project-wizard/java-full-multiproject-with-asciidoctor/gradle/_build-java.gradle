/* ============================================================================
   This file contains the configurations for 
   Java settings
   ============================================================================
   
   Included from: "${rootProject.projectDir}/build.gradle"
   ============================================================================
 */
 
ext.buildContainsFailedTests=false 
 
subprojects {
   if (project.name.equals('docs')){
       return;
   }

   apply plugin: 'java'
      
   /* Setup UTF-8 for compile AND test compilation*/
   [ compileJava, compileTestJava ]*.options*.encoding = 'UTF-8'

   sourceCompatibility = '#{egradle.template.java.version}'
      
   /* Default dependencies for all sub projects. */
   dependencies{
        
       testImplementation library.junit_jupiter_api
       testImplementation library.junit_jupiter_params
       testRuntimeOnly library.junit_jupiter_engine

       testImplementation library.mockito_all
   }
   
   /* Per default GRADLE stops the build if one single test fails. We want to have all tests executed. */
    test { 
        ignoreFailures = true 
        
        // enable junit5 
        useJUnitPlatform()

        // add a collection to track failedTests
        ext.failedTests = []
        
        // add a testlistener to all tasks of type Test
        tasks.withType(Test) {
            afterTest { TestDescriptor descriptor, TestResult result ->
                if(result.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE){
                    buildContainsFailedTests=true
                    failedTests << ["${descriptor.className}::${descriptor.name}"]
                }
            }
        }
        
        // print out tracked failed tests when the build has finished
        gradle.buildFinished {
            if(!failedTests.empty){
                println "Failed tests for ${project.name}:"
                failedTests.each { failedTest ->
                    println failedTest
                }
                println ""
            }
        }
    }
   
   /**
    * Task to create source jars
    */
   task sourcesJar(type: Jar, dependsOn:classes) {
      classifier = 'sources'
      from sourceSets.main.allSource
   }

    /**
    * Task to create javadoc jars
    */
   task javadocJar(type: Jar, dependsOn:javadoc) {
      classifier = 'javadoc'
      from javadoc.destinationDir
   }

   /**
    * Define artifacts
    */
   artifacts {
      archives sourcesJar
      archives javadocJar
   }
   
}

/* When ignoreFailures was set to "true" the build will say "SUCCESFUL" even when 
 * there were failing tests - the next lines will handle this accordingly:
 */
allprojects {
        if(! project.name.equals(rootProject.name) ) {
            return
        }
        gradle.buildFinished {
        if (buildContainsFailedTests){
                throw new GradleException('Some tests have failed!')
            }
        }
    }